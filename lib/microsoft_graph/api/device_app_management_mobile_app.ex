# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.DeviceAppManagementMobileApp do
  @moduledoc """
  API calls for all endpoints tagged `DeviceAppManagementMobileApp`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Create webApp
  Create a new webApp object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_mobile_app` (MicrosoftGraphMobileApp): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_create_mobile_apps(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphMobileApp.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileApp.t} | {:error, Tesla.Env.t}
  def device_app_management_create_mobile_apps(connection, microsoft_graph_mobile_app, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/mobileApps")
      |> add_param(:body, :body, microsoft_graph_mobile_app)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete windowsMobileMSI
  Deletes a windowsMobileMSI.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_delete_mobile_apps(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_delete_mobile_apps(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get iosLobApp
  Read properties and relationships of the iosLobApp object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_get_mobile_apps(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileApp.t} | {:error, Tesla.Env.t}
  def device_app_management_get_mobile_apps(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the item of type microsoft.graph.mobileApp as microsoft.graph.androidLobApp

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAndroidLobApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_get_mobile_apps_as_android_lob_app(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAndroidLobApp.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_get_mobile_apps_as_android_lob_app(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.androidLobApp")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAndroidLobApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the item of type microsoft.graph.mobileApp as microsoft.graph.androidStoreApp

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAndroidStoreApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_get_mobile_apps_as_android_store_app(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAndroidStoreApp.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_get_mobile_apps_as_android_store_app(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.androidStoreApp")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAndroidStoreApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the item of type microsoft.graph.mobileApp as microsoft.graph.iosLobApp

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIosLobApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_get_mobile_apps_as_ios_lob_app(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIosLobApp.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_get_mobile_apps_as_ios_lob_app(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.iosLobApp")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIosLobApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the item of type microsoft.graph.mobileApp as microsoft.graph.iosStoreApp

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIosStoreApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_get_mobile_apps_as_ios_store_app(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphIosStoreApp.t} | {:error, Tesla.Env.t}
  def device_app_management_get_mobile_apps_as_ios_store_app(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.iosStoreApp")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIosStoreApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the item of type microsoft.graph.mobileApp as microsoft.graph.iosVppApp

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIosVppApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_get_mobile_apps_as_ios_vpp_app(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIosVppApp.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_get_mobile_apps_as_ios_vpp_app(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.iosVppApp")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIosVppApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the item of type microsoft.graph.mobileApp as microsoft.graph.macOSDmgApp

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMacOsDmgApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_get_mobile_apps_as_mac_os_dmg_app(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMacOsDmgApp.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_get_mobile_apps_as_mac_os_dmg_app(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.macOSDmgApp")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMacOsDmgApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the item of type microsoft.graph.mobileApp as microsoft.graph.macOSLobApp

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMacOsLobApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_get_mobile_apps_as_mac_os_lob_app(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMacOsLobApp.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_get_mobile_apps_as_mac_os_lob_app(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.macOSLobApp")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMacOsLobApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the item of type microsoft.graph.mobileApp as microsoft.graph.managedAndroidLobApp

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphManagedAndroidLobApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_get_mobile_apps_as_managed_android_lob_app(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphManagedAndroidLobApp.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_get_mobile_apps_as_managed_android_lob_app(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedAndroidLobApp")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphManagedAndroidLobApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the item of type microsoft.graph.mobileApp as microsoft.graph.managedIOSLobApp

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphManagedIosLobApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_get_mobile_apps_as_managed_ios_lob_app(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphManagedIosLobApp.t} | {:error, Tesla.Env.t}
  def device_app_management_get_mobile_apps_as_managed_ios_lob_app(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedIOSLobApp")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphManagedIosLobApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the item of type microsoft.graph.mobileApp as microsoft.graph.managedMobileLobApp

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphManagedMobileLobApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_get_mobile_apps_as_managed_mobile_lob_app(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphManagedMobileLobApp.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_get_mobile_apps_as_managed_mobile_lob_app(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedMobileLobApp")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphManagedMobileLobApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the item of type microsoft.graph.mobileApp as microsoft.graph.microsoftStoreForBusinessApp

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMicrosoftStoreForBusinessApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_get_mobile_apps_as_microsoft_store_for_business_app(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMicrosoftStoreForBusinessApp.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_get_mobile_apps_as_microsoft_store_for_business_app(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.microsoftStoreForBusinessApp")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMicrosoftStoreForBusinessApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the item of type microsoft.graph.mobileApp as microsoft.graph.win32LobApp

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWin32LobApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_get_mobile_apps_as_win32_lob_app(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWin32LobApp.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_get_mobile_apps_as_win32_lob_app(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.win32LobApp")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWin32LobApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the item of type microsoft.graph.mobileApp as microsoft.graph.windowsAppX

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWindowsAppX.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_get_mobile_apps_as_windows_app_x(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWindowsAppX.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_get_mobile_apps_as_windows_app_x(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsAppX")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWindowsAppX},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the item of type microsoft.graph.mobileApp as microsoft.graph.windowsMobileMSI

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWindowsMobileMsi.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_get_mobile_apps_as_windows_mobile_msi(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWindowsMobileMsi.t} | {:error, Tesla.Env.t}
  def device_app_management_get_mobile_apps_as_windows_mobile_msi(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsMobileMSI")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWindowsMobileMsi},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the item of type microsoft.graph.mobileApp as microsoft.graph.windowsUniversalAppX

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWindowsUniversalAppX.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_get_mobile_apps_as_windows_universal_app_x(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWindowsUniversalAppX.t} | {:error, Tesla.Env.t}
  def device_app_management_get_mobile_apps_as_windows_universal_app_x(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsUniversalAppX")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWindowsUniversalAppX},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the item of type microsoft.graph.mobileApp as microsoft.graph.windowsWebApp

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWindowsWebApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_get_mobile_apps_as_windows_web_app(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWindowsWebApp.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_get_mobile_apps_as_windows_web_app(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsWebApp")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWindowsWebApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List windowsUniversalAppXs
  List properties and relationships of the windowsUniversalAppX objects.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_list_mobile_apps(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_list_mobile_apps(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the items of type microsoft.graph.androidLobApp in the microsoft.graph.mobileApp collection

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAndroidLobAppCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_list_mobile_apps_as_android_lob_app(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAndroidLobAppCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_list_mobile_apps_as_android_lob_app(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/graph.androidLobApp")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAndroidLobAppCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the items of type microsoft.graph.androidStoreApp in the microsoft.graph.mobileApp collection

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAndroidStoreAppCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_list_mobile_apps_as_android_store_app(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAndroidStoreAppCollectionResponse.t} | {:error, Tesla.Env.t}
  def device_app_management_list_mobile_apps_as_android_store_app(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/graph.androidStoreApp")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAndroidStoreAppCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the items of type microsoft.graph.iosLobApp in the microsoft.graph.mobileApp collection

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIosLobAppCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_list_mobile_apps_as_ios_lob_app(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIosLobAppCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_list_mobile_apps_as_ios_lob_app(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/graph.iosLobApp")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIosLobAppCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the items of type microsoft.graph.iosStoreApp in the microsoft.graph.mobileApp collection

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIosStoreAppCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_list_mobile_apps_as_ios_store_app(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIosStoreAppCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_list_mobile_apps_as_ios_store_app(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/graph.iosStoreApp")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIosStoreAppCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the items of type microsoft.graph.iosVppApp in the microsoft.graph.mobileApp collection

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphIosVppAppCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_list_mobile_apps_as_ios_vpp_app(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphIosVppAppCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_list_mobile_apps_as_ios_vpp_app(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/graph.iosVppApp")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphIosVppAppCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the items of type microsoft.graph.macOSDmgApp in the microsoft.graph.mobileApp collection

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMacOsDmgAppCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_list_mobile_apps_as_mac_os_dmg_app(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMacOsDmgAppCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_list_mobile_apps_as_mac_os_dmg_app(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/graph.macOSDmgApp")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMacOsDmgAppCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the items of type microsoft.graph.macOSLobApp in the microsoft.graph.mobileApp collection

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMacOsLobAppCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_list_mobile_apps_as_mac_os_lob_app(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMacOsLobAppCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_list_mobile_apps_as_mac_os_lob_app(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/graph.macOSLobApp")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMacOsLobAppCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the items of type microsoft.graph.managedAndroidLobApp in the microsoft.graph.mobileApp collection

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphManagedAndroidLobAppCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_list_mobile_apps_as_managed_android_lob_app(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphManagedAndroidLobAppCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_list_mobile_apps_as_managed_android_lob_app(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/graph.managedAndroidLobApp")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphManagedAndroidLobAppCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the items of type microsoft.graph.managedIOSLobApp in the microsoft.graph.mobileApp collection

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphManagedIosLobAppCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_list_mobile_apps_as_managed_ios_lob_app(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphManagedIosLobAppCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_list_mobile_apps_as_managed_ios_lob_app(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/graph.managedIOSLobApp")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphManagedIosLobAppCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the items of type microsoft.graph.managedMobileLobApp in the microsoft.graph.mobileApp collection

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphManagedMobileLobAppCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_list_mobile_apps_as_managed_mobile_lob_app(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphManagedMobileLobAppCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_list_mobile_apps_as_managed_mobile_lob_app(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/graph.managedMobileLobApp")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphManagedMobileLobAppCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the items of type microsoft.graph.microsoftStoreForBusinessApp in the microsoft.graph.mobileApp collection

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMicrosoftStoreForBusinessAppCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_list_mobile_apps_as_microsoft_store_for_business_app(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMicrosoftStoreForBusinessAppCollectionResponse.t} | {:error, Tesla.Env.t}
  def device_app_management_list_mobile_apps_as_microsoft_store_for_business_app(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/graph.microsoftStoreForBusinessApp")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMicrosoftStoreForBusinessAppCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the items of type microsoft.graph.win32LobApp in the microsoft.graph.mobileApp collection

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWin32LobAppCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_list_mobile_apps_as_win32_lob_app(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWin32LobAppCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_list_mobile_apps_as_win32_lob_app(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/graph.win32LobApp")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWin32LobAppCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the items of type microsoft.graph.windowsAppX in the microsoft.graph.mobileApp collection

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWindowsAppXCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_list_mobile_apps_as_windows_app_x(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphWindowsAppXCollectionResponse.t} | {:error, Tesla.Env.t}
  def device_app_management_list_mobile_apps_as_windows_app_x(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/graph.windowsAppX")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWindowsAppXCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the items of type microsoft.graph.windowsMobileMSI in the microsoft.graph.mobileApp collection

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWindowsMobileMsiCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_list_mobile_apps_as_windows_mobile_msi(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWindowsMobileMsiCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_list_mobile_apps_as_windows_mobile_msi(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/graph.windowsMobileMSI")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWindowsMobileMsiCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the items of type microsoft.graph.windowsUniversalAppX in the microsoft.graph.mobileApp collection

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWindowsUniversalAppXCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_list_mobile_apps_as_windows_universal_app_x(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWindowsUniversalAppXCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_list_mobile_apps_as_windows_universal_app_x(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/graph.windowsUniversalAppX")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWindowsUniversalAppXCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the items of type microsoft.graph.windowsWebApp in the microsoft.graph.mobileApp collection

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphWindowsWebAppCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_list_mobile_apps_as_windows_web_app(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphWindowsWebAppCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_list_mobile_apps_as_windows_web_app(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/graph.windowsWebApp")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphWindowsWebAppCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_assignments_get_count0362(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_assignments_get_count0362(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsWebApp/assignments/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_assignments_get_count0658(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_assignments_get_count0658(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.macOSLobApp/assignments/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_assignments_get_count07a1(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_assignments_get_count07a1(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsUniversalAppX/assignments/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_assignments_get_count1911(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_assignments_get_count1911(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.androidLobApp/assignments/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_assignments_get_count22ac(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_assignments_get_count22ac(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.iosLobApp/assignments/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_assignments_get_count2a85(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_assignments_get_count2a85(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.macOSDmgApp/assignments/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_assignments_get_count38b3(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_assignments_get_count38b3(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.microsoftStoreForBusinessApp/assignments/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_assignments_get_count4603(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_assignments_get_count4603(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsMobileMSI/assignments/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_assignments_get_count493c(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_assignments_get_count493c(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/assignments/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_assignments_get_count4b18(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_assignments_get_count4b18(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.iosVppApp/assignments/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_assignments_get_count59b1(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_assignments_get_count59b1(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsAppX/assignments/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_assignments_get_count6633(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_assignments_get_count6633(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedIOSLobApp/assignments/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_assignments_get_count6eb3(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_assignments_get_count6eb3(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.androidStoreApp/assignments/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_assignments_get_count7cc2(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_assignments_get_count7cc2(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedAndroidLobApp/assignments/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_assignments_get_count7f2e(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_assignments_get_count7f2e(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedMobileLobApp/assignments/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_assignments_get_count_ce71(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_assignments_get_count_ce71(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.win32LobApp/assignments/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_assignments_get_count_ec45(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_assignments_get_count_ec45(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.iosStoreApp/assignments/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_categories_get_count06f1(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_categories_get_count06f1(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.iosStoreApp/categories/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_categories_get_count18f1(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_categories_get_count18f1(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.macOSLobApp/categories/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_categories_get_count2f24(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_categories_get_count2f24(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.androidStoreApp/categories/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_categories_get_count4240(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_categories_get_count4240(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsMobileMSI/categories/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_categories_get_count6d0e(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_categories_get_count6d0e(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/categories/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_categories_get_count6e46(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_categories_get_count6e46(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedMobileLobApp/categories/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_categories_get_count79ca(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_categories_get_count79ca(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsWebApp/categories/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_categories_get_count7fa7(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_categories_get_count7fa7(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.iosVppApp/categories/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_categories_get_count828c(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_categories_get_count828c(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.androidLobApp/categories/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_categories_get_count9433(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_categories_get_count9433(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.iosLobApp/categories/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_categories_get_count_baea(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_categories_get_count_baea(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedIOSLobApp/categories/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_categories_get_count_c2ed(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_categories_get_count_c2ed(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsUniversalAppX/categories/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_categories_get_count_ccbd(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_categories_get_count_ccbd(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.macOSDmgApp/categories/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_categories_get_count_d1eb(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_categories_get_count_d1eb(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsAppX/categories/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_categories_get_count_e09e(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_categories_get_count_e09e(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.microsoftStoreForBusinessApp/categories/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_categories_get_count_ebb1(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_categories_get_count_ebb1(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedAndroidLobApp/categories/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_categories_get_count_fcaa(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_categories_get_count_fcaa(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.win32LobApp/categories/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_committed_contained_apps_get_count_b859(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_committed_contained_apps_get_count_b859(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsUniversalAppX/committedContainedApps/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_contained_apps_get_count1666(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_contained_apps_get_count1666(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedAndroidLobApp/contentVersions/#{mobile_app_content_id}/containedApps/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_contained_apps_get_count19e5(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_contained_apps_get_count19e5(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.macOSDmgApp/contentVersions/#{mobile_app_content_id}/containedApps/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_contained_apps_get_count1ef7(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_contained_apps_get_count1ef7(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsMobileMSI/contentVersions/#{mobile_app_content_id}/containedApps/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_contained_apps_get_count4c53(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_contained_apps_get_count4c53(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedMobileLobApp/contentVersions/#{mobile_app_content_id}/containedApps/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_contained_apps_get_count510a(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_contained_apps_get_count510a(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.androidLobApp/contentVersions/#{mobile_app_content_id}/containedApps/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_contained_apps_get_count5c38(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_contained_apps_get_count5c38(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.win32LobApp/contentVersions/#{mobile_app_content_id}/containedApps/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_contained_apps_get_count667c(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_contained_apps_get_count667c(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.macOSLobApp/contentVersions/#{mobile_app_content_id}/containedApps/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_contained_apps_get_count7a04(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_contained_apps_get_count7a04(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.iosLobApp/contentVersions/#{mobile_app_content_id}/containedApps/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_contained_apps_get_count877c(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_contained_apps_get_count877c(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedIOSLobApp/contentVersions/#{mobile_app_content_id}/containedApps/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_contained_apps_get_count_be43(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_contained_apps_get_count_be43(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsUniversalAppX/contentVersions/#{mobile_app_content_id}/containedApps/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_contained_apps_get_count_d3ec(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_contained_apps_get_count_d3ec(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsAppX/contentVersions/#{mobile_app_content_id}/containedApps/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to containedApps for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `microsoft_graph_mobile_contained_app` (MicrosoftGraphMobileContainedApp): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_create_contained_apps(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_create_contained_apps(connection, mobile_app_id, mobile_app_content_id, microsoft_graph_mobile_contained_app, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.macOSDmgApp/contentVersions/#{mobile_app_content_id}/containedApps")
      |> add_param(:body, :body, microsoft_graph_mobile_contained_app)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to containedApps for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `microsoft_graph_mobile_contained_app` (MicrosoftGraphMobileContainedApp): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_create_contained_apps_0(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_create_contained_apps_0(connection, mobile_app_id, mobile_app_content_id, microsoft_graph_mobile_contained_app, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsMobileMSI/contentVersions/#{mobile_app_content_id}/containedApps")
      |> add_param(:body, :body, microsoft_graph_mobile_contained_app)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to containedApps for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `microsoft_graph_mobile_contained_app` (MicrosoftGraphMobileContainedApp): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_create_contained_apps_1(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_create_contained_apps_1(connection, mobile_app_id, mobile_app_content_id, microsoft_graph_mobile_contained_app, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.macOSLobApp/contentVersions/#{mobile_app_content_id}/containedApps")
      |> add_param(:body, :body, microsoft_graph_mobile_contained_app)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to containedApps for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `microsoft_graph_mobile_contained_app` (MicrosoftGraphMobileContainedApp): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_create_contained_apps_2(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_create_contained_apps_2(connection, mobile_app_id, mobile_app_content_id, microsoft_graph_mobile_contained_app, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsUniversalAppX/contentVersions/#{mobile_app_content_id}/containedApps")
      |> add_param(:body, :body, microsoft_graph_mobile_contained_app)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to containedApps for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `microsoft_graph_mobile_contained_app` (MicrosoftGraphMobileContainedApp): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_create_contained_apps_3(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_create_contained_apps_3(connection, mobile_app_id, mobile_app_content_id, microsoft_graph_mobile_contained_app, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedIOSLobApp/contentVersions/#{mobile_app_content_id}/containedApps")
      |> add_param(:body, :body, microsoft_graph_mobile_contained_app)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to containedApps for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `microsoft_graph_mobile_contained_app` (MicrosoftGraphMobileContainedApp): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_create_contained_apps_4(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_create_contained_apps_4(connection, mobile_app_id, mobile_app_content_id, microsoft_graph_mobile_contained_app, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.androidLobApp/contentVersions/#{mobile_app_content_id}/containedApps")
      |> add_param(:body, :body, microsoft_graph_mobile_contained_app)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to containedApps for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `microsoft_graph_mobile_contained_app` (MicrosoftGraphMobileContainedApp): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_create_contained_apps_5(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_create_contained_apps_5(connection, mobile_app_id, mobile_app_content_id, microsoft_graph_mobile_contained_app, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedAndroidLobApp/contentVersions/#{mobile_app_content_id}/containedApps")
      |> add_param(:body, :body, microsoft_graph_mobile_contained_app)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to containedApps for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `microsoft_graph_mobile_contained_app` (MicrosoftGraphMobileContainedApp): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_create_contained_apps_6(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_create_contained_apps_6(connection, mobile_app_id, mobile_app_content_id, microsoft_graph_mobile_contained_app, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.win32LobApp/contentVersions/#{mobile_app_content_id}/containedApps")
      |> add_param(:body, :body, microsoft_graph_mobile_contained_app)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to containedApps for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `microsoft_graph_mobile_contained_app` (MicrosoftGraphMobileContainedApp): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_create_contained_apps_7(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_create_contained_apps_7(connection, mobile_app_id, mobile_app_content_id, microsoft_graph_mobile_contained_app, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.iosLobApp/contentVersions/#{mobile_app_content_id}/containedApps")
      |> add_param(:body, :body, microsoft_graph_mobile_contained_app)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to containedApps for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `microsoft_graph_mobile_contained_app` (MicrosoftGraphMobileContainedApp): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_create_contained_apps_8(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_create_contained_apps_8(connection, mobile_app_id, mobile_app_content_id, microsoft_graph_mobile_contained_app, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedMobileLobApp/contentVersions/#{mobile_app_content_id}/containedApps")
      |> add_param(:body, :body, microsoft_graph_mobile_contained_app)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to containedApps for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `microsoft_graph_mobile_contained_app` (MicrosoftGraphMobileContainedApp): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_create_contained_apps_9(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_create_contained_apps_9(connection, mobile_app_id, mobile_app_content_id, microsoft_graph_mobile_contained_app, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsAppX/contentVersions/#{mobile_app_content_id}/containedApps")
      |> add_param(:body, :body, microsoft_graph_mobile_contained_app)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to files for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `microsoft_graph_mobile_app_content_file` (MicrosoftGraphMobileAppContentFile): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_create_files(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_create_files(connection, mobile_app_id, mobile_app_content_id, microsoft_graph_mobile_app_content_file, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.win32LobApp/contentVersions/#{mobile_app_content_id}/files")
      |> add_param(:body, :body, microsoft_graph_mobile_app_content_file)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to files for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `microsoft_graph_mobile_app_content_file` (MicrosoftGraphMobileAppContentFile): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_create_files_0(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_create_files_0(connection, mobile_app_id, mobile_app_content_id, microsoft_graph_mobile_app_content_file, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsMobileMSI/contentVersions/#{mobile_app_content_id}/files")
      |> add_param(:body, :body, microsoft_graph_mobile_app_content_file)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to files for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `microsoft_graph_mobile_app_content_file` (MicrosoftGraphMobileAppContentFile): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_create_files_1(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_create_files_1(connection, mobile_app_id, mobile_app_content_id, microsoft_graph_mobile_app_content_file, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.iosLobApp/contentVersions/#{mobile_app_content_id}/files")
      |> add_param(:body, :body, microsoft_graph_mobile_app_content_file)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to files for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `microsoft_graph_mobile_app_content_file` (MicrosoftGraphMobileAppContentFile): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_create_files_2(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_create_files_2(connection, mobile_app_id, mobile_app_content_id, microsoft_graph_mobile_app_content_file, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsUniversalAppX/contentVersions/#{mobile_app_content_id}/files")
      |> add_param(:body, :body, microsoft_graph_mobile_app_content_file)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to files for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `microsoft_graph_mobile_app_content_file` (MicrosoftGraphMobileAppContentFile): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_create_files_3(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_create_files_3(connection, mobile_app_id, mobile_app_content_id, microsoft_graph_mobile_app_content_file, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedAndroidLobApp/contentVersions/#{mobile_app_content_id}/files")
      |> add_param(:body, :body, microsoft_graph_mobile_app_content_file)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to files for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `microsoft_graph_mobile_app_content_file` (MicrosoftGraphMobileAppContentFile): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_create_files_4(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_create_files_4(connection, mobile_app_id, mobile_app_content_id, microsoft_graph_mobile_app_content_file, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.macOSLobApp/contentVersions/#{mobile_app_content_id}/files")
      |> add_param(:body, :body, microsoft_graph_mobile_app_content_file)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to files for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `microsoft_graph_mobile_app_content_file` (MicrosoftGraphMobileAppContentFile): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_create_files_5(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_create_files_5(connection, mobile_app_id, mobile_app_content_id, microsoft_graph_mobile_app_content_file, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.androidLobApp/contentVersions/#{mobile_app_content_id}/files")
      |> add_param(:body, :body, microsoft_graph_mobile_app_content_file)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to files for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `microsoft_graph_mobile_app_content_file` (MicrosoftGraphMobileAppContentFile): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_create_files_6(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_create_files_6(connection, mobile_app_id, mobile_app_content_id, microsoft_graph_mobile_app_content_file, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.macOSDmgApp/contentVersions/#{mobile_app_content_id}/files")
      |> add_param(:body, :body, microsoft_graph_mobile_app_content_file)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to files for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `microsoft_graph_mobile_app_content_file` (MicrosoftGraphMobileAppContentFile): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_create_files_7(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_create_files_7(connection, mobile_app_id, mobile_app_content_id, microsoft_graph_mobile_app_content_file, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedMobileLobApp/contentVersions/#{mobile_app_content_id}/files")
      |> add_param(:body, :body, microsoft_graph_mobile_app_content_file)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to files for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `microsoft_graph_mobile_app_content_file` (MicrosoftGraphMobileAppContentFile): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_create_files_8(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_create_files_8(connection, mobile_app_id, mobile_app_content_id, microsoft_graph_mobile_app_content_file, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsAppX/contentVersions/#{mobile_app_content_id}/files")
      |> add_param(:body, :body, microsoft_graph_mobile_app_content_file)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to files for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `microsoft_graph_mobile_app_content_file` (MicrosoftGraphMobileAppContentFile): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_create_files_9(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_create_files_9(connection, mobile_app_id, mobile_app_content_id, microsoft_graph_mobile_app_content_file, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedIOSLobApp/contentVersions/#{mobile_app_content_id}/files")
      |> add_param(:body, :body, microsoft_graph_mobile_app_content_file)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property containedApps for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_contained_app_id` (String.t): The unique identifier of mobileContainedApp
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_delete_contained_apps(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_delete_contained_apps(connection, mobile_app_id, mobile_app_content_id, mobile_contained_app_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.macOSLobApp/contentVersions/#{mobile_app_content_id}/containedApps/#{mobile_contained_app_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property containedApps for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_contained_app_id` (String.t): The unique identifier of mobileContainedApp
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_delete_contained_apps_0(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_delete_contained_apps_0(connection, mobile_app_id, mobile_app_content_id, mobile_contained_app_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedIOSLobApp/contentVersions/#{mobile_app_content_id}/containedApps/#{mobile_contained_app_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property containedApps for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_contained_app_id` (String.t): The unique identifier of mobileContainedApp
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_delete_contained_apps_1(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_delete_contained_apps_1(connection, mobile_app_id, mobile_app_content_id, mobile_contained_app_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.iosLobApp/contentVersions/#{mobile_app_content_id}/containedApps/#{mobile_contained_app_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property containedApps for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_contained_app_id` (String.t): The unique identifier of mobileContainedApp
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_delete_contained_apps_2(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_delete_contained_apps_2(connection, mobile_app_id, mobile_app_content_id, mobile_contained_app_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.macOSDmgApp/contentVersions/#{mobile_app_content_id}/containedApps/#{mobile_contained_app_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property containedApps for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_contained_app_id` (String.t): The unique identifier of mobileContainedApp
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_delete_contained_apps_3(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_delete_contained_apps_3(connection, mobile_app_id, mobile_app_content_id, mobile_contained_app_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.androidLobApp/contentVersions/#{mobile_app_content_id}/containedApps/#{mobile_contained_app_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property containedApps for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_contained_app_id` (String.t): The unique identifier of mobileContainedApp
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_delete_contained_apps_4(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_delete_contained_apps_4(connection, mobile_app_id, mobile_app_content_id, mobile_contained_app_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsAppX/contentVersions/#{mobile_app_content_id}/containedApps/#{mobile_contained_app_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property containedApps for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_contained_app_id` (String.t): The unique identifier of mobileContainedApp
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_delete_contained_apps_5(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_delete_contained_apps_5(connection, mobile_app_id, mobile_app_content_id, mobile_contained_app_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedMobileLobApp/contentVersions/#{mobile_app_content_id}/containedApps/#{mobile_contained_app_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property containedApps for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_contained_app_id` (String.t): The unique identifier of mobileContainedApp
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_delete_contained_apps_6(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_delete_contained_apps_6(connection, mobile_app_id, mobile_app_content_id, mobile_contained_app_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedAndroidLobApp/contentVersions/#{mobile_app_content_id}/containedApps/#{mobile_contained_app_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property containedApps for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_contained_app_id` (String.t): The unique identifier of mobileContainedApp
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_delete_contained_apps_7(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_delete_contained_apps_7(connection, mobile_app_id, mobile_app_content_id, mobile_contained_app_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.win32LobApp/contentVersions/#{mobile_app_content_id}/containedApps/#{mobile_contained_app_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property containedApps for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_contained_app_id` (String.t): The unique identifier of mobileContainedApp
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_delete_contained_apps_8(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_delete_contained_apps_8(connection, mobile_app_id, mobile_app_content_id, mobile_contained_app_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsUniversalAppX/contentVersions/#{mobile_app_content_id}/containedApps/#{mobile_contained_app_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property containedApps for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_contained_app_id` (String.t): The unique identifier of mobileContainedApp
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_delete_contained_apps_9(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_delete_contained_apps_9(connection, mobile_app_id, mobile_app_content_id, mobile_contained_app_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsMobileMSI/contentVersions/#{mobile_app_content_id}/containedApps/#{mobile_contained_app_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property files for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_app_content_file_id` (String.t): The unique identifier of mobileAppContentFile
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_delete_files(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_delete_files(connection, mobile_app_id, mobile_app_content_id, mobile_app_content_file_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedIOSLobApp/contentVersions/#{mobile_app_content_id}/files/#{mobile_app_content_file_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property files for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_app_content_file_id` (String.t): The unique identifier of mobileAppContentFile
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_delete_files_0(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_delete_files_0(connection, mobile_app_id, mobile_app_content_id, mobile_app_content_file_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.win32LobApp/contentVersions/#{mobile_app_content_id}/files/#{mobile_app_content_file_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property files for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_app_content_file_id` (String.t): The unique identifier of mobileAppContentFile
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_delete_files_1(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_delete_files_1(connection, mobile_app_id, mobile_app_content_id, mobile_app_content_file_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.macOSDmgApp/contentVersions/#{mobile_app_content_id}/files/#{mobile_app_content_file_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property files for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_app_content_file_id` (String.t): The unique identifier of mobileAppContentFile
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_delete_files_2(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_delete_files_2(connection, mobile_app_id, mobile_app_content_id, mobile_app_content_file_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.androidLobApp/contentVersions/#{mobile_app_content_id}/files/#{mobile_app_content_file_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property files for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_app_content_file_id` (String.t): The unique identifier of mobileAppContentFile
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_delete_files_3(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_delete_files_3(connection, mobile_app_id, mobile_app_content_id, mobile_app_content_file_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.macOSLobApp/contentVersions/#{mobile_app_content_id}/files/#{mobile_app_content_file_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property files for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_app_content_file_id` (String.t): The unique identifier of mobileAppContentFile
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_delete_files_4(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_delete_files_4(connection, mobile_app_id, mobile_app_content_id, mobile_app_content_file_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsUniversalAppX/contentVersions/#{mobile_app_content_id}/files/#{mobile_app_content_file_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property files for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_app_content_file_id` (String.t): The unique identifier of mobileAppContentFile
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_delete_files_5(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_delete_files_5(connection, mobile_app_id, mobile_app_content_id, mobile_app_content_file_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedAndroidLobApp/contentVersions/#{mobile_app_content_id}/files/#{mobile_app_content_file_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property files for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_app_content_file_id` (String.t): The unique identifier of mobileAppContentFile
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_delete_files_6(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_delete_files_6(connection, mobile_app_id, mobile_app_content_id, mobile_app_content_file_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsMobileMSI/contentVersions/#{mobile_app_content_id}/files/#{mobile_app_content_file_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property files for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_app_content_file_id` (String.t): The unique identifier of mobileAppContentFile
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_delete_files_7(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_delete_files_7(connection, mobile_app_id, mobile_app_content_id, mobile_app_content_file_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedMobileLobApp/contentVersions/#{mobile_app_content_id}/files/#{mobile_app_content_file_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property files for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_app_content_file_id` (String.t): The unique identifier of mobileAppContentFile
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_delete_files_8(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_delete_files_8(connection, mobile_app_id, mobile_app_content_id, mobile_app_content_file_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsAppX/contentVersions/#{mobile_app_content_id}/files/#{mobile_app_content_file_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property files for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_app_content_file_id` (String.t): The unique identifier of mobileAppContentFile
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_delete_files_9(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_delete_files_9(connection, mobile_app_id, mobile_app_content_id, mobile_app_content_file_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.iosLobApp/contentVersions/#{mobile_app_content_id}/files/#{mobile_app_content_file_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_files_get_count1de1(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_files_get_count1de1(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.win32LobApp/contentVersions/#{mobile_app_content_id}/files/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_files_get_count21f7(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_files_get_count21f7(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsAppX/contentVersions/#{mobile_app_content_id}/files/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_files_get_count237b(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_files_get_count237b(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedAndroidLobApp/contentVersions/#{mobile_app_content_id}/files/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_files_get_count36b4(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_files_get_count36b4(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.macOSDmgApp/contentVersions/#{mobile_app_content_id}/files/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_files_get_count43a7(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_files_get_count43a7(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsUniversalAppX/contentVersions/#{mobile_app_content_id}/files/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_files_get_count56d9(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_files_get_count56d9(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsMobileMSI/contentVersions/#{mobile_app_content_id}/files/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_files_get_count6260(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_files_get_count6260(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedIOSLobApp/contentVersions/#{mobile_app_content_id}/files/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_files_get_count_d41e(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_files_get_count_d41e(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.androidLobApp/contentVersions/#{mobile_app_content_id}/files/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_files_get_count_ebb2(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_files_get_count_ebb2(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.macOSLobApp/contentVersions/#{mobile_app_content_id}/files/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_files_get_count_ec6f(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_files_get_count_ec6f(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.iosLobApp/contentVersions/#{mobile_app_content_id}/files/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_files_get_count_f9ec(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_files_get_count_f9ec(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedMobileLobApp/contentVersions/#{mobile_app_content_id}/files/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get containedApps from deviceAppManagement
  The collection of contained apps in a MobileLobApp acting as a package.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_contained_app_id` (String.t): The unique identifier of mobileContainedApp
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_get_contained_apps(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_get_contained_apps(connection, mobile_app_id, mobile_app_content_id, mobile_contained_app_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.macOSLobApp/contentVersions/#{mobile_app_content_id}/containedApps/#{mobile_contained_app_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get containedApps from deviceAppManagement
  The collection of contained apps in a MobileLobApp acting as a package.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_contained_app_id` (String.t): The unique identifier of mobileContainedApp
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_get_contained_apps_0(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_get_contained_apps_0(connection, mobile_app_id, mobile_app_content_id, mobile_contained_app_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedIOSLobApp/contentVersions/#{mobile_app_content_id}/containedApps/#{mobile_contained_app_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get containedApps from deviceAppManagement
  The collection of contained apps in a MobileLobApp acting as a package.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_contained_app_id` (String.t): The unique identifier of mobileContainedApp
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_get_contained_apps_1(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_get_contained_apps_1(connection, mobile_app_id, mobile_app_content_id, mobile_contained_app_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.iosLobApp/contentVersions/#{mobile_app_content_id}/containedApps/#{mobile_contained_app_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get containedApps from deviceAppManagement
  The collection of contained apps in a MobileLobApp acting as a package.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_contained_app_id` (String.t): The unique identifier of mobileContainedApp
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_get_contained_apps_2(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_get_contained_apps_2(connection, mobile_app_id, mobile_app_content_id, mobile_contained_app_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.macOSDmgApp/contentVersions/#{mobile_app_content_id}/containedApps/#{mobile_contained_app_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get containedApps from deviceAppManagement
  The collection of contained apps in a MobileLobApp acting as a package.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_contained_app_id` (String.t): The unique identifier of mobileContainedApp
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_get_contained_apps_3(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_get_contained_apps_3(connection, mobile_app_id, mobile_app_content_id, mobile_contained_app_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.androidLobApp/contentVersions/#{mobile_app_content_id}/containedApps/#{mobile_contained_app_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get containedApps from deviceAppManagement
  The collection of contained apps in a MobileLobApp acting as a package.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_contained_app_id` (String.t): The unique identifier of mobileContainedApp
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_get_contained_apps_4(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_get_contained_apps_4(connection, mobile_app_id, mobile_app_content_id, mobile_contained_app_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsAppX/contentVersions/#{mobile_app_content_id}/containedApps/#{mobile_contained_app_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get containedApps from deviceAppManagement
  The collection of contained apps in a MobileLobApp acting as a package.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_contained_app_id` (String.t): The unique identifier of mobileContainedApp
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_get_contained_apps_5(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_get_contained_apps_5(connection, mobile_app_id, mobile_app_content_id, mobile_contained_app_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedMobileLobApp/contentVersions/#{mobile_app_content_id}/containedApps/#{mobile_contained_app_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get containedApps from deviceAppManagement
  The collection of contained apps in a MobileLobApp acting as a package.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_contained_app_id` (String.t): The unique identifier of mobileContainedApp
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_get_contained_apps_6(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_get_contained_apps_6(connection, mobile_app_id, mobile_app_content_id, mobile_contained_app_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedAndroidLobApp/contentVersions/#{mobile_app_content_id}/containedApps/#{mobile_contained_app_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get containedApps from deviceAppManagement
  The collection of contained apps in a MobileLobApp acting as a package.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_contained_app_id` (String.t): The unique identifier of mobileContainedApp
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_get_contained_apps_7(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_get_contained_apps_7(connection, mobile_app_id, mobile_app_content_id, mobile_contained_app_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.win32LobApp/contentVersions/#{mobile_app_content_id}/containedApps/#{mobile_contained_app_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get containedApps from deviceAppManagement
  The collection of contained apps in a MobileLobApp acting as a package.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_contained_app_id` (String.t): The unique identifier of mobileContainedApp
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_get_contained_apps_8(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_get_contained_apps_8(connection, mobile_app_id, mobile_app_content_id, mobile_contained_app_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsUniversalAppX/contentVersions/#{mobile_app_content_id}/containedApps/#{mobile_contained_app_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get containedApps from deviceAppManagement
  The collection of contained apps in a MobileLobApp acting as a package.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_contained_app_id` (String.t): The unique identifier of mobileContainedApp
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_get_contained_apps_9(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_get_contained_apps_9(connection, mobile_app_id, mobile_app_content_id, mobile_contained_app_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsMobileMSI/contentVersions/#{mobile_app_content_id}/containedApps/#{mobile_contained_app_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_get_count12ca(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_get_count12ca(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.androidLobApp/contentVersions/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_get_count1710(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_get_count1710(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.win32LobApp/contentVersions/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_get_count2f10(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_get_count2f10(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsUniversalAppX/contentVersions/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_get_count4cf0(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_get_count4cf0(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsMobileMSI/contentVersions/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_get_count57c4(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_get_count57c4(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedIOSLobApp/contentVersions/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_get_count_bb5b(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_get_count_bb5b(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedAndroidLobApp/contentVersions/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_get_count_db35(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_get_count_db35(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedMobileLobApp/contentVersions/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_get_count_df85(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_get_count_df85(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.macOSDmgApp/contentVersions/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_get_count_e02a(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_get_count_e02a(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsAppX/contentVersions/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_get_count_e450(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_get_count_e450(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.iosLobApp/contentVersions/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_get_count_f249(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_get_count_f249(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.macOSLobApp/contentVersions/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get files from deviceAppManagement
  The list of files for this app content version.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_app_content_file_id` (String.t): The unique identifier of mobileAppContentFile
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_get_files(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_get_files(connection, mobile_app_id, mobile_app_content_id, mobile_app_content_file_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedIOSLobApp/contentVersions/#{mobile_app_content_id}/files/#{mobile_app_content_file_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get files from deviceAppManagement
  The list of files for this app content version.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_app_content_file_id` (String.t): The unique identifier of mobileAppContentFile
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_get_files_0(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_get_files_0(connection, mobile_app_id, mobile_app_content_id, mobile_app_content_file_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.win32LobApp/contentVersions/#{mobile_app_content_id}/files/#{mobile_app_content_file_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get files from deviceAppManagement
  The list of files for this app content version.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_app_content_file_id` (String.t): The unique identifier of mobileAppContentFile
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_get_files_1(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_get_files_1(connection, mobile_app_id, mobile_app_content_id, mobile_app_content_file_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.macOSDmgApp/contentVersions/#{mobile_app_content_id}/files/#{mobile_app_content_file_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get files from deviceAppManagement
  The list of files for this app content version.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_app_content_file_id` (String.t): The unique identifier of mobileAppContentFile
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_get_files_2(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_get_files_2(connection, mobile_app_id, mobile_app_content_id, mobile_app_content_file_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.androidLobApp/contentVersions/#{mobile_app_content_id}/files/#{mobile_app_content_file_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get files from deviceAppManagement
  The list of files for this app content version.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_app_content_file_id` (String.t): The unique identifier of mobileAppContentFile
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_get_files_3(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_get_files_3(connection, mobile_app_id, mobile_app_content_id, mobile_app_content_file_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.macOSLobApp/contentVersions/#{mobile_app_content_id}/files/#{mobile_app_content_file_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get files from deviceAppManagement
  The list of files for this app content version.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_app_content_file_id` (String.t): The unique identifier of mobileAppContentFile
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_get_files_4(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_get_files_4(connection, mobile_app_id, mobile_app_content_id, mobile_app_content_file_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsUniversalAppX/contentVersions/#{mobile_app_content_id}/files/#{mobile_app_content_file_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get files from deviceAppManagement
  The list of files for this app content version.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_app_content_file_id` (String.t): The unique identifier of mobileAppContentFile
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_get_files_5(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_get_files_5(connection, mobile_app_id, mobile_app_content_id, mobile_app_content_file_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedAndroidLobApp/contentVersions/#{mobile_app_content_id}/files/#{mobile_app_content_file_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get files from deviceAppManagement
  The list of files for this app content version.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_app_content_file_id` (String.t): The unique identifier of mobileAppContentFile
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_get_files_6(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_get_files_6(connection, mobile_app_id, mobile_app_content_id, mobile_app_content_file_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsMobileMSI/contentVersions/#{mobile_app_content_id}/files/#{mobile_app_content_file_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get files from deviceAppManagement
  The list of files for this app content version.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_app_content_file_id` (String.t): The unique identifier of mobileAppContentFile
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_get_files_7(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_get_files_7(connection, mobile_app_id, mobile_app_content_id, mobile_app_content_file_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedMobileLobApp/contentVersions/#{mobile_app_content_id}/files/#{mobile_app_content_file_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get files from deviceAppManagement
  The list of files for this app content version.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_app_content_file_id` (String.t): The unique identifier of mobileAppContentFile
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_get_files_8(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_get_files_8(connection, mobile_app_id, mobile_app_content_id, mobile_app_content_file_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsAppX/contentVersions/#{mobile_app_content_id}/files/#{mobile_app_content_file_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get files from deviceAppManagement
  The list of files for this app content version.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_app_content_file_id` (String.t): The unique identifier of mobileAppContentFile
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_get_files_9(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_get_files_9(connection, mobile_app_id, mobile_app_content_id, mobile_app_content_file_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.iosLobApp/contentVersions/#{mobile_app_content_id}/files/#{mobile_app_content_file_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get containedApps from deviceAppManagement
  The collection of contained apps in a MobileLobApp acting as a package.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedAppCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_list_contained_apps(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedAppCollectionResponse.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_list_contained_apps(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.macOSDmgApp/contentVersions/#{mobile_app_content_id}/containedApps")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileContainedAppCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get containedApps from deviceAppManagement
  The collection of contained apps in a MobileLobApp acting as a package.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedAppCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_list_contained_apps_0(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedAppCollectionResponse.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_list_contained_apps_0(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsMobileMSI/contentVersions/#{mobile_app_content_id}/containedApps")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileContainedAppCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get containedApps from deviceAppManagement
  The collection of contained apps in a MobileLobApp acting as a package.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedAppCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_list_contained_apps_1(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedAppCollectionResponse.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_list_contained_apps_1(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.macOSLobApp/contentVersions/#{mobile_app_content_id}/containedApps")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileContainedAppCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get containedApps from deviceAppManagement
  The collection of contained apps in a MobileLobApp acting as a package.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedAppCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_list_contained_apps_2(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedAppCollectionResponse.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_list_contained_apps_2(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsUniversalAppX/contentVersions/#{mobile_app_content_id}/containedApps")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileContainedAppCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get containedApps from deviceAppManagement
  The collection of contained apps in a MobileLobApp acting as a package.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedAppCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_list_contained_apps_3(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedAppCollectionResponse.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_list_contained_apps_3(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedIOSLobApp/contentVersions/#{mobile_app_content_id}/containedApps")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileContainedAppCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get containedApps from deviceAppManagement
  The collection of contained apps in a MobileLobApp acting as a package.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedAppCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_list_contained_apps_4(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedAppCollectionResponse.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_list_contained_apps_4(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.androidLobApp/contentVersions/#{mobile_app_content_id}/containedApps")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileContainedAppCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get containedApps from deviceAppManagement
  The collection of contained apps in a MobileLobApp acting as a package.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedAppCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_list_contained_apps_5(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedAppCollectionResponse.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_list_contained_apps_5(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedAndroidLobApp/contentVersions/#{mobile_app_content_id}/containedApps")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileContainedAppCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get containedApps from deviceAppManagement
  The collection of contained apps in a MobileLobApp acting as a package.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedAppCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_list_contained_apps_6(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedAppCollectionResponse.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_list_contained_apps_6(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.win32LobApp/contentVersions/#{mobile_app_content_id}/containedApps")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileContainedAppCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get containedApps from deviceAppManagement
  The collection of contained apps in a MobileLobApp acting as a package.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedAppCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_list_contained_apps_7(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedAppCollectionResponse.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_list_contained_apps_7(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.iosLobApp/contentVersions/#{mobile_app_content_id}/containedApps")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileContainedAppCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get containedApps from deviceAppManagement
  The collection of contained apps in a MobileLobApp acting as a package.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedAppCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_list_contained_apps_8(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedAppCollectionResponse.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_list_contained_apps_8(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedMobileLobApp/contentVersions/#{mobile_app_content_id}/containedApps")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileContainedAppCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get containedApps from deviceAppManagement
  The collection of contained apps in a MobileLobApp acting as a package.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedAppCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_list_contained_apps_9(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedAppCollectionResponse.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_list_contained_apps_9(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsAppX/contentVersions/#{mobile_app_content_id}/containedApps")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileContainedAppCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get files from deviceAppManagement
  The list of files for this app content version.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFileCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_list_files(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFileCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_list_files(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.win32LobApp/contentVersions/#{mobile_app_content_id}/files")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFileCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get files from deviceAppManagement
  The list of files for this app content version.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFileCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_list_files_0(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFileCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_list_files_0(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsMobileMSI/contentVersions/#{mobile_app_content_id}/files")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFileCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get files from deviceAppManagement
  The list of files for this app content version.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFileCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_list_files_1(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFileCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_list_files_1(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.iosLobApp/contentVersions/#{mobile_app_content_id}/files")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFileCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get files from deviceAppManagement
  The list of files for this app content version.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFileCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_list_files_2(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFileCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_list_files_2(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsUniversalAppX/contentVersions/#{mobile_app_content_id}/files")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFileCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get files from deviceAppManagement
  The list of files for this app content version.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFileCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_list_files_3(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFileCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_list_files_3(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedAndroidLobApp/contentVersions/#{mobile_app_content_id}/files")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFileCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get files from deviceAppManagement
  The list of files for this app content version.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFileCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_list_files_4(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFileCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_list_files_4(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.macOSLobApp/contentVersions/#{mobile_app_content_id}/files")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFileCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get files from deviceAppManagement
  The list of files for this app content version.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFileCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_list_files_5(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFileCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_list_files_5(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.androidLobApp/contentVersions/#{mobile_app_content_id}/files")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFileCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get files from deviceAppManagement
  The list of files for this app content version.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFileCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_list_files_6(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFileCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_list_files_6(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.macOSDmgApp/contentVersions/#{mobile_app_content_id}/files")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFileCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get files from deviceAppManagement
  The list of files for this app content version.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFileCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_list_files_7(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFileCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_list_files_7(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedMobileLobApp/contentVersions/#{mobile_app_content_id}/files")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFileCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get files from deviceAppManagement
  The list of files for this app content version.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFileCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_list_files_8(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFileCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_list_files_8(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsAppX/contentVersions/#{mobile_app_content_id}/files")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFileCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get files from deviceAppManagement
  The list of files for this app content version.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFileCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_list_files_9(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFileCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_list_files_9(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedIOSLobApp/contentVersions/#{mobile_app_content_id}/files")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFileCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property containedApps in deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_contained_app_id` (String.t): The unique identifier of mobileContainedApp
  - `microsoft_graph_mobile_contained_app` (MicrosoftGraphMobileContainedApp): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_update_contained_apps(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_update_contained_apps(connection, mobile_app_id, mobile_app_content_id, mobile_contained_app_id, microsoft_graph_mobile_contained_app, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.macOSLobApp/contentVersions/#{mobile_app_content_id}/containedApps/#{mobile_contained_app_id}")
      |> add_param(:body, :body, microsoft_graph_mobile_contained_app)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property containedApps in deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_contained_app_id` (String.t): The unique identifier of mobileContainedApp
  - `microsoft_graph_mobile_contained_app` (MicrosoftGraphMobileContainedApp): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_update_contained_apps_0(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_update_contained_apps_0(connection, mobile_app_id, mobile_app_content_id, mobile_contained_app_id, microsoft_graph_mobile_contained_app, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedIOSLobApp/contentVersions/#{mobile_app_content_id}/containedApps/#{mobile_contained_app_id}")
      |> add_param(:body, :body, microsoft_graph_mobile_contained_app)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property containedApps in deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_contained_app_id` (String.t): The unique identifier of mobileContainedApp
  - `microsoft_graph_mobile_contained_app` (MicrosoftGraphMobileContainedApp): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_update_contained_apps_1(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_update_contained_apps_1(connection, mobile_app_id, mobile_app_content_id, mobile_contained_app_id, microsoft_graph_mobile_contained_app, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.iosLobApp/contentVersions/#{mobile_app_content_id}/containedApps/#{mobile_contained_app_id}")
      |> add_param(:body, :body, microsoft_graph_mobile_contained_app)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property containedApps in deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_contained_app_id` (String.t): The unique identifier of mobileContainedApp
  - `microsoft_graph_mobile_contained_app` (MicrosoftGraphMobileContainedApp): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_update_contained_apps_2(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_update_contained_apps_2(connection, mobile_app_id, mobile_app_content_id, mobile_contained_app_id, microsoft_graph_mobile_contained_app, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.macOSDmgApp/contentVersions/#{mobile_app_content_id}/containedApps/#{mobile_contained_app_id}")
      |> add_param(:body, :body, microsoft_graph_mobile_contained_app)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property containedApps in deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_contained_app_id` (String.t): The unique identifier of mobileContainedApp
  - `microsoft_graph_mobile_contained_app` (MicrosoftGraphMobileContainedApp): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_update_contained_apps_3(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_update_contained_apps_3(connection, mobile_app_id, mobile_app_content_id, mobile_contained_app_id, microsoft_graph_mobile_contained_app, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.androidLobApp/contentVersions/#{mobile_app_content_id}/containedApps/#{mobile_contained_app_id}")
      |> add_param(:body, :body, microsoft_graph_mobile_contained_app)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property containedApps in deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_contained_app_id` (String.t): The unique identifier of mobileContainedApp
  - `microsoft_graph_mobile_contained_app` (MicrosoftGraphMobileContainedApp): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_update_contained_apps_4(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_update_contained_apps_4(connection, mobile_app_id, mobile_app_content_id, mobile_contained_app_id, microsoft_graph_mobile_contained_app, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsAppX/contentVersions/#{mobile_app_content_id}/containedApps/#{mobile_contained_app_id}")
      |> add_param(:body, :body, microsoft_graph_mobile_contained_app)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property containedApps in deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_contained_app_id` (String.t): The unique identifier of mobileContainedApp
  - `microsoft_graph_mobile_contained_app` (MicrosoftGraphMobileContainedApp): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_update_contained_apps_5(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_update_contained_apps_5(connection, mobile_app_id, mobile_app_content_id, mobile_contained_app_id, microsoft_graph_mobile_contained_app, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedMobileLobApp/contentVersions/#{mobile_app_content_id}/containedApps/#{mobile_contained_app_id}")
      |> add_param(:body, :body, microsoft_graph_mobile_contained_app)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property containedApps in deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_contained_app_id` (String.t): The unique identifier of mobileContainedApp
  - `microsoft_graph_mobile_contained_app` (MicrosoftGraphMobileContainedApp): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_update_contained_apps_6(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_update_contained_apps_6(connection, mobile_app_id, mobile_app_content_id, mobile_contained_app_id, microsoft_graph_mobile_contained_app, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedAndroidLobApp/contentVersions/#{mobile_app_content_id}/containedApps/#{mobile_contained_app_id}")
      |> add_param(:body, :body, microsoft_graph_mobile_contained_app)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property containedApps in deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_contained_app_id` (String.t): The unique identifier of mobileContainedApp
  - `microsoft_graph_mobile_contained_app` (MicrosoftGraphMobileContainedApp): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_update_contained_apps_7(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_update_contained_apps_7(connection, mobile_app_id, mobile_app_content_id, mobile_contained_app_id, microsoft_graph_mobile_contained_app, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.win32LobApp/contentVersions/#{mobile_app_content_id}/containedApps/#{mobile_contained_app_id}")
      |> add_param(:body, :body, microsoft_graph_mobile_contained_app)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property containedApps in deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_contained_app_id` (String.t): The unique identifier of mobileContainedApp
  - `microsoft_graph_mobile_contained_app` (MicrosoftGraphMobileContainedApp): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_update_contained_apps_8(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_update_contained_apps_8(connection, mobile_app_id, mobile_app_content_id, mobile_contained_app_id, microsoft_graph_mobile_contained_app, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsUniversalAppX/contentVersions/#{mobile_app_content_id}/containedApps/#{mobile_contained_app_id}")
      |> add_param(:body, :body, microsoft_graph_mobile_contained_app)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property containedApps in deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_contained_app_id` (String.t): The unique identifier of mobileContainedApp
  - `microsoft_graph_mobile_contained_app` (MicrosoftGraphMobileContainedApp): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_update_contained_apps_9(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_update_contained_apps_9(connection, mobile_app_id, mobile_app_content_id, mobile_contained_app_id, microsoft_graph_mobile_contained_app, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsMobileMSI/contentVersions/#{mobile_app_content_id}/containedApps/#{mobile_contained_app_id}")
      |> add_param(:body, :body, microsoft_graph_mobile_contained_app)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property files in deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_app_content_file_id` (String.t): The unique identifier of mobileAppContentFile
  - `microsoft_graph_mobile_app_content_file` (MicrosoftGraphMobileAppContentFile): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_update_files(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_update_files(connection, mobile_app_id, mobile_app_content_id, mobile_app_content_file_id, microsoft_graph_mobile_app_content_file, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedIOSLobApp/contentVersions/#{mobile_app_content_id}/files/#{mobile_app_content_file_id}")
      |> add_param(:body, :body, microsoft_graph_mobile_app_content_file)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property files in deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_app_content_file_id` (String.t): The unique identifier of mobileAppContentFile
  - `microsoft_graph_mobile_app_content_file` (MicrosoftGraphMobileAppContentFile): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_update_files_0(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_update_files_0(connection, mobile_app_id, mobile_app_content_id, mobile_app_content_file_id, microsoft_graph_mobile_app_content_file, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.win32LobApp/contentVersions/#{mobile_app_content_id}/files/#{mobile_app_content_file_id}")
      |> add_param(:body, :body, microsoft_graph_mobile_app_content_file)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property files in deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_app_content_file_id` (String.t): The unique identifier of mobileAppContentFile
  - `microsoft_graph_mobile_app_content_file` (MicrosoftGraphMobileAppContentFile): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_update_files_1(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_update_files_1(connection, mobile_app_id, mobile_app_content_id, mobile_app_content_file_id, microsoft_graph_mobile_app_content_file, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.macOSDmgApp/contentVersions/#{mobile_app_content_id}/files/#{mobile_app_content_file_id}")
      |> add_param(:body, :body, microsoft_graph_mobile_app_content_file)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property files in deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_app_content_file_id` (String.t): The unique identifier of mobileAppContentFile
  - `microsoft_graph_mobile_app_content_file` (MicrosoftGraphMobileAppContentFile): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_update_files_2(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_update_files_2(connection, mobile_app_id, mobile_app_content_id, mobile_app_content_file_id, microsoft_graph_mobile_app_content_file, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.androidLobApp/contentVersions/#{mobile_app_content_id}/files/#{mobile_app_content_file_id}")
      |> add_param(:body, :body, microsoft_graph_mobile_app_content_file)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property files in deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_app_content_file_id` (String.t): The unique identifier of mobileAppContentFile
  - `microsoft_graph_mobile_app_content_file` (MicrosoftGraphMobileAppContentFile): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_update_files_3(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_update_files_3(connection, mobile_app_id, mobile_app_content_id, mobile_app_content_file_id, microsoft_graph_mobile_app_content_file, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.macOSLobApp/contentVersions/#{mobile_app_content_id}/files/#{mobile_app_content_file_id}")
      |> add_param(:body, :body, microsoft_graph_mobile_app_content_file)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property files in deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_app_content_file_id` (String.t): The unique identifier of mobileAppContentFile
  - `microsoft_graph_mobile_app_content_file` (MicrosoftGraphMobileAppContentFile): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_update_files_4(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_update_files_4(connection, mobile_app_id, mobile_app_content_id, mobile_app_content_file_id, microsoft_graph_mobile_app_content_file, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsUniversalAppX/contentVersions/#{mobile_app_content_id}/files/#{mobile_app_content_file_id}")
      |> add_param(:body, :body, microsoft_graph_mobile_app_content_file)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property files in deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_app_content_file_id` (String.t): The unique identifier of mobileAppContentFile
  - `microsoft_graph_mobile_app_content_file` (MicrosoftGraphMobileAppContentFile): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_update_files_5(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_update_files_5(connection, mobile_app_id, mobile_app_content_id, mobile_app_content_file_id, microsoft_graph_mobile_app_content_file, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedAndroidLobApp/contentVersions/#{mobile_app_content_id}/files/#{mobile_app_content_file_id}")
      |> add_param(:body, :body, microsoft_graph_mobile_app_content_file)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property files in deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_app_content_file_id` (String.t): The unique identifier of mobileAppContentFile
  - `microsoft_graph_mobile_app_content_file` (MicrosoftGraphMobileAppContentFile): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_update_files_6(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_update_files_6(connection, mobile_app_id, mobile_app_content_id, mobile_app_content_file_id, microsoft_graph_mobile_app_content_file, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsMobileMSI/contentVersions/#{mobile_app_content_id}/files/#{mobile_app_content_file_id}")
      |> add_param(:body, :body, microsoft_graph_mobile_app_content_file)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property files in deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_app_content_file_id` (String.t): The unique identifier of mobileAppContentFile
  - `microsoft_graph_mobile_app_content_file` (MicrosoftGraphMobileAppContentFile): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_update_files_7(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_update_files_7(connection, mobile_app_id, mobile_app_content_id, mobile_app_content_file_id, microsoft_graph_mobile_app_content_file, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedMobileLobApp/contentVersions/#{mobile_app_content_id}/files/#{mobile_app_content_file_id}")
      |> add_param(:body, :body, microsoft_graph_mobile_app_content_file)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property files in deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_app_content_file_id` (String.t): The unique identifier of mobileAppContentFile
  - `microsoft_graph_mobile_app_content_file` (MicrosoftGraphMobileAppContentFile): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_update_files_8(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_update_files_8(connection, mobile_app_id, mobile_app_content_id, mobile_app_content_file_id, microsoft_graph_mobile_app_content_file, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsAppX/contentVersions/#{mobile_app_content_id}/files/#{mobile_app_content_file_id}")
      |> add_param(:body, :body, microsoft_graph_mobile_app_content_file)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property files in deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `mobile_app_content_file_id` (String.t): The unique identifier of mobileAppContentFile
  - `microsoft_graph_mobile_app_content_file` (MicrosoftGraphMobileAppContentFile): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_content_versions_update_files_9(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_content_versions_update_files_9(connection, mobile_app_id, mobile_app_content_id, mobile_app_content_file_id, microsoft_graph_mobile_app_content_file, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.iosLobApp/contentVersions/#{mobile_app_content_id}/files/#{mobile_app_content_file_id}")
      |> add_param(:body, :body, microsoft_graph_mobile_app_content_file)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContentFile},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create mobileAppAssignment
  Create a new mobileAppAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `microsoft_graph_mobile_app_assignment` (MicrosoftGraphMobileAppAssignment): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_create_assignments(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_create_assignments(connection, mobile_app_id, microsoft_graph_mobile_app_assignment, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.iosStoreApp/assignments")
      |> add_param(:body, :body, microsoft_graph_mobile_app_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create mobileAppAssignment
  Create a new mobileAppAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `microsoft_graph_mobile_app_assignment` (MicrosoftGraphMobileAppAssignment): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_create_assignments_0(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_create_assignments_0(connection, mobile_app_id, microsoft_graph_mobile_app_assignment, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsAppX/assignments")
      |> add_param(:body, :body, microsoft_graph_mobile_app_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create mobileAppAssignment
  Create a new mobileAppAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `microsoft_graph_mobile_app_assignment` (MicrosoftGraphMobileAppAssignment): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_create_assignments_1(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_create_assignments_1(connection, mobile_app_id, microsoft_graph_mobile_app_assignment, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsWebApp/assignments")
      |> add_param(:body, :body, microsoft_graph_mobile_app_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create mobileAppAssignment
  Create a new mobileAppAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `microsoft_graph_mobile_app_assignment` (MicrosoftGraphMobileAppAssignment): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_create_assignments_10(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_create_assignments_10(connection, mobile_app_id, microsoft_graph_mobile_app_assignment, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedIOSLobApp/assignments")
      |> add_param(:body, :body, microsoft_graph_mobile_app_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create mobileAppAssignment
  Create a new mobileAppAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `microsoft_graph_mobile_app_assignment` (MicrosoftGraphMobileAppAssignment): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_create_assignments_11(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_create_assignments_11(connection, mobile_app_id, microsoft_graph_mobile_app_assignment, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedAndroidLobApp/assignments")
      |> add_param(:body, :body, microsoft_graph_mobile_app_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create mobileAppAssignment
  Create a new mobileAppAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `microsoft_graph_mobile_app_assignment` (MicrosoftGraphMobileAppAssignment): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_create_assignments_12(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_create_assignments_12(connection, mobile_app_id, microsoft_graph_mobile_app_assignment, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/assignments")
      |> add_param(:body, :body, microsoft_graph_mobile_app_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create mobileAppAssignment
  Create a new mobileAppAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `microsoft_graph_mobile_app_assignment` (MicrosoftGraphMobileAppAssignment): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_create_assignments_13(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_create_assignments_13(connection, mobile_app_id, microsoft_graph_mobile_app_assignment, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedMobileLobApp/assignments")
      |> add_param(:body, :body, microsoft_graph_mobile_app_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create mobileAppAssignment
  Create a new mobileAppAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `microsoft_graph_mobile_app_assignment` (MicrosoftGraphMobileAppAssignment): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_create_assignments_14(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_create_assignments_14(connection, mobile_app_id, microsoft_graph_mobile_app_assignment, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.iosLobApp/assignments")
      |> add_param(:body, :body, microsoft_graph_mobile_app_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create mobileAppAssignment
  Create a new mobileAppAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `microsoft_graph_mobile_app_assignment` (MicrosoftGraphMobileAppAssignment): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_create_assignments_15(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_create_assignments_15(connection, mobile_app_id, microsoft_graph_mobile_app_assignment, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.microsoftStoreForBusinessApp/assignments")
      |> add_param(:body, :body, microsoft_graph_mobile_app_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create mobileAppAssignment
  Create a new mobileAppAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `microsoft_graph_mobile_app_assignment` (MicrosoftGraphMobileAppAssignment): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_create_assignments_2(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_create_assignments_2(connection, mobile_app_id, microsoft_graph_mobile_app_assignment, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.macOSDmgApp/assignments")
      |> add_param(:body, :body, microsoft_graph_mobile_app_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create mobileAppAssignment
  Create a new mobileAppAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `microsoft_graph_mobile_app_assignment` (MicrosoftGraphMobileAppAssignment): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_create_assignments_3(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_create_assignments_3(connection, mobile_app_id, microsoft_graph_mobile_app_assignment, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsUniversalAppX/assignments")
      |> add_param(:body, :body, microsoft_graph_mobile_app_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create mobileAppAssignment
  Create a new mobileAppAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `microsoft_graph_mobile_app_assignment` (MicrosoftGraphMobileAppAssignment): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_create_assignments_4(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_create_assignments_4(connection, mobile_app_id, microsoft_graph_mobile_app_assignment, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.macOSLobApp/assignments")
      |> add_param(:body, :body, microsoft_graph_mobile_app_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create mobileAppAssignment
  Create a new mobileAppAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `microsoft_graph_mobile_app_assignment` (MicrosoftGraphMobileAppAssignment): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_create_assignments_5(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_create_assignments_5(connection, mobile_app_id, microsoft_graph_mobile_app_assignment, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.iosVppApp/assignments")
      |> add_param(:body, :body, microsoft_graph_mobile_app_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create mobileAppAssignment
  Create a new mobileAppAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `microsoft_graph_mobile_app_assignment` (MicrosoftGraphMobileAppAssignment): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_create_assignments_6(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_create_assignments_6(connection, mobile_app_id, microsoft_graph_mobile_app_assignment, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.androidLobApp/assignments")
      |> add_param(:body, :body, microsoft_graph_mobile_app_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create mobileAppAssignment
  Create a new mobileAppAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `microsoft_graph_mobile_app_assignment` (MicrosoftGraphMobileAppAssignment): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_create_assignments_7(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_create_assignments_7(connection, mobile_app_id, microsoft_graph_mobile_app_assignment, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsMobileMSI/assignments")
      |> add_param(:body, :body, microsoft_graph_mobile_app_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create mobileAppAssignment
  Create a new mobileAppAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `microsoft_graph_mobile_app_assignment` (MicrosoftGraphMobileAppAssignment): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_create_assignments_8(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_create_assignments_8(connection, mobile_app_id, microsoft_graph_mobile_app_assignment, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.win32LobApp/assignments")
      |> add_param(:body, :body, microsoft_graph_mobile_app_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create mobileAppAssignment
  Create a new mobileAppAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `microsoft_graph_mobile_app_assignment` (MicrosoftGraphMobileAppAssignment): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_create_assignments_9(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_create_assignments_9(connection, mobile_app_id, microsoft_graph_mobile_app_assignment, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.androidStoreApp/assignments")
      |> add_param(:body, :body, microsoft_graph_mobile_app_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to committedContainedApps for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `microsoft_graph_mobile_contained_app` (MicrosoftGraphMobileContainedApp): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_create_committed_contained_apps(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_create_committed_contained_apps(connection, mobile_app_id, microsoft_graph_mobile_contained_app, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsUniversalAppX/committedContainedApps")
      |> add_param(:body, :body, microsoft_graph_mobile_contained_app)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to contentVersions for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `microsoft_graph_mobile_app_content` (MicrosoftGraphMobileAppContent): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_create_content_versions(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_create_content_versions(connection, mobile_app_id, microsoft_graph_mobile_app_content, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedAndroidLobApp/contentVersions")
      |> add_param(:body, :body, microsoft_graph_mobile_app_content)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to contentVersions for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `microsoft_graph_mobile_app_content` (MicrosoftGraphMobileAppContent): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_create_content_versions_0(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_create_content_versions_0(connection, mobile_app_id, microsoft_graph_mobile_app_content, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.macOSDmgApp/contentVersions")
      |> add_param(:body, :body, microsoft_graph_mobile_app_content)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to contentVersions for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `microsoft_graph_mobile_app_content` (MicrosoftGraphMobileAppContent): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_create_content_versions_1(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_create_content_versions_1(connection, mobile_app_id, microsoft_graph_mobile_app_content, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsMobileMSI/contentVersions")
      |> add_param(:body, :body, microsoft_graph_mobile_app_content)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to contentVersions for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `microsoft_graph_mobile_app_content` (MicrosoftGraphMobileAppContent): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_create_content_versions_2(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_create_content_versions_2(connection, mobile_app_id, microsoft_graph_mobile_app_content, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedMobileLobApp/contentVersions")
      |> add_param(:body, :body, microsoft_graph_mobile_app_content)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to contentVersions for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `microsoft_graph_mobile_app_content` (MicrosoftGraphMobileAppContent): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_create_content_versions_3(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_create_content_versions_3(connection, mobile_app_id, microsoft_graph_mobile_app_content, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.iosLobApp/contentVersions")
      |> add_param(:body, :body, microsoft_graph_mobile_app_content)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to contentVersions for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `microsoft_graph_mobile_app_content` (MicrosoftGraphMobileAppContent): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_create_content_versions_4(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_create_content_versions_4(connection, mobile_app_id, microsoft_graph_mobile_app_content, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedIOSLobApp/contentVersions")
      |> add_param(:body, :body, microsoft_graph_mobile_app_content)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to contentVersions for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `microsoft_graph_mobile_app_content` (MicrosoftGraphMobileAppContent): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_create_content_versions_5(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_create_content_versions_5(connection, mobile_app_id, microsoft_graph_mobile_app_content, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsUniversalAppX/contentVersions")
      |> add_param(:body, :body, microsoft_graph_mobile_app_content)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to contentVersions for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `microsoft_graph_mobile_app_content` (MicrosoftGraphMobileAppContent): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_create_content_versions_6(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_create_content_versions_6(connection, mobile_app_id, microsoft_graph_mobile_app_content, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.win32LobApp/contentVersions")
      |> add_param(:body, :body, microsoft_graph_mobile_app_content)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to contentVersions for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `microsoft_graph_mobile_app_content` (MicrosoftGraphMobileAppContent): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_create_content_versions_7(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_create_content_versions_7(connection, mobile_app_id, microsoft_graph_mobile_app_content, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.androidLobApp/contentVersions")
      |> add_param(:body, :body, microsoft_graph_mobile_app_content)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to contentVersions for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `microsoft_graph_mobile_app_content` (MicrosoftGraphMobileAppContent): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_create_content_versions_8(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_create_content_versions_8(connection, mobile_app_id, microsoft_graph_mobile_app_content, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsAppX/contentVersions")
      |> add_param(:body, :body, microsoft_graph_mobile_app_content)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to contentVersions for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `microsoft_graph_mobile_app_content` (MicrosoftGraphMobileAppContent): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_create_content_versions_9(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_create_content_versions_9(connection, mobile_app_id, microsoft_graph_mobile_app_content, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.macOSLobApp/contentVersions")
      |> add_param(:body, :body, microsoft_graph_mobile_app_content)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete mobileAppAssignment
  Deletes a mobileAppAssignment.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_assignment_id` (String.t): The unique identifier of mobileAppAssignment
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_delete_assignments(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_delete_assignments(connection, mobile_app_id, mobile_app_assignment_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedMobileLobApp/assignments/#{mobile_app_assignment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete mobileAppAssignment
  Deletes a mobileAppAssignment.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_assignment_id` (String.t): The unique identifier of mobileAppAssignment
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_delete_assignments_0(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_delete_assignments_0(connection, mobile_app_id, mobile_app_assignment_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.microsoftStoreForBusinessApp/assignments/#{mobile_app_assignment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete mobileAppAssignment
  Deletes a mobileAppAssignment.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_assignment_id` (String.t): The unique identifier of mobileAppAssignment
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_delete_assignments_1(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_delete_assignments_1(connection, mobile_app_id, mobile_app_assignment_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsUniversalAppX/assignments/#{mobile_app_assignment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete mobileAppAssignment
  Deletes a mobileAppAssignment.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_assignment_id` (String.t): The unique identifier of mobileAppAssignment
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_delete_assignments_10(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_delete_assignments_10(connection, mobile_app_id, mobile_app_assignment_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsAppX/assignments/#{mobile_app_assignment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete mobileAppAssignment
  Deletes a mobileAppAssignment.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_assignment_id` (String.t): The unique identifier of mobileAppAssignment
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_delete_assignments_11(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_delete_assignments_11(connection, mobile_app_id, mobile_app_assignment_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.macOSDmgApp/assignments/#{mobile_app_assignment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete mobileAppAssignment
  Deletes a mobileAppAssignment.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_assignment_id` (String.t): The unique identifier of mobileAppAssignment
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_delete_assignments_12(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_delete_assignments_12(connection, mobile_app_id, mobile_app_assignment_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.iosStoreApp/assignments/#{mobile_app_assignment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete mobileAppAssignment
  Deletes a mobileAppAssignment.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_assignment_id` (String.t): The unique identifier of mobileAppAssignment
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_delete_assignments_13(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_delete_assignments_13(connection, mobile_app_id, mobile_app_assignment_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.androidStoreApp/assignments/#{mobile_app_assignment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete mobileAppAssignment
  Deletes a mobileAppAssignment.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_assignment_id` (String.t): The unique identifier of mobileAppAssignment
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_delete_assignments_14(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_delete_assignments_14(connection, mobile_app_id, mobile_app_assignment_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.win32LobApp/assignments/#{mobile_app_assignment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete mobileAppAssignment
  Deletes a mobileAppAssignment.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_assignment_id` (String.t): The unique identifier of mobileAppAssignment
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_delete_assignments_15(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_delete_assignments_15(connection, mobile_app_id, mobile_app_assignment_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.iosLobApp/assignments/#{mobile_app_assignment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete mobileAppAssignment
  Deletes a mobileAppAssignment.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_assignment_id` (String.t): The unique identifier of mobileAppAssignment
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_delete_assignments_2(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_delete_assignments_2(connection, mobile_app_id, mobile_app_assignment_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.androidLobApp/assignments/#{mobile_app_assignment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete mobileAppAssignment
  Deletes a mobileAppAssignment.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_assignment_id` (String.t): The unique identifier of mobileAppAssignment
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_delete_assignments_3(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_delete_assignments_3(connection, mobile_app_id, mobile_app_assignment_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/assignments/#{mobile_app_assignment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete mobileAppAssignment
  Deletes a mobileAppAssignment.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_assignment_id` (String.t): The unique identifier of mobileAppAssignment
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_delete_assignments_4(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_delete_assignments_4(connection, mobile_app_id, mobile_app_assignment_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsWebApp/assignments/#{mobile_app_assignment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete mobileAppAssignment
  Deletes a mobileAppAssignment.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_assignment_id` (String.t): The unique identifier of mobileAppAssignment
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_delete_assignments_5(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_delete_assignments_5(connection, mobile_app_id, mobile_app_assignment_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsMobileMSI/assignments/#{mobile_app_assignment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete mobileAppAssignment
  Deletes a mobileAppAssignment.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_assignment_id` (String.t): The unique identifier of mobileAppAssignment
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_delete_assignments_6(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_delete_assignments_6(connection, mobile_app_id, mobile_app_assignment_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedIOSLobApp/assignments/#{mobile_app_assignment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete mobileAppAssignment
  Deletes a mobileAppAssignment.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_assignment_id` (String.t): The unique identifier of mobileAppAssignment
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_delete_assignments_7(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_delete_assignments_7(connection, mobile_app_id, mobile_app_assignment_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.iosVppApp/assignments/#{mobile_app_assignment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete mobileAppAssignment
  Deletes a mobileAppAssignment.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_assignment_id` (String.t): The unique identifier of mobileAppAssignment
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_delete_assignments_8(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_delete_assignments_8(connection, mobile_app_id, mobile_app_assignment_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedAndroidLobApp/assignments/#{mobile_app_assignment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete mobileAppAssignment
  Deletes a mobileAppAssignment.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_assignment_id` (String.t): The unique identifier of mobileAppAssignment
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_delete_assignments_9(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_delete_assignments_9(connection, mobile_app_id, mobile_app_assignment_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.macOSLobApp/assignments/#{mobile_app_assignment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property committedContainedApps for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_contained_app_id` (String.t): The unique identifier of mobileContainedApp
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_delete_committed_contained_apps(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_delete_committed_contained_apps(connection, mobile_app_id, mobile_contained_app_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsUniversalAppX/committedContainedApps/#{mobile_contained_app_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property contentVersions for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_delete_content_versions(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_delete_content_versions(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsUniversalAppX/contentVersions/#{mobile_app_content_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property contentVersions for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_delete_content_versions_0(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_delete_content_versions_0(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.iosLobApp/contentVersions/#{mobile_app_content_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property contentVersions for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_delete_content_versions_1(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_delete_content_versions_1(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedIOSLobApp/contentVersions/#{mobile_app_content_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property contentVersions for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_delete_content_versions_2(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_delete_content_versions_2(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedMobileLobApp/contentVersions/#{mobile_app_content_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property contentVersions for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_delete_content_versions_3(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_delete_content_versions_3(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsMobileMSI/contentVersions/#{mobile_app_content_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property contentVersions for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_delete_content_versions_4(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_delete_content_versions_4(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.macOSLobApp/contentVersions/#{mobile_app_content_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property contentVersions for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_delete_content_versions_5(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_delete_content_versions_5(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.androidLobApp/contentVersions/#{mobile_app_content_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property contentVersions for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_delete_content_versions_6(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_delete_content_versions_6(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.macOSDmgApp/contentVersions/#{mobile_app_content_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property contentVersions for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_delete_content_versions_7(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_delete_content_versions_7(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.win32LobApp/contentVersions/#{mobile_app_content_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property contentVersions for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_delete_content_versions_8(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_delete_content_versions_8(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsAppX/contentVersions/#{mobile_app_content_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property contentVersions for deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_delete_content_versions_9(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_delete_content_versions_9(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedAndroidLobApp/contentVersions/#{mobile_app_content_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get mobileAppAssignment
  Read properties and relationships of the mobileAppAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_assignment_id` (String.t): The unique identifier of mobileAppAssignment
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_assignments(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_assignments(connection, mobile_app_id, mobile_app_assignment_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedMobileLobApp/assignments/#{mobile_app_assignment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get mobileAppAssignment
  Read properties and relationships of the mobileAppAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_assignment_id` (String.t): The unique identifier of mobileAppAssignment
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_assignments_0(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_assignments_0(connection, mobile_app_id, mobile_app_assignment_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.microsoftStoreForBusinessApp/assignments/#{mobile_app_assignment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get mobileAppAssignment
  Read properties and relationships of the mobileAppAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_assignment_id` (String.t): The unique identifier of mobileAppAssignment
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_assignments_1(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_assignments_1(connection, mobile_app_id, mobile_app_assignment_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsUniversalAppX/assignments/#{mobile_app_assignment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get mobileAppAssignment
  Read properties and relationships of the mobileAppAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_assignment_id` (String.t): The unique identifier of mobileAppAssignment
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_assignments_10(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_assignments_10(connection, mobile_app_id, mobile_app_assignment_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsAppX/assignments/#{mobile_app_assignment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get mobileAppAssignment
  Read properties and relationships of the mobileAppAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_assignment_id` (String.t): The unique identifier of mobileAppAssignment
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_assignments_11(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_assignments_11(connection, mobile_app_id, mobile_app_assignment_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.macOSDmgApp/assignments/#{mobile_app_assignment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get mobileAppAssignment
  Read properties and relationships of the mobileAppAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_assignment_id` (String.t): The unique identifier of mobileAppAssignment
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_assignments_12(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_assignments_12(connection, mobile_app_id, mobile_app_assignment_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.iosStoreApp/assignments/#{mobile_app_assignment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get mobileAppAssignment
  Read properties and relationships of the mobileAppAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_assignment_id` (String.t): The unique identifier of mobileAppAssignment
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_assignments_13(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_assignments_13(connection, mobile_app_id, mobile_app_assignment_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.androidStoreApp/assignments/#{mobile_app_assignment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get mobileAppAssignment
  Read properties and relationships of the mobileAppAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_assignment_id` (String.t): The unique identifier of mobileAppAssignment
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_assignments_14(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_assignments_14(connection, mobile_app_id, mobile_app_assignment_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.win32LobApp/assignments/#{mobile_app_assignment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get mobileAppAssignment
  Read properties and relationships of the mobileAppAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_assignment_id` (String.t): The unique identifier of mobileAppAssignment
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_assignments_15(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_assignments_15(connection, mobile_app_id, mobile_app_assignment_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.iosLobApp/assignments/#{mobile_app_assignment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get mobileAppAssignment
  Read properties and relationships of the mobileAppAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_assignment_id` (String.t): The unique identifier of mobileAppAssignment
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_assignments_2(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_assignments_2(connection, mobile_app_id, mobile_app_assignment_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.androidLobApp/assignments/#{mobile_app_assignment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get mobileAppAssignment
  Read properties and relationships of the mobileAppAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_assignment_id` (String.t): The unique identifier of mobileAppAssignment
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_assignments_3(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_assignments_3(connection, mobile_app_id, mobile_app_assignment_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/assignments/#{mobile_app_assignment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get mobileAppAssignment
  Read properties and relationships of the mobileAppAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_assignment_id` (String.t): The unique identifier of mobileAppAssignment
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_assignments_4(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_assignments_4(connection, mobile_app_id, mobile_app_assignment_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsWebApp/assignments/#{mobile_app_assignment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get mobileAppAssignment
  Read properties and relationships of the mobileAppAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_assignment_id` (String.t): The unique identifier of mobileAppAssignment
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_assignments_5(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_assignments_5(connection, mobile_app_id, mobile_app_assignment_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsMobileMSI/assignments/#{mobile_app_assignment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get mobileAppAssignment
  Read properties and relationships of the mobileAppAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_assignment_id` (String.t): The unique identifier of mobileAppAssignment
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_assignments_6(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_assignments_6(connection, mobile_app_id, mobile_app_assignment_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedIOSLobApp/assignments/#{mobile_app_assignment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get mobileAppAssignment
  Read properties and relationships of the mobileAppAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_assignment_id` (String.t): The unique identifier of mobileAppAssignment
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_assignments_7(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_assignments_7(connection, mobile_app_id, mobile_app_assignment_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.iosVppApp/assignments/#{mobile_app_assignment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get mobileAppAssignment
  Read properties and relationships of the mobileAppAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_assignment_id` (String.t): The unique identifier of mobileAppAssignment
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_assignments_8(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_assignments_8(connection, mobile_app_id, mobile_app_assignment_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedAndroidLobApp/assignments/#{mobile_app_assignment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get mobileAppAssignment
  Read properties and relationships of the mobileAppAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_assignment_id` (String.t): The unique identifier of mobileAppAssignment
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_assignments_9(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_assignments_9(connection, mobile_app_id, mobile_app_assignment_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.macOSLobApp/assignments/#{mobile_app_assignment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get categories from deviceAppManagement
  The list of categories for this app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_category_id` (String.t): The unique identifier of mobileAppCategory
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategory.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_categories(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategory.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_categories(connection, mobile_app_id, mobile_app_category_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsWebApp/categories/#{mobile_app_category_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppCategory},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get categories from deviceAppManagement
  The list of categories for this app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_category_id` (String.t): The unique identifier of mobileAppCategory
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategory.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_categories_0(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategory.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_categories_0(connection, mobile_app_id, mobile_app_category_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.androidStoreApp/categories/#{mobile_app_category_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppCategory},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get categories from deviceAppManagement
  The list of categories for this app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_category_id` (String.t): The unique identifier of mobileAppCategory
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategory.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_categories_1(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategory.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_categories_1(connection, mobile_app_id, mobile_app_category_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.macOSLobApp/categories/#{mobile_app_category_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppCategory},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get categories from deviceAppManagement
  The list of categories for this app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_category_id` (String.t): The unique identifier of mobileAppCategory
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategory.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_categories_10(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategory.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_categories_10(connection, mobile_app_id, mobile_app_category_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.macOSDmgApp/categories/#{mobile_app_category_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppCategory},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get categories from deviceAppManagement
  The list of categories for this app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_category_id` (String.t): The unique identifier of mobileAppCategory
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategory.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_categories_11(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategory.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_categories_11(connection, mobile_app_id, mobile_app_category_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsMobileMSI/categories/#{mobile_app_category_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppCategory},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get categories from deviceAppManagement
  The list of categories for this app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_category_id` (String.t): The unique identifier of mobileAppCategory
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategory.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_categories_12(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategory.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_categories_12(connection, mobile_app_id, mobile_app_category_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedMobileLobApp/categories/#{mobile_app_category_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppCategory},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get categories from deviceAppManagement
  The list of categories for this app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_category_id` (String.t): The unique identifier of mobileAppCategory
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategory.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_categories_13(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategory.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_categories_13(connection, mobile_app_id, mobile_app_category_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.iosStoreApp/categories/#{mobile_app_category_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppCategory},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get categories from deviceAppManagement
  The list of categories for this app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_category_id` (String.t): The unique identifier of mobileAppCategory
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategory.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_categories_14(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategory.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_categories_14(connection, mobile_app_id, mobile_app_category_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.win32LobApp/categories/#{mobile_app_category_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppCategory},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get categories from deviceAppManagement
  The list of categories for this app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_category_id` (String.t): The unique identifier of mobileAppCategory
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategory.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_categories_15(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategory.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_categories_15(connection, mobile_app_id, mobile_app_category_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/categories/#{mobile_app_category_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppCategory},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get categories from deviceAppManagement
  The list of categories for this app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_category_id` (String.t): The unique identifier of mobileAppCategory
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategory.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_categories_2(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategory.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_categories_2(connection, mobile_app_id, mobile_app_category_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsUniversalAppX/categories/#{mobile_app_category_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppCategory},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get categories from deviceAppManagement
  The list of categories for this app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_category_id` (String.t): The unique identifier of mobileAppCategory
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategory.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_categories_3(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategory.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_categories_3(connection, mobile_app_id, mobile_app_category_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.microsoftStoreForBusinessApp/categories/#{mobile_app_category_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppCategory},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get categories from deviceAppManagement
  The list of categories for this app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_category_id` (String.t): The unique identifier of mobileAppCategory
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategory.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_categories_4(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategory.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_categories_4(connection, mobile_app_id, mobile_app_category_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.iosLobApp/categories/#{mobile_app_category_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppCategory},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get categories from deviceAppManagement
  The list of categories for this app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_category_id` (String.t): The unique identifier of mobileAppCategory
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategory.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_categories_5(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategory.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_categories_5(connection, mobile_app_id, mobile_app_category_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.androidLobApp/categories/#{mobile_app_category_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppCategory},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get categories from deviceAppManagement
  The list of categories for this app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_category_id` (String.t): The unique identifier of mobileAppCategory
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategory.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_categories_6(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategory.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_categories_6(connection, mobile_app_id, mobile_app_category_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedIOSLobApp/categories/#{mobile_app_category_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppCategory},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get categories from deviceAppManagement
  The list of categories for this app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_category_id` (String.t): The unique identifier of mobileAppCategory
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategory.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_categories_7(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategory.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_categories_7(connection, mobile_app_id, mobile_app_category_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsAppX/categories/#{mobile_app_category_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppCategory},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get categories from deviceAppManagement
  The list of categories for this app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_category_id` (String.t): The unique identifier of mobileAppCategory
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategory.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_categories_8(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategory.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_categories_8(connection, mobile_app_id, mobile_app_category_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedAndroidLobApp/categories/#{mobile_app_category_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppCategory},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get categories from deviceAppManagement
  The list of categories for this app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_category_id` (String.t): The unique identifier of mobileAppCategory
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategory.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_categories_9(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategory.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_categories_9(connection, mobile_app_id, mobile_app_category_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.iosVppApp/categories/#{mobile_app_category_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppCategory},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get committedContainedApps from deviceAppManagement
  The collection of contained apps in the committed mobileAppContent of a windowsUniversalAppX app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_contained_app_id` (String.t): The unique identifier of mobileContainedApp
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_committed_contained_apps(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_committed_contained_apps(connection, mobile_app_id, mobile_contained_app_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsUniversalAppX/committedContainedApps/#{mobile_contained_app_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get contentVersions from deviceAppManagement
  The list of content versions for this app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_content_versions(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_content_versions(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsUniversalAppX/contentVersions/#{mobile_app_content_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get contentVersions from deviceAppManagement
  The list of content versions for this app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_content_versions_0(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_content_versions_0(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.iosLobApp/contentVersions/#{mobile_app_content_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get contentVersions from deviceAppManagement
  The list of content versions for this app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_content_versions_1(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_content_versions_1(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedIOSLobApp/contentVersions/#{mobile_app_content_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get contentVersions from deviceAppManagement
  The list of content versions for this app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_content_versions_2(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_content_versions_2(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedMobileLobApp/contentVersions/#{mobile_app_content_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get contentVersions from deviceAppManagement
  The list of content versions for this app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_content_versions_3(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_content_versions_3(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsMobileMSI/contentVersions/#{mobile_app_content_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get contentVersions from deviceAppManagement
  The list of content versions for this app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_content_versions_4(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_content_versions_4(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.macOSLobApp/contentVersions/#{mobile_app_content_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get contentVersions from deviceAppManagement
  The list of content versions for this app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_content_versions_5(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_content_versions_5(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.androidLobApp/contentVersions/#{mobile_app_content_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get contentVersions from deviceAppManagement
  The list of content versions for this app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_content_versions_6(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_content_versions_6(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.macOSDmgApp/contentVersions/#{mobile_app_content_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get contentVersions from deviceAppManagement
  The list of content versions for this app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_content_versions_7(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_content_versions_7(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.win32LobApp/contentVersions/#{mobile_app_content_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get contentVersions from deviceAppManagement
  The list of content versions for this app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_content_versions_8(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_content_versions_8(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsAppX/contentVersions/#{mobile_app_content_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get contentVersions from deviceAppManagement
  The list of content versions for this app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_content_versions_9(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_content_versions_9(connection, mobile_app_id, mobile_app_content_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedAndroidLobApp/contentVersions/#{mobile_app_content_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_count_as_android_lob_app3c7c(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_count_as_android_lob_app3c7c(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/graph.androidLobApp/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_count_as_android_store_app_fff5(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_count_as_android_store_app_fff5(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/graph.androidStoreApp/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_count_as_ios_lob_app_f182(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_count_as_ios_lob_app_f182(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/graph.iosLobApp/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_count_as_ios_store_app6fbc(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_count_as_ios_store_app6fbc(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/graph.iosStoreApp/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_count_as_ios_vpp_app_da96(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_count_as_ios_vpp_app_da96(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/graph.iosVppApp/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_count_as_mac_os_dmg_app_b712(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_count_as_mac_os_dmg_app_b712(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/graph.macOSDmgApp/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_count_as_mac_os_lob_app6776(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_count_as_mac_os_lob_app6776(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/graph.macOSLobApp/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_count_as_managed_android_lob_app8619(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_count_as_managed_android_lob_app8619(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/graph.managedAndroidLobApp/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_count_as_managed_ios_lob_app11b8(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_count_as_managed_ios_lob_app11b8(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/graph.managedIOSLobApp/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_count_as_managed_mobile_lob_app469d(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_count_as_managed_mobile_lob_app469d(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/graph.managedMobileLobApp/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_count_as_microsoft_store_for_business_app724e(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_count_as_microsoft_store_for_business_app724e(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/graph.microsoftStoreForBusinessApp/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_count_as_win32_lob_app513f(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_count_as_win32_lob_app513f(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/graph.win32LobApp/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_count_as_windows_app_x2550(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_count_as_windows_app_x2550(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/graph.windowsAppX/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_count_as_windows_mobile_msi5644(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_count_as_windows_mobile_msi5644(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/graph.windowsMobileMSI/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_count_as_windows_universal_app_xfe04(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_count_as_windows_universal_app_xfe04(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/graph.windowsUniversalAppX/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_count_as_windows_web_app_f73a(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_count_as_windows_web_app_f73a(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/graph.windowsWebApp/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_get_count_dcef(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_get_count_dcef(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List mobileAppAssignments
  List properties and relationships of the mobileAppAssignment objects.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignmentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_list_assignments(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignmentCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_list_assignments(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.iosStoreApp/assignments")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignmentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List mobileAppAssignments
  List properties and relationships of the mobileAppAssignment objects.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignmentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_list_assignments_0(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignmentCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_list_assignments_0(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsAppX/assignments")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignmentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List mobileAppAssignments
  List properties and relationships of the mobileAppAssignment objects.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignmentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_list_assignments_1(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignmentCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_list_assignments_1(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsWebApp/assignments")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignmentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List mobileAppAssignments
  List properties and relationships of the mobileAppAssignment objects.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignmentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_list_assignments_10(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignmentCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_list_assignments_10(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedIOSLobApp/assignments")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignmentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List mobileAppAssignments
  List properties and relationships of the mobileAppAssignment objects.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignmentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_list_assignments_11(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignmentCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_list_assignments_11(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedAndroidLobApp/assignments")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignmentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List mobileAppAssignments
  List properties and relationships of the mobileAppAssignment objects.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignmentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_list_assignments_12(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignmentCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_list_assignments_12(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/assignments")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignmentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List mobileAppAssignments
  List properties and relationships of the mobileAppAssignment objects.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignmentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_list_assignments_13(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignmentCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_list_assignments_13(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedMobileLobApp/assignments")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignmentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List mobileAppAssignments
  List properties and relationships of the mobileAppAssignment objects.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignmentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_list_assignments_14(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignmentCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_list_assignments_14(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.iosLobApp/assignments")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignmentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List mobileAppAssignments
  List properties and relationships of the mobileAppAssignment objects.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignmentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_list_assignments_15(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignmentCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_list_assignments_15(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.microsoftStoreForBusinessApp/assignments")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignmentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List mobileAppAssignments
  List properties and relationships of the mobileAppAssignment objects.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignmentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_list_assignments_2(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignmentCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_list_assignments_2(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.macOSDmgApp/assignments")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignmentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List mobileAppAssignments
  List properties and relationships of the mobileAppAssignment objects.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignmentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_list_assignments_3(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignmentCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_list_assignments_3(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsUniversalAppX/assignments")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignmentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List mobileAppAssignments
  List properties and relationships of the mobileAppAssignment objects.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignmentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_list_assignments_4(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignmentCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_list_assignments_4(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.macOSLobApp/assignments")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignmentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List mobileAppAssignments
  List properties and relationships of the mobileAppAssignment objects.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignmentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_list_assignments_5(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignmentCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_list_assignments_5(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.iosVppApp/assignments")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignmentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List mobileAppAssignments
  List properties and relationships of the mobileAppAssignment objects.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignmentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_list_assignments_6(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignmentCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_list_assignments_6(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.androidLobApp/assignments")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignmentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List mobileAppAssignments
  List properties and relationships of the mobileAppAssignment objects.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignmentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_list_assignments_7(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignmentCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_list_assignments_7(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsMobileMSI/assignments")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignmentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List mobileAppAssignments
  List properties and relationships of the mobileAppAssignment objects.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignmentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_list_assignments_8(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignmentCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_list_assignments_8(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.win32LobApp/assignments")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignmentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List mobileAppAssignments
  List properties and relationships of the mobileAppAssignment objects.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignmentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_list_assignments_9(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignmentCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_list_assignments_9(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.androidStoreApp/assignments")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignmentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get categories from deviceAppManagement
  The list of categories for this app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategoryCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_list_categories(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategoryCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_list_categories(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.androidStoreApp/categories")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppCategoryCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get categories from deviceAppManagement
  The list of categories for this app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategoryCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_list_categories_0(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategoryCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_list_categories_0(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.androidLobApp/categories")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppCategoryCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get categories from deviceAppManagement
  The list of categories for this app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategoryCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_list_categories_1(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategoryCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_list_categories_1(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsUniversalAppX/categories")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppCategoryCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get categories from deviceAppManagement
  The list of categories for this app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategoryCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_list_categories_10(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategoryCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_list_categories_10(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.iosLobApp/categories")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppCategoryCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get categories from deviceAppManagement
  The list of categories for this app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategoryCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_list_categories_11(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategoryCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_list_categories_11(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsWebApp/categories")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppCategoryCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get categories from deviceAppManagement
  The list of categories for this app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategoryCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_list_categories_12(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategoryCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_list_categories_12(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsAppX/categories")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppCategoryCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get categories from deviceAppManagement
  The list of categories for this app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategoryCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_list_categories_13(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategoryCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_list_categories_13(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.iosVppApp/categories")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppCategoryCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get categories from deviceAppManagement
  The list of categories for this app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategoryCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_list_categories_14(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategoryCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_list_categories_14(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.macOSLobApp/categories")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppCategoryCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get categories from deviceAppManagement
  The list of categories for this app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategoryCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_list_categories_15(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategoryCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_list_categories_15(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/categories")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppCategoryCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get categories from deviceAppManagement
  The list of categories for this app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategoryCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_list_categories_2(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategoryCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_list_categories_2(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.win32LobApp/categories")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppCategoryCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get categories from deviceAppManagement
  The list of categories for this app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategoryCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_list_categories_3(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategoryCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_list_categories_3(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.macOSDmgApp/categories")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppCategoryCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get categories from deviceAppManagement
  The list of categories for this app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategoryCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_list_categories_4(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategoryCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_list_categories_4(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedIOSLobApp/categories")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppCategoryCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get categories from deviceAppManagement
  The list of categories for this app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategoryCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_list_categories_5(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategoryCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_list_categories_5(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedAndroidLobApp/categories")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppCategoryCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get categories from deviceAppManagement
  The list of categories for this app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategoryCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_list_categories_6(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategoryCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_list_categories_6(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsMobileMSI/categories")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppCategoryCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get categories from deviceAppManagement
  The list of categories for this app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategoryCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_list_categories_7(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategoryCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_list_categories_7(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.microsoftStoreForBusinessApp/categories")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppCategoryCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get categories from deviceAppManagement
  The list of categories for this app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategoryCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_list_categories_8(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategoryCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_list_categories_8(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedMobileLobApp/categories")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppCategoryCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get categories from deviceAppManagement
  The list of categories for this app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategoryCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_list_categories_9(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppCategoryCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_list_categories_9(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.iosStoreApp/categories")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppCategoryCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get committedContainedApps from deviceAppManagement
  The collection of contained apps in the committed mobileAppContent of a windowsUniversalAppX app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedAppCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_list_committed_contained_apps(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedAppCollectionResponse.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_list_committed_contained_apps(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsUniversalAppX/committedContainedApps")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileContainedAppCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get contentVersions from deviceAppManagement
  The list of content versions for this app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_list_content_versions(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_list_content_versions(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedAndroidLobApp/contentVersions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get contentVersions from deviceAppManagement
  The list of content versions for this app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_list_content_versions_0(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_list_content_versions_0(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.macOSDmgApp/contentVersions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get contentVersions from deviceAppManagement
  The list of content versions for this app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_list_content_versions_1(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_list_content_versions_1(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsMobileMSI/contentVersions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get contentVersions from deviceAppManagement
  The list of content versions for this app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_list_content_versions_2(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_list_content_versions_2(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedMobileLobApp/contentVersions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get contentVersions from deviceAppManagement
  The list of content versions for this app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_list_content_versions_3(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_list_content_versions_3(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.iosLobApp/contentVersions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get contentVersions from deviceAppManagement
  The list of content versions for this app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_list_content_versions_4(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_list_content_versions_4(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedIOSLobApp/contentVersions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get contentVersions from deviceAppManagement
  The list of content versions for this app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_list_content_versions_5(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_list_content_versions_5(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsUniversalAppX/contentVersions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get contentVersions from deviceAppManagement
  The list of content versions for this app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_list_content_versions_6(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_list_content_versions_6(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.win32LobApp/contentVersions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get contentVersions from deviceAppManagement
  The list of content versions for this app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_list_content_versions_7(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_list_content_versions_7(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.androidLobApp/contentVersions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get contentVersions from deviceAppManagement
  The list of content versions for this app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_list_content_versions_8(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_list_content_versions_8(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsAppX/contentVersions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get contentVersions from deviceAppManagement
  The list of content versions for this app.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_list_content_versions_9(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContentCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_list_content_versions_9(connection, mobile_app_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.macOSLobApp/contentVersions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update mobileAppAssignment
  Update the properties of a mobileAppAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_assignment_id` (String.t): The unique identifier of mobileAppAssignment
  - `microsoft_graph_mobile_app_assignment` (MicrosoftGraphMobileAppAssignment): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_update_assignments(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_update_assignments(connection, mobile_app_id, mobile_app_assignment_id, microsoft_graph_mobile_app_assignment, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedMobileLobApp/assignments/#{mobile_app_assignment_id}")
      |> add_param(:body, :body, microsoft_graph_mobile_app_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update mobileAppAssignment
  Update the properties of a mobileAppAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_assignment_id` (String.t): The unique identifier of mobileAppAssignment
  - `microsoft_graph_mobile_app_assignment` (MicrosoftGraphMobileAppAssignment): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_update_assignments_0(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_update_assignments_0(connection, mobile_app_id, mobile_app_assignment_id, microsoft_graph_mobile_app_assignment, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.microsoftStoreForBusinessApp/assignments/#{mobile_app_assignment_id}")
      |> add_param(:body, :body, microsoft_graph_mobile_app_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update mobileAppAssignment
  Update the properties of a mobileAppAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_assignment_id` (String.t): The unique identifier of mobileAppAssignment
  - `microsoft_graph_mobile_app_assignment` (MicrosoftGraphMobileAppAssignment): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_update_assignments_1(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_update_assignments_1(connection, mobile_app_id, mobile_app_assignment_id, microsoft_graph_mobile_app_assignment, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsUniversalAppX/assignments/#{mobile_app_assignment_id}")
      |> add_param(:body, :body, microsoft_graph_mobile_app_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update mobileAppAssignment
  Update the properties of a mobileAppAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_assignment_id` (String.t): The unique identifier of mobileAppAssignment
  - `microsoft_graph_mobile_app_assignment` (MicrosoftGraphMobileAppAssignment): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_update_assignments_10(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_update_assignments_10(connection, mobile_app_id, mobile_app_assignment_id, microsoft_graph_mobile_app_assignment, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsAppX/assignments/#{mobile_app_assignment_id}")
      |> add_param(:body, :body, microsoft_graph_mobile_app_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update mobileAppAssignment
  Update the properties of a mobileAppAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_assignment_id` (String.t): The unique identifier of mobileAppAssignment
  - `microsoft_graph_mobile_app_assignment` (MicrosoftGraphMobileAppAssignment): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_update_assignments_11(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_update_assignments_11(connection, mobile_app_id, mobile_app_assignment_id, microsoft_graph_mobile_app_assignment, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.macOSDmgApp/assignments/#{mobile_app_assignment_id}")
      |> add_param(:body, :body, microsoft_graph_mobile_app_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update mobileAppAssignment
  Update the properties of a mobileAppAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_assignment_id` (String.t): The unique identifier of mobileAppAssignment
  - `microsoft_graph_mobile_app_assignment` (MicrosoftGraphMobileAppAssignment): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_update_assignments_12(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_update_assignments_12(connection, mobile_app_id, mobile_app_assignment_id, microsoft_graph_mobile_app_assignment, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.iosStoreApp/assignments/#{mobile_app_assignment_id}")
      |> add_param(:body, :body, microsoft_graph_mobile_app_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update mobileAppAssignment
  Update the properties of a mobileAppAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_assignment_id` (String.t): The unique identifier of mobileAppAssignment
  - `microsoft_graph_mobile_app_assignment` (MicrosoftGraphMobileAppAssignment): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_update_assignments_13(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_update_assignments_13(connection, mobile_app_id, mobile_app_assignment_id, microsoft_graph_mobile_app_assignment, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.androidStoreApp/assignments/#{mobile_app_assignment_id}")
      |> add_param(:body, :body, microsoft_graph_mobile_app_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update mobileAppAssignment
  Update the properties of a mobileAppAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_assignment_id` (String.t): The unique identifier of mobileAppAssignment
  - `microsoft_graph_mobile_app_assignment` (MicrosoftGraphMobileAppAssignment): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_update_assignments_14(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_update_assignments_14(connection, mobile_app_id, mobile_app_assignment_id, microsoft_graph_mobile_app_assignment, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.win32LobApp/assignments/#{mobile_app_assignment_id}")
      |> add_param(:body, :body, microsoft_graph_mobile_app_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update mobileAppAssignment
  Update the properties of a mobileAppAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_assignment_id` (String.t): The unique identifier of mobileAppAssignment
  - `microsoft_graph_mobile_app_assignment` (MicrosoftGraphMobileAppAssignment): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_update_assignments_15(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_update_assignments_15(connection, mobile_app_id, mobile_app_assignment_id, microsoft_graph_mobile_app_assignment, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.iosLobApp/assignments/#{mobile_app_assignment_id}")
      |> add_param(:body, :body, microsoft_graph_mobile_app_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update mobileAppAssignment
  Update the properties of a mobileAppAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_assignment_id` (String.t): The unique identifier of mobileAppAssignment
  - `microsoft_graph_mobile_app_assignment` (MicrosoftGraphMobileAppAssignment): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_update_assignments_2(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_update_assignments_2(connection, mobile_app_id, mobile_app_assignment_id, microsoft_graph_mobile_app_assignment, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.androidLobApp/assignments/#{mobile_app_assignment_id}")
      |> add_param(:body, :body, microsoft_graph_mobile_app_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update mobileAppAssignment
  Update the properties of a mobileAppAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_assignment_id` (String.t): The unique identifier of mobileAppAssignment
  - `microsoft_graph_mobile_app_assignment` (MicrosoftGraphMobileAppAssignment): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_update_assignments_3(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_update_assignments_3(connection, mobile_app_id, mobile_app_assignment_id, microsoft_graph_mobile_app_assignment, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/assignments/#{mobile_app_assignment_id}")
      |> add_param(:body, :body, microsoft_graph_mobile_app_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update mobileAppAssignment
  Update the properties of a mobileAppAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_assignment_id` (String.t): The unique identifier of mobileAppAssignment
  - `microsoft_graph_mobile_app_assignment` (MicrosoftGraphMobileAppAssignment): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_update_assignments_4(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_update_assignments_4(connection, mobile_app_id, mobile_app_assignment_id, microsoft_graph_mobile_app_assignment, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsWebApp/assignments/#{mobile_app_assignment_id}")
      |> add_param(:body, :body, microsoft_graph_mobile_app_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update mobileAppAssignment
  Update the properties of a mobileAppAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_assignment_id` (String.t): The unique identifier of mobileAppAssignment
  - `microsoft_graph_mobile_app_assignment` (MicrosoftGraphMobileAppAssignment): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_update_assignments_5(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_update_assignments_5(connection, mobile_app_id, mobile_app_assignment_id, microsoft_graph_mobile_app_assignment, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsMobileMSI/assignments/#{mobile_app_assignment_id}")
      |> add_param(:body, :body, microsoft_graph_mobile_app_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update mobileAppAssignment
  Update the properties of a mobileAppAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_assignment_id` (String.t): The unique identifier of mobileAppAssignment
  - `microsoft_graph_mobile_app_assignment` (MicrosoftGraphMobileAppAssignment): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_update_assignments_6(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_update_assignments_6(connection, mobile_app_id, mobile_app_assignment_id, microsoft_graph_mobile_app_assignment, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedIOSLobApp/assignments/#{mobile_app_assignment_id}")
      |> add_param(:body, :body, microsoft_graph_mobile_app_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update mobileAppAssignment
  Update the properties of a mobileAppAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_assignment_id` (String.t): The unique identifier of mobileAppAssignment
  - `microsoft_graph_mobile_app_assignment` (MicrosoftGraphMobileAppAssignment): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_update_assignments_7(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_update_assignments_7(connection, mobile_app_id, mobile_app_assignment_id, microsoft_graph_mobile_app_assignment, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.iosVppApp/assignments/#{mobile_app_assignment_id}")
      |> add_param(:body, :body, microsoft_graph_mobile_app_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update mobileAppAssignment
  Update the properties of a mobileAppAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_assignment_id` (String.t): The unique identifier of mobileAppAssignment
  - `microsoft_graph_mobile_app_assignment` (MicrosoftGraphMobileAppAssignment): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_update_assignments_8(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_update_assignments_8(connection, mobile_app_id, mobile_app_assignment_id, microsoft_graph_mobile_app_assignment, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedAndroidLobApp/assignments/#{mobile_app_assignment_id}")
      |> add_param(:body, :body, microsoft_graph_mobile_app_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update mobileAppAssignment
  Update the properties of a mobileAppAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_assignment_id` (String.t): The unique identifier of mobileAppAssignment
  - `microsoft_graph_mobile_app_assignment` (MicrosoftGraphMobileAppAssignment): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_update_assignments_9(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_update_assignments_9(connection, mobile_app_id, mobile_app_assignment_id, microsoft_graph_mobile_app_assignment, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.macOSLobApp/assignments/#{mobile_app_assignment_id}")
      |> add_param(:body, :body, microsoft_graph_mobile_app_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property committedContainedApps in deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_contained_app_id` (String.t): The unique identifier of mobileContainedApp
  - `microsoft_graph_mobile_contained_app` (MicrosoftGraphMobileContainedApp): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_update_committed_contained_apps(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_update_committed_contained_apps(connection, mobile_app_id, mobile_contained_app_id, microsoft_graph_mobile_contained_app, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsUniversalAppX/committedContainedApps/#{mobile_contained_app_id}")
      |> add_param(:body, :body, microsoft_graph_mobile_contained_app)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileContainedApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property contentVersions in deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `microsoft_graph_mobile_app_content` (MicrosoftGraphMobileAppContent): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_update_content_versions(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_update_content_versions(connection, mobile_app_id, mobile_app_content_id, microsoft_graph_mobile_app_content, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsUniversalAppX/contentVersions/#{mobile_app_content_id}")
      |> add_param(:body, :body, microsoft_graph_mobile_app_content)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property contentVersions in deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `microsoft_graph_mobile_app_content` (MicrosoftGraphMobileAppContent): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_update_content_versions_0(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_update_content_versions_0(connection, mobile_app_id, mobile_app_content_id, microsoft_graph_mobile_app_content, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.iosLobApp/contentVersions/#{mobile_app_content_id}")
      |> add_param(:body, :body, microsoft_graph_mobile_app_content)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property contentVersions in deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `microsoft_graph_mobile_app_content` (MicrosoftGraphMobileAppContent): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_update_content_versions_1(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_update_content_versions_1(connection, mobile_app_id, mobile_app_content_id, microsoft_graph_mobile_app_content, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedIOSLobApp/contentVersions/#{mobile_app_content_id}")
      |> add_param(:body, :body, microsoft_graph_mobile_app_content)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property contentVersions in deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `microsoft_graph_mobile_app_content` (MicrosoftGraphMobileAppContent): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_update_content_versions_2(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_update_content_versions_2(connection, mobile_app_id, mobile_app_content_id, microsoft_graph_mobile_app_content, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedMobileLobApp/contentVersions/#{mobile_app_content_id}")
      |> add_param(:body, :body, microsoft_graph_mobile_app_content)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property contentVersions in deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `microsoft_graph_mobile_app_content` (MicrosoftGraphMobileAppContent): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_update_content_versions_3(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_update_content_versions_3(connection, mobile_app_id, mobile_app_content_id, microsoft_graph_mobile_app_content, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsMobileMSI/contentVersions/#{mobile_app_content_id}")
      |> add_param(:body, :body, microsoft_graph_mobile_app_content)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property contentVersions in deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `microsoft_graph_mobile_app_content` (MicrosoftGraphMobileAppContent): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_update_content_versions_4(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_update_content_versions_4(connection, mobile_app_id, mobile_app_content_id, microsoft_graph_mobile_app_content, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.macOSLobApp/contentVersions/#{mobile_app_content_id}")
      |> add_param(:body, :body, microsoft_graph_mobile_app_content)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property contentVersions in deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `microsoft_graph_mobile_app_content` (MicrosoftGraphMobileAppContent): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_update_content_versions_5(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_update_content_versions_5(connection, mobile_app_id, mobile_app_content_id, microsoft_graph_mobile_app_content, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.androidLobApp/contentVersions/#{mobile_app_content_id}")
      |> add_param(:body, :body, microsoft_graph_mobile_app_content)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property contentVersions in deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `microsoft_graph_mobile_app_content` (MicrosoftGraphMobileAppContent): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_update_content_versions_6(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_update_content_versions_6(connection, mobile_app_id, mobile_app_content_id, microsoft_graph_mobile_app_content, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.macOSDmgApp/contentVersions/#{mobile_app_content_id}")
      |> add_param(:body, :body, microsoft_graph_mobile_app_content)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property contentVersions in deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `microsoft_graph_mobile_app_content` (MicrosoftGraphMobileAppContent): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_update_content_versions_7(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_update_content_versions_7(connection, mobile_app_id, mobile_app_content_id, microsoft_graph_mobile_app_content, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.win32LobApp/contentVersions/#{mobile_app_content_id}")
      |> add_param(:body, :body, microsoft_graph_mobile_app_content)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property contentVersions in deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `microsoft_graph_mobile_app_content` (MicrosoftGraphMobileAppContent): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_update_content_versions_8(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_update_content_versions_8(connection, mobile_app_id, mobile_app_content_id, microsoft_graph_mobile_app_content, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.windowsAppX/contentVersions/#{mobile_app_content_id}")
      |> add_param(:body, :body, microsoft_graph_mobile_app_content)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property contentVersions in deviceAppManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `mobile_app_content_id` (String.t): The unique identifier of mobileAppContent
  - `microsoft_graph_mobile_app_content` (MicrosoftGraphMobileAppContent): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_mobile_apps_update_content_versions_9(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileAppContent.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def device_app_management_mobile_apps_update_content_versions_9(connection, mobile_app_id, mobile_app_content_id, microsoft_graph_mobile_app_content, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}/graph.managedAndroidLobApp/contentVersions/#{mobile_app_content_id}")
      |> add_param(:body, :body, microsoft_graph_mobile_app_content)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileAppContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update managedIOSLobApp
  Update the properties of a managedIOSLobApp object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `mobile_app_id` (String.t): The unique identifier of mobileApp
  - `microsoft_graph_mobile_app` (MicrosoftGraphMobileApp): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphMobileApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_app_management_update_mobile_apps(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphMobileApp.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphMobileApp.t} | {:error, Tesla.Env.t}
  def device_app_management_update_mobile_apps(connection, mobile_app_id, microsoft_graph_mobile_app, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceAppManagement/mobileApps/#{mobile_app_id}")
      |> add_param(:body, :body, microsoft_graph_mobile_app)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphMobileApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
