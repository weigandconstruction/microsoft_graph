# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.RoleManagementFunctions do
  @moduledoc """
  API calls for all endpoints tagged `RoleManagementFunctions`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Invoke function filterByCurrentUser

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `on` (MicrosoftGraphRoleAssignmentScheduleInstanceFilterByCurrentUserOptions): Usage: on='{on}'
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$orderby"` ([String.t]): Order items by property values

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfUnifiedRoleAssignmentScheduleInstance.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_role_assignment_schedule_instances_filter_by_current_user(
          Tesla.Env.client(),
          MicrosoftGraph.Model.MicrosoftGraphRoleAssignmentScheduleInstanceFilterByCurrentUserOptions.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.CollectionOfUnifiedRoleAssignmentScheduleInstance.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def role_management_directory_role_assignment_schedule_instances_filter_by_current_user(
        connection,
        on,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$select" => :query,
      :"$orderby" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/roleManagement/directory/roleAssignmentScheduleInstances/filterByCurrentUser(on&#x3D;&#39;#{on}&#39;)"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfUnifiedRoleAssignmentScheduleInstance},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function filterByCurrentUser

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `on` (MicrosoftGraphRoleAssignmentScheduleRequestFilterByCurrentUserOptions): Usage: on='{on}'
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$orderby"` ([String.t]): Order items by property values

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfUnifiedRoleAssignmentScheduleRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_role_assignment_schedule_requests_filter_by_current_user(
          Tesla.Env.client(),
          MicrosoftGraph.Model.MicrosoftGraphRoleAssignmentScheduleRequestFilterByCurrentUserOptions.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.CollectionOfUnifiedRoleAssignmentScheduleRequest.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def role_management_directory_role_assignment_schedule_requests_filter_by_current_user(
        connection,
        on,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$select" => :query,
      :"$orderby" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/roleManagement/directory/roleAssignmentScheduleRequests/filterByCurrentUser(on&#x3D;&#39;#{on}&#39;)"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfUnifiedRoleAssignmentScheduleRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function filterByCurrentUser

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `on` (MicrosoftGraphRoleAssignmentScheduleFilterByCurrentUserOptions): Usage: on='{on}'
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$orderby"` ([String.t]): Order items by property values

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfUnifiedRoleAssignmentSchedule.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_role_assignment_schedules_filter_by_current_user(
          Tesla.Env.client(),
          MicrosoftGraph.Model.MicrosoftGraphRoleAssignmentScheduleFilterByCurrentUserOptions.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.CollectionOfUnifiedRoleAssignmentSchedule.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def role_management_directory_role_assignment_schedules_filter_by_current_user(
        connection,
        on,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$select" => :query,
      :"$orderby" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/roleManagement/directory/roleAssignmentSchedules/filterByCurrentUser(on&#x3D;&#39;#{on}&#39;)"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfUnifiedRoleAssignmentSchedule},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function filterByCurrentUser

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `on` (MicrosoftGraphRoleEligibilityScheduleInstanceFilterByCurrentUserOptions): Usage: on='{on}'
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$orderby"` ([String.t]): Order items by property values

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfUnifiedRoleEligibilityScheduleInstance.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_role_eligibility_schedule_instances_filter_by_current_user(
          Tesla.Env.client(),
          MicrosoftGraph.Model.MicrosoftGraphRoleEligibilityScheduleInstanceFilterByCurrentUserOptions.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.CollectionOfUnifiedRoleEligibilityScheduleInstance.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def role_management_directory_role_eligibility_schedule_instances_filter_by_current_user(
        connection,
        on,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$select" => :query,
      :"$orderby" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/roleManagement/directory/roleEligibilityScheduleInstances/filterByCurrentUser(on&#x3D;&#39;#{on}&#39;)"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfUnifiedRoleEligibilityScheduleInstance},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function filterByCurrentUser

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `on` (MicrosoftGraphRoleEligibilityScheduleRequestFilterByCurrentUserOptions): Usage: on='{on}'
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$orderby"` ([String.t]): Order items by property values

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfUnifiedRoleEligibilityScheduleRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_role_eligibility_schedule_requests_filter_by_current_user(
          Tesla.Env.client(),
          MicrosoftGraph.Model.MicrosoftGraphRoleEligibilityScheduleRequestFilterByCurrentUserOptions.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.CollectionOfUnifiedRoleEligibilityScheduleRequest.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def role_management_directory_role_eligibility_schedule_requests_filter_by_current_user(
        connection,
        on,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$select" => :query,
      :"$orderby" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/roleManagement/directory/roleEligibilityScheduleRequests/filterByCurrentUser(on&#x3D;&#39;#{on}&#39;)"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfUnifiedRoleEligibilityScheduleRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function filterByCurrentUser

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `on` (MicrosoftGraphRoleEligibilityScheduleFilterByCurrentUserOptions): Usage: on='{on}'
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$orderby"` ([String.t]): Order items by property values

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfUnifiedRoleEligibilitySchedule.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_directory_role_eligibility_schedules_filter_by_current_user(
          Tesla.Env.client(),
          MicrosoftGraph.Model.MicrosoftGraphRoleEligibilityScheduleFilterByCurrentUserOptions.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.CollectionOfUnifiedRoleEligibilitySchedule.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def role_management_directory_role_eligibility_schedules_filter_by_current_user(
        connection,
        on,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$select" => :query,
      :"$orderby" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/roleManagement/directory/roleEligibilitySchedules/filterByCurrentUser(on&#x3D;&#39;#{on}&#39;)"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfUnifiedRoleEligibilitySchedule},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function filterByCurrentUser

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `on` (MicrosoftGraphRoleAssignmentScheduleInstanceFilterByCurrentUserOptions): Usage: on='{on}'
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$orderby"` ([String.t]): Order items by property values

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfUnifiedRoleAssignmentScheduleInstance.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_role_assignment_schedule_instances_filter_by_current_user(
          Tesla.Env.client(),
          MicrosoftGraph.Model.MicrosoftGraphRoleAssignmentScheduleInstanceFilterByCurrentUserOptions.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.CollectionOfUnifiedRoleAssignmentScheduleInstance.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def role_management_entitlement_management_role_assignment_schedule_instances_filter_by_current_user(
        connection,
        on,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$select" => :query,
      :"$orderby" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/roleManagement/entitlementManagement/roleAssignmentScheduleInstances/filterByCurrentUser(on&#x3D;&#39;#{on}&#39;)"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfUnifiedRoleAssignmentScheduleInstance},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function filterByCurrentUser

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `on` (MicrosoftGraphRoleAssignmentScheduleRequestFilterByCurrentUserOptions): Usage: on='{on}'
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$orderby"` ([String.t]): Order items by property values

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfUnifiedRoleAssignmentScheduleRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_role_assignment_schedule_requests_filter_by_current_user(
          Tesla.Env.client(),
          MicrosoftGraph.Model.MicrosoftGraphRoleAssignmentScheduleRequestFilterByCurrentUserOptions.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.CollectionOfUnifiedRoleAssignmentScheduleRequest.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def role_management_entitlement_management_role_assignment_schedule_requests_filter_by_current_user(
        connection,
        on,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$select" => :query,
      :"$orderby" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/roleManagement/entitlementManagement/roleAssignmentScheduleRequests/filterByCurrentUser(on&#x3D;&#39;#{on}&#39;)"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfUnifiedRoleAssignmentScheduleRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function filterByCurrentUser

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `on` (MicrosoftGraphRoleAssignmentScheduleFilterByCurrentUserOptions): Usage: on='{on}'
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$orderby"` ([String.t]): Order items by property values

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfUnifiedRoleAssignmentSchedule.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_role_assignment_schedules_filter_by_current_user(
          Tesla.Env.client(),
          MicrosoftGraph.Model.MicrosoftGraphRoleAssignmentScheduleFilterByCurrentUserOptions.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.CollectionOfUnifiedRoleAssignmentSchedule.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def role_management_entitlement_management_role_assignment_schedules_filter_by_current_user(
        connection,
        on,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$select" => :query,
      :"$orderby" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/roleManagement/entitlementManagement/roleAssignmentSchedules/filterByCurrentUser(on&#x3D;&#39;#{on}&#39;)"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfUnifiedRoleAssignmentSchedule},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function filterByCurrentUser

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `on` (MicrosoftGraphRoleEligibilityScheduleInstanceFilterByCurrentUserOptions): Usage: on='{on}'
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$orderby"` ([String.t]): Order items by property values

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfUnifiedRoleEligibilityScheduleInstance.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_role_eligibility_schedule_instances_filter_by_current_user(
          Tesla.Env.client(),
          MicrosoftGraph.Model.MicrosoftGraphRoleEligibilityScheduleInstanceFilterByCurrentUserOptions.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.CollectionOfUnifiedRoleEligibilityScheduleInstance.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def role_management_entitlement_management_role_eligibility_schedule_instances_filter_by_current_user(
        connection,
        on,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$select" => :query,
      :"$orderby" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/roleManagement/entitlementManagement/roleEligibilityScheduleInstances/filterByCurrentUser(on&#x3D;&#39;#{on}&#39;)"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfUnifiedRoleEligibilityScheduleInstance},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function filterByCurrentUser

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `on` (MicrosoftGraphRoleEligibilityScheduleRequestFilterByCurrentUserOptions): Usage: on='{on}'
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$orderby"` ([String.t]): Order items by property values

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfUnifiedRoleEligibilityScheduleRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_role_eligibility_schedule_requests_filter_by_current_user(
          Tesla.Env.client(),
          MicrosoftGraph.Model.MicrosoftGraphRoleEligibilityScheduleRequestFilterByCurrentUserOptions.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.CollectionOfUnifiedRoleEligibilityScheduleRequest.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def role_management_entitlement_management_role_eligibility_schedule_requests_filter_by_current_user(
        connection,
        on,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$select" => :query,
      :"$orderby" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/roleManagement/entitlementManagement/roleEligibilityScheduleRequests/filterByCurrentUser(on&#x3D;&#39;#{on}&#39;)"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfUnifiedRoleEligibilityScheduleRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke function filterByCurrentUser

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `on` (MicrosoftGraphRoleEligibilityScheduleFilterByCurrentUserOptions): Usage: on='{on}'
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$orderby"` ([String.t]): Order items by property values

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfUnifiedRoleEligibilitySchedule.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec role_management_entitlement_management_role_eligibility_schedules_filter_by_current_user(
          Tesla.Env.client(),
          MicrosoftGraph.Model.MicrosoftGraphRoleEligibilityScheduleFilterByCurrentUserOptions.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.CollectionOfUnifiedRoleEligibilitySchedule.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def role_management_entitlement_management_role_eligibility_schedules_filter_by_current_user(
        connection,
        on,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$select" => :query,
      :"$orderby" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/roleManagement/entitlementManagement/roleEligibilitySchedules/filterByCurrentUser(on&#x3D;&#39;#{on}&#39;)"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfUnifiedRoleEligibilitySchedule},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
