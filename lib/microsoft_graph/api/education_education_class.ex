# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.EducationEducationClass do
  @moduledoc """
  API calls for all endpoints tagged `EducationEducationClass`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_assignment_categories_get_count8570(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_assignment_categories_get_count8570(connection, education_class_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/education/classes/#{education_class_id}/assignmentCategories/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `education_assignment_id` (String.t): The unique identifier of educationAssignment
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_assignments_categories_get_count639a(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_assignments_categories_get_count639a(connection, education_class_id, education_assignment_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/education/classes/#{education_class_id}/assignments/#{education_assignment_id}/categories/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create educationCategories
  Add one or more existing educationCategory objects to the specified  educationAssignment. Only teachers can perform this operation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `education_assignment_id` (String.t): The unique identifier of educationAssignment
  - `microsoft_graph_education_category` (MicrosoftGraphEducationCategory): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEducationCategory.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_assignments_create_categories(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphEducationCategory.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphEducationCategory.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_assignments_create_categories(connection, education_class_id, education_assignment_id, microsoft_graph_education_category, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/education/classes/#{education_class_id}/assignments/#{education_assignment_id}/categories")
      |> add_param(:body, :body, microsoft_graph_education_category)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEducationCategory},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create educationCategories
  Add one or more existing educationCategory objects to the specified  educationAssignment. Only teachers can perform this operation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `education_assignment_id` (String.t): The unique identifier of educationAssignment
  - `request_body` (%{optional(String.t) => map()}): New navigation property ref value
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_assignments_create_ref_categories(Tesla.Env.client, String.t, String.t, %{optional(String.t) => Map.t}, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_assignments_create_ref_categories(connection, education_class_id, education_assignment_id, request_body, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/education/classes/#{education_class_id}/assignments/#{education_assignment_id}/categories/$ref")
      |> add_param(:body, :body, request_body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create educationAssignmentResource
  Create an assignment resource. Only teachers can perform this operation. You can create the following types of assignment resources: Every resource has an @odata.type property to indicate which type of resource is being created. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `education_assignment_id` (String.t): The unique identifier of educationAssignment
  - `microsoft_graph_education_assignment_resource` (MicrosoftGraphEducationAssignmentResource): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEducationAssignmentResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_assignments_create_resources(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphEducationAssignmentResource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphEducationAssignmentResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_assignments_create_resources(connection, education_class_id, education_assignment_id, microsoft_graph_education_assignment_resource, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/education/classes/#{education_class_id}/assignments/#{education_assignment_id}/resources")
      |> add_param(:body, :body, microsoft_graph_education_assignment_resource)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEducationAssignmentResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to submissions for education

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `education_assignment_id` (String.t): The unique identifier of educationAssignment
  - `microsoft_graph_education_submission` (MicrosoftGraphEducationSubmission): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEducationSubmission.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_assignments_create_submissions(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphEducationSubmission.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphEducationSubmission.t} | {:error, Tesla.Env.t}
  def education_classes_assignments_create_submissions(connection, education_class_id, education_assignment_id, microsoft_graph_education_submission, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/education/classes/#{education_class_id}/assignments/#{education_assignment_id}/submissions")
      |> add_param(:body, :body, microsoft_graph_education_submission)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEducationSubmission},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Remove educationCategory
  Remove an educationCategory from an educationAssignment. Only teachers can perform this operation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `education_assignment_id` (String.t): The unique identifier of educationAssignment
  - `education_category_id` (String.t): The unique identifier of educationCategory
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag
    - `:"@id"` (String.t): Delete Uri

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_assignments_delete_ref_categories(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_assignments_delete_ref_categories(connection, education_class_id, education_assignment_id, education_category_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers,
      :"@id" => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/education/classes/#{education_class_id}/assignments/#{education_assignment_id}/categories/#{education_category_id}/$ref")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete educationRubric from educationAssignment
  Remove an educationRubric from an educationAssignment. This method doesn't delete the rubric itself and can only be performed by teachers. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `education_assignment_id` (String.t): The unique identifier of educationAssignment
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_assignments_delete_ref_rubric(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_assignments_delete_ref_rubric(connection, education_class_id, education_assignment_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/education/classes/#{education_class_id}/assignments/#{education_assignment_id}/rubric/$ref")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete educationAssignmentResource
  Delete a specific educationAssignmentResource attached to an assignment. In general, only teachers in the class can remove a resource. However, teachers can't remove resources marked as 'distributeToStudents', after the assignment has been published to students. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `education_assignment_id` (String.t): The unique identifier of educationAssignment
  - `education_assignment_resource_id` (String.t): The unique identifier of educationAssignmentResource
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_assignments_delete_resources(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_assignments_delete_resources(connection, education_class_id, education_assignment_id, education_assignment_resource_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/education/classes/#{education_class_id}/assignments/#{education_assignment_id}/resources/#{education_assignment_resource_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete educationRubric from educationAssignment
  Remove an educationRubric from an educationAssignment. This method doesn't delete the rubric itself and can only be performed by teachers. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `education_assignment_id` (String.t): The unique identifier of educationAssignment
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_assignments_delete_rubric(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_assignments_delete_rubric(connection, education_class_id, education_assignment_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/education/classes/#{education_class_id}/assignments/#{education_assignment_id}/rubric")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property submissions for education

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `education_assignment_id` (String.t): The unique identifier of educationAssignment
  - `education_submission_id` (String.t): The unique identifier of educationSubmission
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_assignments_delete_submissions(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_assignments_delete_submissions(connection, education_class_id, education_assignment_id, education_submission_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/education/classes/#{education_class_id}/assignments/#{education_assignment_id}/submissions/#{education_submission_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_assignments_get_count_a470(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_assignments_get_count_a470(connection, education_class_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/education/classes/#{education_class_id}/assignments/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get educationRubric attached to educationAssignment
  Get the educationRubric object attached to an educationAssignment, if one exists. Only teachers, students, and applications with application permissions can perform this operation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `education_assignment_id` (String.t): The unique identifier of educationAssignment
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_assignments_get_ref_rubric(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def education_classes_assignments_get_ref_rubric(connection, education_class_id, education_assignment_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/education/classes/#{education_class_id}/assignments/#{education_assignment_id}/rubric/$ref")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get educationAssignmentResource
  Get the properties of an education assignment resource associated with an assignment. Only teachers, students, and applications with application permissions can perform this operation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `education_assignment_id` (String.t): The unique identifier of educationAssignment
  - `education_assignment_resource_id` (String.t): The unique identifier of educationAssignmentResource
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEducationAssignmentResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_assignments_get_resources(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphEducationAssignmentResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_assignments_get_resources(connection, education_class_id, education_assignment_id, education_assignment_resource_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/education/classes/#{education_class_id}/assignments/#{education_assignment_id}/resources/#{education_assignment_resource_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEducationAssignmentResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get educationRubric attached to educationAssignment
  Get the educationRubric object attached to an educationAssignment, if one exists. Only teachers, students, and applications with application permissions can perform this operation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `education_assignment_id` (String.t): The unique identifier of educationAssignment
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEducationRubric.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_assignments_get_rubric(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphEducationRubric.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_assignments_get_rubric(connection, education_class_id, education_assignment_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/education/classes/#{education_class_id}/assignments/#{education_assignment_id}/rubric")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEducationRubric},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get educationSubmission
  Retrieve a particular submission. Only teachers, students, and applications with application permissions can perform this operation. A submission object represents a student's work for an assignment. Resources associated with the submission represent this work. Only the assignedTo student can see and modify the submission. A teacher or application with application permissions has full access to all submissions. The grade and feedback from a teacher are part of the educationOutcome associated with this object. Only teachers or applications with application permissions can add or change grades and feedback. Students will not see the grade or feedback until the assignment has been released. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `education_assignment_id` (String.t): The unique identifier of educationAssignment
  - `education_submission_id` (String.t): The unique identifier of educationSubmission
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEducationSubmission.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_assignments_get_submissions(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphEducationSubmission.t} | {:error, Tesla.Env.t}
  def education_classes_assignments_get_submissions(connection, education_class_id, education_assignment_id, education_submission_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/education/classes/#{education_class_id}/assignments/#{education_assignment_id}/submissions/#{education_submission_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEducationSubmission},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List categories
  List all the categories associated with an assignment. Only teachers, students, and applications with application permissions can perform this operation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `education_assignment_id` (String.t): The unique identifier of educationAssignment
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEducationCategoryCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_assignments_list_categories(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphEducationCategoryCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_assignments_list_categories(connection, education_class_id, education_assignment_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/education/classes/#{education_class_id}/assignments/#{education_assignment_id}/categories")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEducationCategoryCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List categories
  List all the categories associated with an assignment. Only teachers, students, and applications with application permissions can perform this operation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `education_assignment_id` (String.t): The unique identifier of educationAssignment
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values

  ### Returns

  - `{:ok, MicrosoftGraph.Model.StringCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_assignments_list_ref_categories(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.StringCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_assignments_list_ref_categories(connection, education_class_id, education_assignment_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/education/classes/#{education_class_id}/assignments/#{education_assignment_id}/categories/$ref")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.StringCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List assignment resources
  Get all the educationAssignmentResource objects associated with an assignment. Only teachers, students, and applications with application permissions can perform this operation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `education_assignment_id` (String.t): The unique identifier of educationAssignment
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEducationAssignmentResourceCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_assignments_list_resources(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphEducationAssignmentResourceCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_assignments_list_resources(connection, education_class_id, education_assignment_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/education/classes/#{education_class_id}/assignments/#{education_assignment_id}/resources")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEducationAssignmentResourceCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List submissions
  List all the submissions associated with an assignment. Only teachers, students, and applications with application permissions can perform this operation. A teacher or an application with application permissions can get all the submissions while a student can only get submissions that they are associated with. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `education_assignment_id` (String.t): The unique identifier of educationAssignment
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEducationSubmissionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_assignments_list_submissions(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphEducationSubmissionCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_assignments_list_submissions(connection, education_class_id, education_assignment_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/education/classes/#{education_class_id}/assignments/#{education_assignment_id}/submissions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEducationSubmissionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `education_assignment_id` (String.t): The unique identifier of educationAssignment
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_assignments_resources_get_count_f57b(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_assignments_resources_get_count_f57b(connection, education_class_id, education_assignment_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/education/classes/#{education_class_id}/assignments/#{education_assignment_id}/resources/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create educationFeedbackResourceOutcome
  Create a new feedback resource for a submission. Only a teacher can perform this operation. To create a new file-based resource, upload the file to the feedback resources folder associated with the assignment. If the file doesn't exist or isn't in that folder, the POST request will fail. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `education_assignment_id` (String.t): The unique identifier of educationAssignment
  - `education_submission_id` (String.t): The unique identifier of educationSubmission
  - `microsoft_graph_education_outcome` (MicrosoftGraphEducationOutcome): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEducationOutcome.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_assignments_submissions_create_outcomes(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphEducationOutcome.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphEducationOutcome.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_assignments_submissions_create_outcomes(connection, education_class_id, education_assignment_id, education_submission_id, microsoft_graph_education_outcome, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/education/classes/#{education_class_id}/assignments/#{education_assignment_id}/submissions/#{education_submission_id}/outcomes")
      |> add_param(:body, :body, microsoft_graph_education_outcome)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEducationOutcome},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create educationSubmissionResource
  Add an educationSubmissionResource to a submission resource list. Only teachers and students can perform this operation. The operation will not succeed if the allowStudentsToAddResources flag is not set to true. To create a new file-based resource, upload the file to the resources folder associated with the submission. If the file doesn't exist or is not in that folder, the POST request will fail. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `education_assignment_id` (String.t): The unique identifier of educationAssignment
  - `education_submission_id` (String.t): The unique identifier of educationSubmission
  - `microsoft_graph_education_submission_resource` (MicrosoftGraphEducationSubmissionResource): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEducationSubmissionResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_assignments_submissions_create_resources(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphEducationSubmissionResource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphEducationSubmissionResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_assignments_submissions_create_resources(connection, education_class_id, education_assignment_id, education_submission_id, microsoft_graph_education_submission_resource, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/education/classes/#{education_class_id}/assignments/#{education_assignment_id}/submissions/#{education_submission_id}/resources")
      |> add_param(:body, :body, microsoft_graph_education_submission_resource)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEducationSubmissionResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to submittedResources for education

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `education_assignment_id` (String.t): The unique identifier of educationAssignment
  - `education_submission_id` (String.t): The unique identifier of educationSubmission
  - `microsoft_graph_education_submission_resource` (MicrosoftGraphEducationSubmissionResource): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEducationSubmissionResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_assignments_submissions_create_submitted_resources(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphEducationSubmissionResource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphEducationSubmissionResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_assignments_submissions_create_submitted_resources(connection, education_class_id, education_assignment_id, education_submission_id, microsoft_graph_education_submission_resource, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/education/classes/#{education_class_id}/assignments/#{education_assignment_id}/submissions/#{education_submission_id}/submittedResources")
      |> add_param(:body, :body, microsoft_graph_education_submission_resource)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEducationSubmissionResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete educationFeedbackResourceOutcome
  Delete a feedback resource from a submission. This can only be done by a teacher. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `education_assignment_id` (String.t): The unique identifier of educationAssignment
  - `education_submission_id` (String.t): The unique identifier of educationSubmission
  - `education_outcome_id` (String.t): The unique identifier of educationOutcome
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_assignments_submissions_delete_outcomes(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_assignments_submissions_delete_outcomes(connection, education_class_id, education_assignment_id, education_submission_id, education_outcome_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/education/classes/#{education_class_id}/assignments/#{education_assignment_id}/submissions/#{education_submission_id}/outcomes/#{education_outcome_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete educationSubmissionResource
  Delete an educationSubmissionResource from the submission. Only teachers and students can perform this operation. If the resource was copied from the assignment, a new copy of the resource will be created after the current copy is deleted. This allows you to 'reset' the resource to its original state. If the resource wasn't copied from the assignment but was added from the student, the resource is deleted. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `education_assignment_id` (String.t): The unique identifier of educationAssignment
  - `education_submission_id` (String.t): The unique identifier of educationSubmission
  - `education_submission_resource_id` (String.t): The unique identifier of educationSubmissionResource
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_assignments_submissions_delete_resources(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_assignments_submissions_delete_resources(connection, education_class_id, education_assignment_id, education_submission_id, education_submission_resource_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/education/classes/#{education_class_id}/assignments/#{education_assignment_id}/submissions/#{education_submission_id}/resources/#{education_submission_resource_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property submittedResources for education

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `education_assignment_id` (String.t): The unique identifier of educationAssignment
  - `education_submission_id` (String.t): The unique identifier of educationSubmission
  - `education_submission_resource_id` (String.t): The unique identifier of educationSubmissionResource
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_assignments_submissions_delete_submitted_resources(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_assignments_submissions_delete_submitted_resources(connection, education_class_id, education_assignment_id, education_submission_id, education_submission_resource_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/education/classes/#{education_class_id}/assignments/#{education_assignment_id}/submissions/#{education_submission_id}/submittedResources/#{education_submission_resource_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `education_assignment_id` (String.t): The unique identifier of educationAssignment
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_assignments_submissions_get_count231f(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_assignments_submissions_get_count231f(connection, education_class_id, education_assignment_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/education/classes/#{education_class_id}/assignments/#{education_assignment_id}/submissions/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get outcomes from education

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `education_assignment_id` (String.t): The unique identifier of educationAssignment
  - `education_submission_id` (String.t): The unique identifier of educationSubmission
  - `education_outcome_id` (String.t): The unique identifier of educationOutcome
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEducationOutcome.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_assignments_submissions_get_outcomes(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphEducationOutcome.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_assignments_submissions_get_outcomes(connection, education_class_id, education_assignment_id, education_submission_id, education_outcome_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/education/classes/#{education_class_id}/assignments/#{education_assignment_id}/submissions/#{education_submission_id}/outcomes/#{education_outcome_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEducationOutcome},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get educationSubmissionResource
  Retrieve the properties of a specific resource associated with a submission. Only teachers, students, and applications with application permissions can perform this operation. This resource is in the 'working' resource list and should be considered work in process by a student. This resource is wrapped with a possible pointer back to the assignment resource if it was copied from the assignment. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `education_assignment_id` (String.t): The unique identifier of educationAssignment
  - `education_submission_id` (String.t): The unique identifier of educationSubmission
  - `education_submission_resource_id` (String.t): The unique identifier of educationSubmissionResource
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEducationSubmissionResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_assignments_submissions_get_resources(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphEducationSubmissionResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_assignments_submissions_get_resources(connection, education_class_id, education_assignment_id, education_submission_id, education_submission_resource_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/education/classes/#{education_class_id}/assignments/#{education_assignment_id}/submissions/#{education_submission_id}/resources/#{education_submission_resource_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEducationSubmissionResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get educationSubmittedSubmissionResource
  Retrieve a submitted resource. Only teachers, students, and applications with application permissions can perform this operation. Resources are available to a teacher or an application with application permissions after a student submits it, and are available to the student after the teacher returns the submission. Teachers can leave notes in some resources. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `education_assignment_id` (String.t): The unique identifier of educationAssignment
  - `education_submission_id` (String.t): The unique identifier of educationSubmission
  - `education_submission_resource_id` (String.t): The unique identifier of educationSubmissionResource
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEducationSubmissionResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_assignments_submissions_get_submitted_resources(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphEducationSubmissionResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_assignments_submissions_get_submitted_resources(connection, education_class_id, education_assignment_id, education_submission_id, education_submission_resource_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/education/classes/#{education_class_id}/assignments/#{education_assignment_id}/submissions/#{education_submission_id}/submittedResources/#{education_submission_resource_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEducationSubmissionResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List outcomes
  Retrieve a list of educationOutcome objects. There are four types of outcomes: educationPointsOutcome, educationFeedbackOutcome, educationRubricOutcome, and educationFeedbackResourceOutcome. Only teachers, students, and applications with application permissions can perform this operation. A submission for a credit assignment (one that has no point value and no rubric) will have an educationFeedbackOutcome. (It might also return an educationPointsOutcome, but that outcome is ignored.) A submission for a points assignment (one that has a point value assigned) will have both an educationFeedbackOutcome and an educationPointsOutcome. A submission for an assignment with an attached rubric, if the rubric is a credit rubric (no points), will have an educationFeedbackOutcome and an educationRubricOutcome. (It might also return an educationPointsOutcome, but that outcome is ignored.) A submission for an assignment with an attached rubric, if the rubric is a points rubric, will have an educationFeedbackOutcome, an educationPointsOutcome, and an educationRubricOutcome. A submission for a feedback resource will have an educationFeedbackResourceOutcome. All outcome types have a regular and a published property appropriate to that type of outcome; for example, points and publishedPoints, feedback and publishedFeedback. The regular property is the most recent value updated by the teacher; the published property is the most recent value returned to the student. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `education_assignment_id` (String.t): The unique identifier of educationAssignment
  - `education_submission_id` (String.t): The unique identifier of educationSubmission
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEducationOutcomeCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_assignments_submissions_list_outcomes(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphEducationOutcomeCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_assignments_submissions_list_outcomes(connection, education_class_id, education_assignment_id, education_submission_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/education/classes/#{education_class_id}/assignments/#{education_assignment_id}/submissions/#{education_submission_id}/outcomes")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEducationOutcomeCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List submission resources
  List the resources associated with a submission. Only teachers, students, and applications with application permissions can perform this operation. The educationSubmissionResource object is a wrapper around the actual resource object the student is working on. The wrapper also includes a pointer to the resources on the assignment if this was copied from the assignment during the assign process. These resources are the working copy of the assignment. The submittedResources are the resources that have officially been submitted to be graded. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `education_assignment_id` (String.t): The unique identifier of educationAssignment
  - `education_submission_id` (String.t): The unique identifier of educationSubmission
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEducationSubmissionResourceCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_assignments_submissions_list_resources(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphEducationSubmissionResourceCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_assignments_submissions_list_resources(connection, education_class_id, education_assignment_id, education_submission_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/education/classes/#{education_class_id}/assignments/#{education_assignment_id}/submissions/#{education_submission_id}/resources")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEducationSubmissionResourceCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List submittedResources
  List the educationSubmissionResource objects that have officially been submitted for grading. Only teachers, students, and applications with application permissions can perform this operation. The student who owns the submission cannot change the submitted list without resubmitting the assignment. This is a wrapper around the real resource and can contain a pointer back to the actual assignment resource if this resource was copied from the assignment. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `education_assignment_id` (String.t): The unique identifier of educationAssignment
  - `education_submission_id` (String.t): The unique identifier of educationSubmission
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEducationSubmissionResourceCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_assignments_submissions_list_submitted_resources(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphEducationSubmissionResourceCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_assignments_submissions_list_submitted_resources(connection, education_class_id, education_assignment_id, education_submission_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/education/classes/#{education_class_id}/assignments/#{education_assignment_id}/submissions/#{education_submission_id}/submittedResources")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEducationSubmissionResourceCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `education_assignment_id` (String.t): The unique identifier of educationAssignment
  - `education_submission_id` (String.t): The unique identifier of educationSubmission
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_assignments_submissions_outcomes_get_count2ffd(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_assignments_submissions_outcomes_get_count2ffd(connection, education_class_id, education_assignment_id, education_submission_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/education/classes/#{education_class_id}/assignments/#{education_assignment_id}/submissions/#{education_submission_id}/outcomes/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `education_assignment_id` (String.t): The unique identifier of educationAssignment
  - `education_submission_id` (String.t): The unique identifier of educationSubmission
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_assignments_submissions_resources_get_count3e92(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_assignments_submissions_resources_get_count3e92(connection, education_class_id, education_assignment_id, education_submission_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/education/classes/#{education_class_id}/assignments/#{education_assignment_id}/submissions/#{education_submission_id}/resources/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `education_assignment_id` (String.t): The unique identifier of educationAssignment
  - `education_submission_id` (String.t): The unique identifier of educationSubmission
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_assignments_submissions_submitted_resources_get_count_ecf9(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_assignments_submissions_submitted_resources_get_count_ecf9(connection, education_class_id, education_assignment_id, education_submission_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/education/classes/#{education_class_id}/assignments/#{education_assignment_id}/submissions/#{education_submission_id}/submittedResources/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update educationOutcome
  Update the properties of an educationOutcome object. Only teachers can perform this operation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `education_assignment_id` (String.t): The unique identifier of educationAssignment
  - `education_submission_id` (String.t): The unique identifier of educationSubmission
  - `education_outcome_id` (String.t): The unique identifier of educationOutcome
  - `microsoft_graph_education_outcome` (MicrosoftGraphEducationOutcome): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEducationOutcome.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_assignments_submissions_update_outcomes(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphEducationOutcome.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphEducationOutcome.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_assignments_submissions_update_outcomes(connection, education_class_id, education_assignment_id, education_submission_id, education_outcome_id, microsoft_graph_education_outcome, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/education/classes/#{education_class_id}/assignments/#{education_assignment_id}/submissions/#{education_submission_id}/outcomes/#{education_outcome_id}")
      |> add_param(:body, :body, microsoft_graph_education_outcome)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEducationOutcome},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property resources in education

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `education_assignment_id` (String.t): The unique identifier of educationAssignment
  - `education_submission_id` (String.t): The unique identifier of educationSubmission
  - `education_submission_resource_id` (String.t): The unique identifier of educationSubmissionResource
  - `microsoft_graph_education_submission_resource` (MicrosoftGraphEducationSubmissionResource): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEducationSubmissionResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_assignments_submissions_update_resources(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphEducationSubmissionResource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphEducationSubmissionResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_assignments_submissions_update_resources(connection, education_class_id, education_assignment_id, education_submission_id, education_submission_resource_id, microsoft_graph_education_submission_resource, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/education/classes/#{education_class_id}/assignments/#{education_assignment_id}/submissions/#{education_submission_id}/resources/#{education_submission_resource_id}")
      |> add_param(:body, :body, microsoft_graph_education_submission_resource)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEducationSubmissionResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property submittedResources in education

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `education_assignment_id` (String.t): The unique identifier of educationAssignment
  - `education_submission_id` (String.t): The unique identifier of educationSubmission
  - `education_submission_resource_id` (String.t): The unique identifier of educationSubmissionResource
  - `microsoft_graph_education_submission_resource` (MicrosoftGraphEducationSubmissionResource): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEducationSubmissionResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_assignments_submissions_update_submitted_resources(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphEducationSubmissionResource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphEducationSubmissionResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_assignments_submissions_update_submitted_resources(connection, education_class_id, education_assignment_id, education_submission_id, education_submission_resource_id, microsoft_graph_education_submission_resource, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/education/classes/#{education_class_id}/assignments/#{education_assignment_id}/submissions/#{education_submission_id}/submittedResources/#{education_submission_resource_id}")
      |> add_param(:body, :body, microsoft_graph_education_submission_resource)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEducationSubmissionResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Attach educationRubric to an assignment
  Attach an existing educationRubric object to an educationAssignment. Only teachers can perform this operation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `education_assignment_id` (String.t): The unique identifier of educationAssignment
  - `reference_update` (ReferenceUpdate): New navigation property ref values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_assignments_update_ref_rubric(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.ReferenceUpdate.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_assignments_update_ref_rubric(connection, education_class_id, education_assignment_id, reference_update, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/education/classes/#{education_class_id}/assignments/#{education_assignment_id}/rubric/$ref")
      |> add_param(:body, :body, reference_update)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property resources in education

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `education_assignment_id` (String.t): The unique identifier of educationAssignment
  - `education_assignment_resource_id` (String.t): The unique identifier of educationAssignmentResource
  - `microsoft_graph_education_assignment_resource` (MicrosoftGraphEducationAssignmentResource): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEducationAssignmentResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_assignments_update_resources(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphEducationAssignmentResource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphEducationAssignmentResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_assignments_update_resources(connection, education_class_id, education_assignment_id, education_assignment_resource_id, microsoft_graph_education_assignment_resource, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/education/classes/#{education_class_id}/assignments/#{education_assignment_id}/resources/#{education_assignment_resource_id}")
      |> add_param(:body, :body, microsoft_graph_education_assignment_resource)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEducationAssignmentResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Attach educationRubric to an assignment
  Attach an existing educationRubric object to an educationAssignment. Only teachers can perform this operation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `education_assignment_id` (String.t): The unique identifier of educationAssignment
  - `microsoft_graph_education_rubric` (MicrosoftGraphEducationRubric): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEducationRubric.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_assignments_update_rubric(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphEducationRubric.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphEducationRubric.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_assignments_update_rubric(connection, education_class_id, education_assignment_id, microsoft_graph_education_rubric, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/education/classes/#{education_class_id}/assignments/#{education_assignment_id}/rubric")
      |> add_param(:body, :body, microsoft_graph_education_rubric)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEducationRubric},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property submissions in education

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `education_assignment_id` (String.t): The unique identifier of educationAssignment
  - `education_submission_id` (String.t): The unique identifier of educationSubmission
  - `microsoft_graph_education_submission` (MicrosoftGraphEducationSubmission): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEducationSubmission.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_assignments_update_submissions(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphEducationSubmission.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphEducationSubmission.t} | {:error, Tesla.Env.t}
  def education_classes_assignments_update_submissions(connection, education_class_id, education_assignment_id, education_submission_id, microsoft_graph_education_submission, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/education/classes/#{education_class_id}/assignments/#{education_assignment_id}/submissions/#{education_submission_id}")
      |> add_param(:body, :body, microsoft_graph_education_submission)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEducationSubmission},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create educationCategory
  Create a new educationCategory on an educationClass. Only teachers can perform this operation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `microsoft_graph_education_category` (MicrosoftGraphEducationCategory): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEducationCategory.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_create_assignment_categories(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphEducationCategory.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphEducationCategory.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_create_assignment_categories(connection, education_class_id, microsoft_graph_education_category, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/education/classes/#{education_class_id}/assignmentCategories")
      |> add_param(:body, :body, microsoft_graph_education_category)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEducationCategory},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create educationAssignment
  Create a new assignment. Only teachers in a class can create an assignment. Assignments start in the Draft state, which means that students will not see the assignment until publication. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `microsoft_graph_education_assignment` (MicrosoftGraphEducationAssignment): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEducationAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_create_assignments(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphEducationAssignment.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphEducationAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_create_assignments(connection, education_class_id, microsoft_graph_education_assignment, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/education/classes/#{education_class_id}/assignments")
      |> add_param(:body, :body, microsoft_graph_education_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEducationAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Add a student
  Add an educationUser member to an educationClass. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `request_body` (%{optional(String.t) => map()}): New navigation property ref value
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_create_ref_members(Tesla.Env.client, String.t, %{optional(String.t) => Map.t}, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_create_ref_members(connection, education_class_id, request_body, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/education/classes/#{education_class_id}/members/$ref")
      |> add_param(:body, :body, request_body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Add teacher
  Add a teacher to a class. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `request_body` (%{optional(String.t) => map()}): New navigation property ref value
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_create_ref_teachers(Tesla.Env.client, String.t, %{optional(String.t) => Map.t}, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_create_ref_teachers(connection, education_class_id, request_body, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/education/classes/#{education_class_id}/teachers/$ref")
      |> add_param(:body, :body, request_body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete educationCategory
  Delete an existing category. Only teachers can perform this operation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `education_category_id` (String.t): The unique identifier of educationCategory
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_delete_assignment_categories(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_delete_assignment_categories(connection, education_class_id, education_category_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/education/classes/#{education_class_id}/assignmentCategories/#{education_category_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property assignmentDefaults for education

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_delete_assignment_defaults(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_delete_assignment_defaults(connection, education_class_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/education/classes/#{education_class_id}/assignmentDefaults")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property assignmentSettings for education

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_delete_assignment_settings(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_delete_assignment_settings(connection, education_class_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/education/classes/#{education_class_id}/assignmentSettings")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete educationAssignment
  Delete an existing assignment. Only teachers within a class can delete assignments. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `education_assignment_id` (String.t): The unique identifier of educationAssignment
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_delete_assignments(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_delete_assignments(connection, education_class_id, education_assignment_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/education/classes/#{education_class_id}/assignments/#{education_assignment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Remove member from educationClass
  Remove an educationUser from an educationClass. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `education_user_id` (String.t): The unique identifier of educationUser
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag
    - `:"@id"` (String.t): Delete Uri

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_delete_ref_members(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_delete_ref_members(connection, education_class_id, education_user_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers,
      :"@id" => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/education/classes/#{education_class_id}/members/#{education_user_id}/$ref")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Remove teacher from educationClass
  Remove a teacher from an educationClass. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `education_user_id` (String.t): The unique identifier of educationUser
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag
    - `:"@id"` (String.t): Delete Uri

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_delete_ref_teachers(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_delete_ref_teachers(connection, education_class_id, education_user_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers,
      :"@id" => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/education/classes/#{education_class_id}/teachers/#{education_user_id}/$ref")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get educationCategory
  Retrieve an educationCategory object. Only teachers, students, and applications with application permissions can perform this operation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `education_category_id` (String.t): The unique identifier of educationCategory
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEducationCategory.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_get_assignment_categories(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphEducationCategory.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_get_assignment_categories(connection, education_class_id, education_category_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/education/classes/#{education_class_id}/assignmentCategories/#{education_category_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEducationCategory},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get educationAssignmentDefaults
  Read the properties and relationships of an educationAssignmentDefaults object.  These are the class-level assignment defaults respected by new assignments created in the class. Callers can continue to specify custom values on each assignment creation if they don't want the default behaviors. Only teachers can perform this operation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEducationAssignmentDefaults.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_get_assignment_defaults(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphEducationAssignmentDefaults.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_get_assignment_defaults(connection, education_class_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/education/classes/#{education_class_id}/assignmentDefaults")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEducationAssignmentDefaults},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get assignmentSettings from education
  Specifies class-level assignments settings.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEducationAssignmentSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_get_assignment_settings(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphEducationAssignmentSettings.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_get_assignment_settings(connection, education_class_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/education/classes/#{education_class_id}/assignmentSettings")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEducationAssignmentSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get educationAssignment
  Get the properties and relationships of an assignment. Only teachers, students, and applications with application permissions can perform this operation. Students can only see assignments assigned to them; teachers and applications with application permissions can see all assignments in a class. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `education_assignment_id` (String.t): The unique identifier of educationAssignment
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEducationAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_get_assignments(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphEducationAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_get_assignments(connection, education_class_id, education_assignment_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/education/classes/#{education_class_id}/assignments/#{education_assignment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEducationAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_get_count_fe5a(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_get_count_fe5a(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/education/classes/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get group from education
  The underlying Microsoft 365 group object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_get_group(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphGroup.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_get_group(connection, education_class_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/education/classes/#{education_class_id}/group")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get schools from education
  All schools that this class is associated with. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `education_school_id` (String.t): The unique identifier of educationSchool
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEducationSchool.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_get_schools(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphEducationSchool.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_get_schools(connection, education_class_id, education_school_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/education/classes/#{education_class_id}/schools/#{education_school_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEducationSchool},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get serviceProvisioningErrors property value

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_group_list_service_provisioning_errors(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_group_list_service_provisioning_errors(connection, education_class_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/education/classes/#{education_class_id}/group/serviceProvisioningErrors")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_group_service_provisioning_errors_get_count5a91(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_group_service_provisioning_errors_get_count5a91(connection, education_class_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/education/classes/#{education_class_id}/group/serviceProvisioningErrors/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List assignmentCategories
  Retrieve a list of educationCategory objects. Only teachers can perform this operation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEducationCategoryCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_list_assignment_categories(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphEducationCategoryCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_list_assignment_categories(connection, education_class_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/education/classes/#{education_class_id}/assignmentCategories")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEducationCategoryCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List class assignments
  Retrieve a list of assignment objects. Only teachers, students, and applications with application permissions can perform this operation. A teacher or an application executing with application permissions can see all assignment objects for the class. Students can only see assignments that are assigned to them. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEducationAssignmentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_list_assignments(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphEducationAssignmentCollectionResponse.t} | {:error, Tesla.Env.t}
  def education_classes_list_assignments(connection, education_class_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/education/classes/#{education_class_id}/assignments")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEducationAssignmentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List members of an educationClass
  Retrieves the educationUser members of an educationClass. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEducationUserCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_list_members(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphEducationUserCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_list_members(connection, education_class_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/education/classes/#{education_class_id}/members")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEducationUserCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List members of an educationClass
  Retrieves the educationUser members of an educationClass. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values

  ### Returns

  - `{:ok, MicrosoftGraph.Model.StringCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_list_ref_members(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.StringCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_list_ref_members(connection, education_class_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/education/classes/#{education_class_id}/members/$ref")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.StringCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List teachers
  Retrieve a list of teachers for a class. Delegated tokens must be members of the class to get the teacher list. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values

  ### Returns

  - `{:ok, MicrosoftGraph.Model.StringCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_list_ref_teachers(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.StringCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_list_ref_teachers(connection, education_class_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/education/classes/#{education_class_id}/teachers/$ref")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.StringCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List schools
  Retrieve a list of schools in which the class is taught. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEducationSchoolCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_list_schools(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphEducationSchoolCollectionResponse.t} | {:error, Tesla.Env.t}
  def education_classes_list_schools(connection, education_class_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/education/classes/#{education_class_id}/schools")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEducationSchoolCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List teachers
  Retrieve a list of teachers for a class. Delegated tokens must be members of the class to get the teacher list. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEducationUserCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_list_teachers(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphEducationUserCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_list_teachers(connection, education_class_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/education/classes/#{education_class_id}/teachers")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEducationUserCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_members_get_count4459(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_members_get_count4459(connection, education_class_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/education/classes/#{education_class_id}/members/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_schools_get_count_fef1(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_schools_get_count_fef1(connection, education_class_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/education/classes/#{education_class_id}/schools/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_teachers_get_count4305(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_teachers_get_count4305(connection, education_class_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/education/classes/#{education_class_id}/teachers/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property assignmentCategories in education

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `education_category_id` (String.t): The unique identifier of educationCategory
  - `microsoft_graph_education_category` (MicrosoftGraphEducationCategory): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEducationCategory.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_update_assignment_categories(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphEducationCategory.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphEducationCategory.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_update_assignment_categories(connection, education_class_id, education_category_id, microsoft_graph_education_category, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/education/classes/#{education_class_id}/assignmentCategories/#{education_category_id}")
      |> add_param(:body, :body, microsoft_graph_education_category)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEducationCategory},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update educationAssignmentDefaults
  Update the properties of an educationAssignmentDefaults object. Only teachers can update these settings. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `microsoft_graph_education_assignment_defaults` (MicrosoftGraphEducationAssignmentDefaults): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEducationAssignmentDefaults.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_update_assignment_defaults(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphEducationAssignmentDefaults.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphEducationAssignmentDefaults.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_update_assignment_defaults(connection, education_class_id, microsoft_graph_education_assignment_defaults, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/education/classes/#{education_class_id}/assignmentDefaults")
      |> add_param(:body, :body, microsoft_graph_education_assignment_defaults)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEducationAssignmentDefaults},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update educationAssignmentSettings
  Update the properties of an educationAssignmentSettings object. Only teachers can update these settings. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `microsoft_graph_education_assignment_settings` (MicrosoftGraphEducationAssignmentSettings): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEducationAssignmentSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_update_assignment_settings(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphEducationAssignmentSettings.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphEducationAssignmentSettings.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_update_assignment_settings(connection, education_class_id, microsoft_graph_education_assignment_settings, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/education/classes/#{education_class_id}/assignmentSettings")
      |> add_param(:body, :body, microsoft_graph_education_assignment_settings)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEducationAssignmentSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update educationassignment
  Update an educationAssignment object.  Only teachers can perform this action.  Alternatively, request to change the status of an assignment with publish action. Don't use a PATCH operation for this purpose. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `education_assignment_id` (String.t): The unique identifier of educationAssignment
  - `microsoft_graph_education_assignment` (MicrosoftGraphEducationAssignment): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEducationAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_classes_update_assignments(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphEducationAssignment.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphEducationAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_classes_update_assignments(connection, education_class_id, education_assignment_id, microsoft_graph_education_assignment, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/education/classes/#{education_class_id}/assignments/#{education_assignment_id}")
      |> add_param(:body, :body, microsoft_graph_education_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEducationAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create educationClass
  Create a new educationClass object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_education_class` (MicrosoftGraphEducationClass): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEducationClass.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_create_classes(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphEducationClass.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphEducationClass.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_create_classes(connection, microsoft_graph_education_class, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/education/classes")
      |> add_param(:body, :body, microsoft_graph_education_class)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEducationClass},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete educationClass
  Delete an educationClass. Because a class is also a universal group, deleting a class deletes the group. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_delete_classes(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_delete_classes(connection, education_class_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/education/classes/#{education_class_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get educationClass
  Retrieve a class from the system. A class is a universal group with a special property that indicates to the system that the group is a class. Group members represent the students; group admins represent the teachers in the class. If you're using the delegated token, the user will only see classes in which they are members. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEducationClass.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_get_classes(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphEducationClass.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_get_classes(connection, education_class_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/education/classes/#{education_class_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEducationClass},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List educationClasses
  Get a list of the educationClass objects and their properties. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEducationClassCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_list_classes(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphEducationClassCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_list_classes(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/education/classes")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEducationClassCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update educationClass
  Update the properties of an educationClass object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `education_class_id` (String.t): The unique identifier of educationClass
  - `microsoft_graph_education_class` (MicrosoftGraphEducationClass): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEducationClass.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec education_update_classes(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphEducationClass.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphEducationClass.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def education_update_classes(connection, education_class_id, microsoft_graph_education_class, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/education/classes/#{education_class_id}")
      |> add_param(:body, :body, microsoft_graph_education_class)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEducationClass},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
