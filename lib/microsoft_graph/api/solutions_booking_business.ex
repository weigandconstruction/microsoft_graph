# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.SolutionsBookingBusiness do
  @moduledoc """
  API calls for all endpoints tagged `SolutionsBookingBusiness`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `booking_business_id` (String.t): The unique identifier of bookingBusiness
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec solutions_booking_businesses_appointments_get_count205a(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def solutions_booking_businesses_appointments_get_count205a(
        connection,
        booking_business_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/solutions/bookingBusinesses/#{booking_business_id}/appointments/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `booking_business_id` (String.t): The unique identifier of bookingBusiness
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec solutions_booking_businesses_calendar_view_get_count_f3a3(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def solutions_booking_businesses_calendar_view_get_count_f3a3(
        connection,
        booking_business_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/solutions/bookingBusinesses/#{booking_business_id}/calendarView/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create bookingAppointment
  Create a new bookingAppointment for the specified bookingBusiness. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `booking_business_id` (String.t): The unique identifier of bookingBusiness
  - `microsoft_graph_booking_appointment` (MicrosoftGraphBookingAppointment): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphBookingAppointment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec solutions_booking_businesses_create_appointments(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphBookingAppointment.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphBookingAppointment.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def solutions_booking_businesses_create_appointments(
        connection,
        booking_business_id,
        microsoft_graph_booking_appointment,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/solutions/bookingBusinesses/#{booking_business_id}/appointments")
      |> add_param(:body, :body, microsoft_graph_booking_appointment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphBookingAppointment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to calendarView for solutions

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `booking_business_id` (String.t): The unique identifier of bookingBusiness
  - `microsoft_graph_booking_appointment` (MicrosoftGraphBookingAppointment): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphBookingAppointment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec solutions_booking_businesses_create_calendar_view(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphBookingAppointment.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphBookingAppointment.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def solutions_booking_businesses_create_calendar_view(
        connection,
        booking_business_id,
        microsoft_graph_booking_appointment,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/solutions/bookingBusinesses/#{booking_business_id}/calendarView")
      |> add_param(:body, :body, microsoft_graph_booking_appointment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphBookingAppointment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create bookingCustomQuestion
  Create a new bookingCustomQuestion object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `booking_business_id` (String.t): The unique identifier of bookingBusiness
  - `microsoft_graph_booking_custom_question` (MicrosoftGraphBookingCustomQuestion): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphBookingCustomQuestion.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec solutions_booking_businesses_create_custom_questions(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphBookingCustomQuestion.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphBookingCustomQuestion.t()}
          | {:error, Tesla.Env.t()}
  def solutions_booking_businesses_create_custom_questions(
        connection,
        booking_business_id,
        microsoft_graph_booking_custom_question,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/solutions/bookingBusinesses/#{booking_business_id}/customQuestions")
      |> add_param(:body, :body, microsoft_graph_booking_custom_question)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphBookingCustomQuestion},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create bookingCustomer
  Create a new bookingCustomer object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `booking_business_id` (String.t): The unique identifier of bookingBusiness
  - `microsoft_graph_booking_customer_base` (MicrosoftGraphBookingCustomerBase): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphBookingCustomerBase.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec solutions_booking_businesses_create_customers(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphBookingCustomerBase.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphBookingCustomerBase.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def solutions_booking_businesses_create_customers(
        connection,
        booking_business_id,
        microsoft_graph_booking_customer_base,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/solutions/bookingBusinesses/#{booking_business_id}/customers")
      |> add_param(:body, :body, microsoft_graph_booking_customer_base)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphBookingCustomerBase},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create bookingService
  Create a new bookingService for the specified bookingBusiness. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `booking_business_id` (String.t): The unique identifier of bookingBusiness
  - `microsoft_graph_booking_service` (MicrosoftGraphBookingService): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphBookingService.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec solutions_booking_businesses_create_services(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphBookingService.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphBookingService.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def solutions_booking_businesses_create_services(
        connection,
        booking_business_id,
        microsoft_graph_booking_service,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/solutions/bookingBusinesses/#{booking_business_id}/services")
      |> add_param(:body, :body, microsoft_graph_booking_service)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphBookingService},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create bookingStaffMember
  Create a new bookingStaffMember in the specified bookingBusiness. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `booking_business_id` (String.t): The unique identifier of bookingBusiness
  - `microsoft_graph_booking_staff_member_base` (MicrosoftGraphBookingStaffMemberBase): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphBookingStaffMemberBase.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec solutions_booking_businesses_create_staff_members(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphBookingStaffMemberBase.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphBookingStaffMemberBase.t()}
          | {:error, Tesla.Env.t()}
  def solutions_booking_businesses_create_staff_members(
        connection,
        booking_business_id,
        microsoft_graph_booking_staff_member_base,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/solutions/bookingBusinesses/#{booking_business_id}/staffMembers")
      |> add_param(:body, :body, microsoft_graph_booking_staff_member_base)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphBookingStaffMemberBase},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `booking_business_id` (String.t): The unique identifier of bookingBusiness
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec solutions_booking_businesses_custom_questions_get_count385a(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def solutions_booking_businesses_custom_questions_get_count385a(
        connection,
        booking_business_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/solutions/bookingBusinesses/#{booking_business_id}/customQuestions/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `booking_business_id` (String.t): The unique identifier of bookingBusiness
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec solutions_booking_businesses_customers_get_count1771(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def solutions_booking_businesses_customers_get_count1771(
        connection,
        booking_business_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/solutions/bookingBusinesses/#{booking_business_id}/customers/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete bookingAppointment
  Delete a bookingAppointment in the specified bookingBusiness. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `booking_business_id` (String.t): The unique identifier of bookingBusiness
  - `booking_appointment_id` (String.t): The unique identifier of bookingAppointment
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec solutions_booking_businesses_delete_appointments(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def solutions_booking_businesses_delete_appointments(
        connection,
        booking_business_id,
        booking_appointment_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/solutions/bookingBusinesses/#{booking_business_id}/appointments/#{booking_appointment_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property calendarView for solutions

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `booking_business_id` (String.t): The unique identifier of bookingBusiness
  - `booking_appointment_id` (String.t): The unique identifier of bookingAppointment
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec solutions_booking_businesses_delete_calendar_view(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def solutions_booking_businesses_delete_calendar_view(
        connection,
        booking_business_id,
        booking_appointment_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/solutions/bookingBusinesses/#{booking_business_id}/calendarView/#{booking_appointment_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete bookingCustomQuestion
  Delete a bookingCustomQuestion object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `booking_business_id` (String.t): The unique identifier of bookingBusiness
  - `booking_custom_question_id` (String.t): The unique identifier of bookingCustomQuestion
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec solutions_booking_businesses_delete_custom_questions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def solutions_booking_businesses_delete_custom_questions(
        connection,
        booking_business_id,
        booking_custom_question_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/solutions/bookingBusinesses/#{booking_business_id}/customQuestions/#{booking_custom_question_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete bookingCustomer
  Delete the specified bookingCustomer object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `booking_business_id` (String.t): The unique identifier of bookingBusiness
  - `booking_customer_base_id` (String.t): The unique identifier of bookingCustomerBase
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec solutions_booking_businesses_delete_customers(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def solutions_booking_businesses_delete_customers(
        connection,
        booking_business_id,
        booking_customer_base_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/solutions/bookingBusinesses/#{booking_business_id}/customers/#{booking_customer_base_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete bookingService
  Delete a bookingService object in the specified bookingBusiness. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `booking_business_id` (String.t): The unique identifier of bookingBusiness
  - `booking_service_id` (String.t): The unique identifier of bookingService
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec solutions_booking_businesses_delete_services(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def solutions_booking_businesses_delete_services(
        connection,
        booking_business_id,
        booking_service_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/solutions/bookingBusinesses/#{booking_business_id}/services/#{booking_service_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete bookingStaffMember
  Delete a bookingStaffMember in the specified bookingBusiness. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `booking_business_id` (String.t): The unique identifier of bookingBusiness
  - `booking_staff_member_base_id` (String.t): The unique identifier of bookingStaffMemberBase
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec solutions_booking_businesses_delete_staff_members(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def solutions_booking_businesses_delete_staff_members(
        connection,
        booking_business_id,
        booking_staff_member_base_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/solutions/bookingBusinesses/#{booking_business_id}/staffMembers/#{booking_staff_member_base_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get bookingAppointment
  Get the properties and relationships of a bookingAppointment object in the specified bookingBusiness. The startDateTime and endDateTime properties are always returned in UTC. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `booking_business_id` (String.t): The unique identifier of bookingBusiness
  - `booking_appointment_id` (String.t): The unique identifier of bookingAppointment
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphBookingAppointment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec solutions_booking_businesses_get_appointments(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphBookingAppointment.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def solutions_booking_businesses_get_appointments(
        connection,
        booking_business_id,
        booking_appointment_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/solutions/bookingBusinesses/#{booking_business_id}/appointments/#{booking_appointment_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphBookingAppointment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get calendarView from solutions
  The set of appointments of this business in a specified date range. Read-only. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `booking_business_id` (String.t): The unique identifier of bookingBusiness
  - `booking_appointment_id` (String.t): The unique identifier of bookingAppointment
  - `start` (String.t): The start date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T19:00:00-08:00
  - `end` (String.t): The end date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphBookingAppointment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec solutions_booking_businesses_get_calendar_view(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphBookingAppointment.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def solutions_booking_businesses_get_calendar_view(
        connection,
        booking_business_id,
        booking_appointment_id,
        start,
        end_,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/solutions/bookingBusinesses/#{booking_business_id}/calendarView/#{booking_appointment_id}"
      )
      |> add_param(:query, :start, start)
      |> add_param(:query, :end, end_)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphBookingAppointment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec solutions_booking_businesses_get_count_b75b(Tesla.Env.client(), keyword()) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def solutions_booking_businesses_get_count_b75b(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/solutions/bookingBusinesses/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get bookingCustomQuestion
  Read the properties and relationships of a bookingCustomQuestion object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `booking_business_id` (String.t): The unique identifier of bookingBusiness
  - `booking_custom_question_id` (String.t): The unique identifier of bookingCustomQuestion
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphBookingCustomQuestion.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec solutions_booking_businesses_get_custom_questions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphBookingCustomQuestion.t()}
          | {:error, Tesla.Env.t()}
  def solutions_booking_businesses_get_custom_questions(
        connection,
        booking_business_id,
        booking_custom_question_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/solutions/bookingBusinesses/#{booking_business_id}/customQuestions/#{booking_custom_question_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphBookingCustomQuestion},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get bookingCustomer
  Get the properties and relationships of a bookingCustomer object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `booking_business_id` (String.t): The unique identifier of bookingBusiness
  - `booking_customer_base_id` (String.t): The unique identifier of bookingCustomerBase
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphBookingCustomerBase.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec solutions_booking_businesses_get_customers(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphBookingCustomerBase.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def solutions_booking_businesses_get_customers(
        connection,
        booking_business_id,
        booking_customer_base_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/solutions/bookingBusinesses/#{booking_business_id}/customers/#{booking_customer_base_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphBookingCustomerBase},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get bookingService
  Get the properties and relationships of a bookingService object in the specified bookingBusiness. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `booking_business_id` (String.t): The unique identifier of bookingBusiness
  - `booking_service_id` (String.t): The unique identifier of bookingService
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphBookingService.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec solutions_booking_businesses_get_services(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphBookingService.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def solutions_booking_businesses_get_services(
        connection,
        booking_business_id,
        booking_service_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/solutions/bookingBusinesses/#{booking_business_id}/services/#{booking_service_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphBookingService},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get bookingStaffMember
  Get the properties and relationships of a bookingStaffMember in the specified bookingBusiness. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `booking_business_id` (String.t): The unique identifier of bookingBusiness
  - `booking_staff_member_base_id` (String.t): The unique identifier of bookingStaffMemberBase
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphBookingStaffMemberBase.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec solutions_booking_businesses_get_staff_members(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphBookingStaffMemberBase.t()}
          | {:error, Tesla.Env.t()}
  def solutions_booking_businesses_get_staff_members(
        connection,
        booking_business_id,
        booking_staff_member_base_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/solutions/bookingBusinesses/#{booking_business_id}/staffMembers/#{booking_staff_member_base_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphBookingStaffMemberBase},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List appointments
  Get a list of bookingAppointment objects for the specified bookingBusiness. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `booking_business_id` (String.t): The unique identifier of bookingBusiness
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphBookingAppointmentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec solutions_booking_businesses_list_appointments(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphBookingAppointmentCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def solutions_booking_businesses_list_appointments(connection, booking_business_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/solutions/bookingBusinesses/#{booking_business_id}/appointments")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphBookingAppointmentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get calendarView from solutions
  The set of appointments of this business in a specified date range. Read-only. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `booking_business_id` (String.t): The unique identifier of bookingBusiness
  - `start` (String.t): The start date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T19:00:00-08:00
  - `end` (String.t): The end date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphBookingAppointmentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec solutions_booking_businesses_list_calendar_view(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphBookingAppointmentCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def solutions_booking_businesses_list_calendar_view(
        connection,
        booking_business_id,
        start,
        end_,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/solutions/bookingBusinesses/#{booking_business_id}/calendarView")
      |> add_param(:query, :start, start)
      |> add_param(:query, :end, end_)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphBookingAppointmentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List customQuestions
  Get the bookingCustomQuestion resources associated with a bookingBusiness. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `booking_business_id` (String.t): The unique identifier of bookingBusiness
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphBookingCustomQuestionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec solutions_booking_businesses_list_custom_questions(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphBookingCustomQuestionCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def solutions_booking_businesses_list_custom_questions(
        connection,
        booking_business_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/solutions/bookingBusinesses/#{booking_business_id}/customQuestions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphBookingCustomQuestionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List customers
  Get a list of bookingCustomer objects of a business. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `booking_business_id` (String.t): The unique identifier of bookingBusiness
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphBookingCustomerBaseCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec solutions_booking_businesses_list_customers(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphBookingCustomerBaseCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def solutions_booking_businesses_list_customers(connection, booking_business_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/solutions/bookingBusinesses/#{booking_business_id}/customers")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphBookingCustomerBaseCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List services
  Get a list of bookingService objects in the specified bookingBusiness. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `booking_business_id` (String.t): The unique identifier of bookingBusiness
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphBookingServiceCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec solutions_booking_businesses_list_services(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphBookingServiceCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def solutions_booking_businesses_list_services(connection, booking_business_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/solutions/bookingBusinesses/#{booking_business_id}/services")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphBookingServiceCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List staffMembers
  Get a list of bookingStaffMember objects in the specified bookingBusiness. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `booking_business_id` (String.t): The unique identifier of bookingBusiness
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphBookingStaffMemberBaseCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec solutions_booking_businesses_list_staff_members(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphBookingStaffMemberBaseCollectionResponse.t()}
          | {:error, Tesla.Env.t()}
  def solutions_booking_businesses_list_staff_members(connection, booking_business_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/solutions/bookingBusinesses/#{booking_business_id}/staffMembers")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphBookingStaffMemberBaseCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `booking_business_id` (String.t): The unique identifier of bookingBusiness
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec solutions_booking_businesses_services_get_count35c3(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def solutions_booking_businesses_services_get_count35c3(
        connection,
        booking_business_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/solutions/bookingBusinesses/#{booking_business_id}/services/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `booking_business_id` (String.t): The unique identifier of bookingBusiness
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec solutions_booking_businesses_staff_members_get_count7947(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def solutions_booking_businesses_staff_members_get_count7947(
        connection,
        booking_business_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/solutions/bookingBusinesses/#{booking_business_id}/staffMembers/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update bookingAppointment
  Update the properties of a bookingAppointment object in the specified bookingBusiness. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `booking_business_id` (String.t): The unique identifier of bookingBusiness
  - `booking_appointment_id` (String.t): The unique identifier of bookingAppointment
  - `microsoft_graph_booking_appointment` (MicrosoftGraphBookingAppointment): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphBookingAppointment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec solutions_booking_businesses_update_appointments(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphBookingAppointment.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphBookingAppointment.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def solutions_booking_businesses_update_appointments(
        connection,
        booking_business_id,
        booking_appointment_id,
        microsoft_graph_booking_appointment,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/solutions/bookingBusinesses/#{booking_business_id}/appointments/#{booking_appointment_id}"
      )
      |> add_param(:body, :body, microsoft_graph_booking_appointment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphBookingAppointment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property calendarView in solutions

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `booking_business_id` (String.t): The unique identifier of bookingBusiness
  - `booking_appointment_id` (String.t): The unique identifier of bookingAppointment
  - `microsoft_graph_booking_appointment` (MicrosoftGraphBookingAppointment): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphBookingAppointment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec solutions_booking_businesses_update_calendar_view(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphBookingAppointment.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphBookingAppointment.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def solutions_booking_businesses_update_calendar_view(
        connection,
        booking_business_id,
        booking_appointment_id,
        microsoft_graph_booking_appointment,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/solutions/bookingBusinesses/#{booking_business_id}/calendarView/#{booking_appointment_id}"
      )
      |> add_param(:body, :body, microsoft_graph_booking_appointment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphBookingAppointment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update bookingCustomQuestion
  Update the properties of a bookingCustomQuestion object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `booking_business_id` (String.t): The unique identifier of bookingBusiness
  - `booking_custom_question_id` (String.t): The unique identifier of bookingCustomQuestion
  - `microsoft_graph_booking_custom_question` (MicrosoftGraphBookingCustomQuestion): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphBookingCustomQuestion.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec solutions_booking_businesses_update_custom_questions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphBookingCustomQuestion.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphBookingCustomQuestion.t()}
          | {:error, Tesla.Env.t()}
  def solutions_booking_businesses_update_custom_questions(
        connection,
        booking_business_id,
        booking_custom_question_id,
        microsoft_graph_booking_custom_question,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/solutions/bookingBusinesses/#{booking_business_id}/customQuestions/#{booking_custom_question_id}"
      )
      |> add_param(:body, :body, microsoft_graph_booking_custom_question)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphBookingCustomQuestion},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update bookingCustomer
  Update the properties of a bookingCustomer object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `booking_business_id` (String.t): The unique identifier of bookingBusiness
  - `booking_customer_base_id` (String.t): The unique identifier of bookingCustomerBase
  - `microsoft_graph_booking_customer_base` (MicrosoftGraphBookingCustomerBase): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphBookingCustomerBase.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec solutions_booking_businesses_update_customers(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphBookingCustomerBase.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphBookingCustomerBase.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def solutions_booking_businesses_update_customers(
        connection,
        booking_business_id,
        booking_customer_base_id,
        microsoft_graph_booking_customer_base,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/solutions/bookingBusinesses/#{booking_business_id}/customers/#{booking_customer_base_id}"
      )
      |> add_param(:body, :body, microsoft_graph_booking_customer_base)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphBookingCustomerBase},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update bookingservice
  Update the properties of a bookingService object in the specified bookingBusiness. The following are some examples you can customize for a service: - Price - Typical length of an appointment - Reminders - Any time buffer to set up before or finish up after the service - Scheduling policy parameters, such as minimum notice to book or cancel, and whether customers can select specific staff members for an appointment. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `booking_business_id` (String.t): The unique identifier of bookingBusiness
  - `booking_service_id` (String.t): The unique identifier of bookingService
  - `microsoft_graph_booking_service` (MicrosoftGraphBookingService): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphBookingService.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec solutions_booking_businesses_update_services(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphBookingService.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphBookingService.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def solutions_booking_businesses_update_services(
        connection,
        booking_business_id,
        booking_service_id,
        microsoft_graph_booking_service,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/solutions/bookingBusinesses/#{booking_business_id}/services/#{booking_service_id}")
      |> add_param(:body, :body, microsoft_graph_booking_service)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphBookingService},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update bookingstaffmember
  Update the properties of a bookingStaffMember in the specified bookingBusiness. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `booking_business_id` (String.t): The unique identifier of bookingBusiness
  - `booking_staff_member_base_id` (String.t): The unique identifier of bookingStaffMemberBase
  - `microsoft_graph_booking_staff_member_base` (MicrosoftGraphBookingStaffMemberBase): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphBookingStaffMemberBase.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec solutions_booking_businesses_update_staff_members(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphBookingStaffMemberBase.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphBookingStaffMemberBase.t()}
          | {:error, Tesla.Env.t()}
  def solutions_booking_businesses_update_staff_members(
        connection,
        booking_business_id,
        booking_staff_member_base_id,
        microsoft_graph_booking_staff_member_base,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/solutions/bookingBusinesses/#{booking_business_id}/staffMembers/#{booking_staff_member_base_id}"
      )
      |> add_param(:body, :body, microsoft_graph_booking_staff_member_base)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphBookingStaffMemberBase},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create bookingBusiness
  Create a new Microsoft Bookings business in a tenant. This is the first step in setting up a Bookings business where you must specify the business display name. You can include other information such as business address, web site address, and scheduling policy, or set that information later by updating the bookingBusiness. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_booking_business` (MicrosoftGraphBookingBusiness): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphBookingBusiness.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec solutions_create_booking_businesses(
          Tesla.Env.client(),
          MicrosoftGraph.Model.MicrosoftGraphBookingBusiness.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphBookingBusiness.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def solutions_create_booking_businesses(
        connection,
        microsoft_graph_booking_business,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/solutions/bookingBusinesses")
      |> add_param(:body, :body, microsoft_graph_booking_business)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphBookingBusiness},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete bookingBusiness
  Delete a bookingBusiness object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `booking_business_id` (String.t): The unique identifier of bookingBusiness
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec solutions_delete_booking_businesses(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def solutions_delete_booking_businesses(connection, booking_business_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/solutions/bookingBusinesses/#{booking_business_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get bookingBusiness
  Get the properties and relationships of a bookingBusiness object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `booking_business_id` (String.t): The unique identifier of bookingBusiness
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphBookingBusiness.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec solutions_get_booking_businesses(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphBookingBusiness.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def solutions_get_booking_businesses(connection, booking_business_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/solutions/bookingBusinesses/#{booking_business_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphBookingBusiness},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List bookingBusinesses
  Get a collection of bookingBusiness objects that has been created for the tenant. This operation returns only the id and displayName of each Microsoft Bookings business in the collection. For performance considerations, it does not return other properties. You can get the other properties of a Bookings business by specifying its id in a GET operation. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphBookingBusinessCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec solutions_list_booking_businesses(Tesla.Env.client(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphBookingBusinessCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def solutions_list_booking_businesses(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/solutions/bookingBusinesses")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphBookingBusinessCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update bookingbusiness
  Update the properties of a bookingBusiness object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `booking_business_id` (String.t): The unique identifier of bookingBusiness
  - `microsoft_graph_booking_business` (MicrosoftGraphBookingBusiness): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphBookingBusiness.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec solutions_update_booking_businesses(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphBookingBusiness.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphBookingBusiness.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def solutions_update_booking_businesses(
        connection,
        booking_business_id,
        microsoft_graph_booking_business,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/solutions/bookingBusinesses/#{booking_business_id}")
      |> add_param(:body, :body, microsoft_graph_booking_business)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphBookingBusiness},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
