# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.IdentityGovernanceEntitlementManagement do
  @moduledoc """
  API calls for all endpoints tagged `IdentityGovernanceEntitlementManagement`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Delete navigation property entitlementManagement for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_delete_entitlement_management(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_delete_entitlement_management(connection, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to stages for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `approval_id` (String.t): The unique identifier of approval
  - `microsoft_graph_approval_stage` (MicrosoftGraphApprovalStage): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphApprovalStage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_package_assignment_approvals_create_stages(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphApprovalStage.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphApprovalStage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_package_assignment_approvals_create_stages(connection, approval_id, microsoft_graph_approval_stage, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/accessPackageAssignmentApprovals/#{approval_id}/stages")
      |> add_param(:body, :body, microsoft_graph_approval_stage)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphApprovalStage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property stages for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `approval_id` (String.t): The unique identifier of approval
  - `approval_stage_id` (String.t): The unique identifier of approvalStage
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_package_assignment_approvals_delete_stages(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_package_assignment_approvals_delete_stages(connection, approval_id, approval_stage_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/accessPackageAssignmentApprovals/#{approval_id}/stages/#{approval_stage_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_package_assignment_approvals_get_count_ac9b(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_package_assignment_approvals_get_count_ac9b(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackageAssignmentApprovals/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get approvalStage
  Retrieve the properties of an approvalStage object. An approval stage is contained within an approval object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `approval_id` (String.t): The unique identifier of approval
  - `approval_stage_id` (String.t): The unique identifier of approvalStage
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphApprovalStage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_package_assignment_approvals_get_stages(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphApprovalStage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_package_assignment_approvals_get_stages(connection, approval_id, approval_stage_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackageAssignmentApprovals/#{approval_id}/stages/#{approval_stage_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphApprovalStage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List approval stages
  List the approvalStage objects associated with an approval. This API request is made by an approver in the following scenarios: In Microsoft Entra entitlement management, providing the identifier of the access package assignment request. In PIM for groups, providing the identifier of the assignment schedule request. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `approval_id` (String.t): The unique identifier of approval
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphApprovalStageCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_package_assignment_approvals_list_stages(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphApprovalStageCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_package_assignment_approvals_list_stages(connection, approval_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackageAssignmentApprovals/#{approval_id}/stages")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphApprovalStageCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `approval_id` (String.t): The unique identifier of approval
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_package_assignment_approvals_stages_get_count0bb2(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_package_assignment_approvals_stages_get_count0bb2(connection, approval_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackageAssignmentApprovals/#{approval_id}/stages/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update approvalStage
  Approve or deny an approvalStage object in an approval. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `approval_id` (String.t): The unique identifier of approval
  - `approval_stage_id` (String.t): The unique identifier of approvalStage
  - `microsoft_graph_approval_stage` (MicrosoftGraphApprovalStage): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphApprovalStage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_package_assignment_approvals_update_stages(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphApprovalStage.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphApprovalStage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_package_assignment_approvals_update_stages(connection, approval_id, approval_stage_id, microsoft_graph_approval_stage, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/accessPackageAssignmentApprovals/#{approval_id}/stages/#{approval_stage_id}")
      |> add_param(:body, :body, microsoft_graph_approval_stage)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphApprovalStage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_access_packages_incompatible_with_get_count2183(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_access_packages_incompatible_with_get_count2183(connection, access_package_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/accessPackagesIncompatibleWith/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to customExtensionStageSettings for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_assignment_policy_id` (String.t): The unique identifier of accessPackageAssignmentPolicy
  - `microsoft_graph_custom_extension_stage_setting` (MicrosoftGraphCustomExtensionStageSetting): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphCustomExtensionStageSetting.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_assignment_policies_create_custom_extension_stage_settings(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphCustomExtensionStageSetting.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphCustomExtensionStageSetting.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_assignment_policies_create_custom_extension_stage_settings(connection, access_package_id, access_package_assignment_policy_id, microsoft_graph_custom_extension_stage_setting, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/assignmentPolicies/#{access_package_assignment_policy_id}/customExtensionStageSettings")
      |> add_param(:body, :body, microsoft_graph_custom_extension_stage_setting)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphCustomExtensionStageSetting},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to questions for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_assignment_policy_id` (String.t): The unique identifier of accessPackageAssignmentPolicy
  - `microsoft_graph_access_package_question` (MicrosoftGraphAccessPackageQuestion): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageQuestion.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_assignment_policies_create_questions(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageQuestion.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageQuestion.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_assignment_policies_create_questions(connection, access_package_id, access_package_assignment_policy_id, microsoft_graph_access_package_question, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/assignmentPolicies/#{access_package_assignment_policy_id}/questions")
      |> add_param(:body, :body, microsoft_graph_access_package_question)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageQuestion},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_assignment_policy_id` (String.t): The unique identifier of accessPackageAssignmentPolicy
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_assignment_policies_custom_extension_stage_settings_get_count_a366(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_assignment_policies_custom_extension_stage_settings_get_count_a366(connection, access_package_id, access_package_assignment_policy_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/assignmentPolicies/#{access_package_assignment_policy_id}/customExtensionStageSettings/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get customExtension from identityGovernance
  Indicates the custom workflow extension that will be executed at this stage. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_assignment_policy_id` (String.t): The unique identifier of accessPackageAssignmentPolicy
  - `custom_extension_stage_setting_id` (String.t): The unique identifier of customExtensionStageSetting
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphCustomCalloutExtension.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_assignment_policies_custom_extension_stage_settings_get_custom_extension(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphCustomCalloutExtension.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_assignment_policies_custom_extension_stage_settings_get_custom_extension(connection, access_package_id, access_package_assignment_policy_id, custom_extension_stage_setting_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/assignmentPolicies/#{access_package_assignment_policy_id}/customExtensionStageSettings/#{custom_extension_stage_setting_id}/customExtension")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphCustomCalloutExtension},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property customExtensionStageSettings for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_assignment_policy_id` (String.t): The unique identifier of accessPackageAssignmentPolicy
  - `custom_extension_stage_setting_id` (String.t): The unique identifier of customExtensionStageSetting
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_assignment_policies_delete_custom_extension_stage_settings(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_assignment_policies_delete_custom_extension_stage_settings(connection, access_package_id, access_package_assignment_policy_id, custom_extension_stage_setting_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/assignmentPolicies/#{access_package_assignment_policy_id}/customExtensionStageSettings/#{custom_extension_stage_setting_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property questions for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_assignment_policy_id` (String.t): The unique identifier of accessPackageAssignmentPolicy
  - `access_package_question_id` (String.t): The unique identifier of accessPackageQuestion
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_assignment_policies_delete_questions(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_assignment_policies_delete_questions(connection, access_package_id, access_package_assignment_policy_id, access_package_question_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/assignmentPolicies/#{access_package_assignment_policy_id}/questions/#{access_package_question_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get accessPackage from identityGovernance
  Access package containing this policy. Read-only.  Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_assignment_policy_id` (String.t): The unique identifier of accessPackageAssignmentPolicy
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_assignment_policies_get_access_package(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_assignment_policies_get_access_package(connection, access_package_id, access_package_assignment_policy_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/assignmentPolicies/#{access_package_assignment_policy_id}/accessPackage")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get catalog from identityGovernance
  Catalog of the access package containing this policy. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_assignment_policy_id` (String.t): The unique identifier of accessPackageAssignmentPolicy
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageCatalog.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_assignment_policies_get_catalog(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageCatalog.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_assignment_policies_get_catalog(connection, access_package_id, access_package_assignment_policy_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/assignmentPolicies/#{access_package_assignment_policy_id}/catalog")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageCatalog},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_assignment_policies_get_count96f1(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_assignment_policies_get_count96f1(connection, access_package_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/assignmentPolicies/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get customExtensionStageSettings from identityGovernance
  The collection of stages when to execute one or more custom access package workflow extensions. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_assignment_policy_id` (String.t): The unique identifier of accessPackageAssignmentPolicy
  - `custom_extension_stage_setting_id` (String.t): The unique identifier of customExtensionStageSetting
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphCustomExtensionStageSetting.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_assignment_policies_get_custom_extension_stage_settings(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphCustomExtensionStageSetting.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_assignment_policies_get_custom_extension_stage_settings(connection, access_package_id, access_package_assignment_policy_id, custom_extension_stage_setting_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/assignmentPolicies/#{access_package_assignment_policy_id}/customExtensionStageSettings/#{custom_extension_stage_setting_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphCustomExtensionStageSetting},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get questions from identityGovernance
  Questions that are posed to the  requestor.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_assignment_policy_id` (String.t): The unique identifier of accessPackageAssignmentPolicy
  - `access_package_question_id` (String.t): The unique identifier of accessPackageQuestion
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageQuestion.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_assignment_policies_get_questions(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageQuestion.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_assignment_policies_get_questions(connection, access_package_id, access_package_assignment_policy_id, access_package_question_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/assignmentPolicies/#{access_package_assignment_policy_id}/questions/#{access_package_question_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageQuestion},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get customExtensionStageSettings from identityGovernance
  The collection of stages when to execute one or more custom access package workflow extensions. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_assignment_policy_id` (String.t): The unique identifier of accessPackageAssignmentPolicy
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphCustomExtensionStageSettingCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_assignment_policies_list_custom_extension_stage_settings(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphCustomExtensionStageSettingCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_assignment_policies_list_custom_extension_stage_settings(connection, access_package_id, access_package_assignment_policy_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/assignmentPolicies/#{access_package_assignment_policy_id}/customExtensionStageSettings")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphCustomExtensionStageSettingCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get questions from identityGovernance
  Questions that are posed to the  requestor.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_assignment_policy_id` (String.t): The unique identifier of accessPackageAssignmentPolicy
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageQuestionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_assignment_policies_list_questions(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageQuestionCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_assignment_policies_list_questions(connection, access_package_id, access_package_assignment_policy_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/assignmentPolicies/#{access_package_assignment_policy_id}/questions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageQuestionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_assignment_policy_id` (String.t): The unique identifier of accessPackageAssignmentPolicy
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_assignment_policies_questions_get_count00ce(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_assignment_policies_questions_get_count00ce(connection, access_package_id, access_package_assignment_policy_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/assignmentPolicies/#{access_package_assignment_policy_id}/questions/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property customExtensionStageSettings in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_assignment_policy_id` (String.t): The unique identifier of accessPackageAssignmentPolicy
  - `custom_extension_stage_setting_id` (String.t): The unique identifier of customExtensionStageSetting
  - `microsoft_graph_custom_extension_stage_setting` (MicrosoftGraphCustomExtensionStageSetting): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphCustomExtensionStageSetting.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_assignment_policies_update_custom_extension_stage_settings(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphCustomExtensionStageSetting.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphCustomExtensionStageSetting.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_assignment_policies_update_custom_extension_stage_settings(connection, access_package_id, access_package_assignment_policy_id, custom_extension_stage_setting_id, microsoft_graph_custom_extension_stage_setting, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/assignmentPolicies/#{access_package_assignment_policy_id}/customExtensionStageSettings/#{custom_extension_stage_setting_id}")
      |> add_param(:body, :body, microsoft_graph_custom_extension_stage_setting)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphCustomExtensionStageSetting},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property questions in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_assignment_policy_id` (String.t): The unique identifier of accessPackageAssignmentPolicy
  - `access_package_question_id` (String.t): The unique identifier of accessPackageQuestion
  - `microsoft_graph_access_package_question` (MicrosoftGraphAccessPackageQuestion): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageQuestion.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_assignment_policies_update_questions(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageQuestion.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageQuestion.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_assignment_policies_update_questions(connection, access_package_id, access_package_assignment_policy_id, access_package_question_id, microsoft_graph_access_package_question, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/assignmentPolicies/#{access_package_assignment_policy_id}/questions/#{access_package_question_id}")
      |> add_param(:body, :body, microsoft_graph_access_package_question)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageQuestion},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to assignmentPolicies for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `microsoft_graph_access_package_assignment_policy` (MicrosoftGraphAccessPackageAssignmentPolicy): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignmentPolicy.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_create_assignment_policies(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignmentPolicy.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignmentPolicy.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_create_assignment_policies(connection, access_package_id, microsoft_graph_access_package_assignment_policy, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/assignmentPolicies")
      |> add_param(:body, :body, microsoft_graph_access_package_assignment_policy)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignmentPolicy},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Add accessPackage to incompatibleAccessPackages
  Add an accessPackage to the list of access packages that have been marked as incompatible on an accessPackage.   This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `request_body` (%{optional(String.t) => map()}): New navigation property ref value
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_create_ref_incompatible_access_packages(Tesla.Env.client, String.t, %{optional(String.t) => Map.t}, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_create_ref_incompatible_access_packages(connection, access_package_id, request_body, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/incompatibleAccessPackages/$ref")
      |> add_param(:body, :body, request_body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Add group to incompatibleGroups
  Add a group to the list of groups that have been marked as incompatible on an accessPackage.   This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `request_body` (%{optional(String.t) => map()}): New navigation property ref value
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_create_ref_incompatible_groups(Tesla.Env.client, String.t, %{optional(String.t) => Map.t}, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_create_ref_incompatible_groups(connection, access_package_id, request_body, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/incompatibleGroups/$ref")
      |> add_param(:body, :body, request_body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create resourceRoleScope
  Create a new accessPackageResourceRoleScope for adding a resource role to an access package. The access package resource, for a group, an app, or a SharePoint Online site, must already exist in the access package catalog, and the originId for the resource role retrieved from the list of the resource roles. Once you add the resource role scope to the access package, the user will receive this resource role through any current and future access package assignments. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `microsoft_graph_access_package_resource_role_scope` (MicrosoftGraphAccessPackageResourceRoleScope): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_create_resource_role_scopes(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleScope.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleScope.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_create_resource_role_scopes(connection, access_package_id, microsoft_graph_access_package_resource_role_scope, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_role_scope)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property assignmentPolicies for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_assignment_policy_id` (String.t): The unique identifier of accessPackageAssignmentPolicy
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_delete_assignment_policies(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_delete_assignment_policies(connection, access_package_id, access_package_assignment_policy_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/assignmentPolicies/#{access_package_assignment_policy_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Remove accessPackage from incompatibleAccessPackages
  Remove an access package from the list of access packages that have been marked as incompatible on an accessPackage.   This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_id1` (String.t): The unique identifier of accessPackage
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag
    - `:"@id"` (String.t): Delete Uri

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_delete_ref_incompatible_access_packages(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_delete_ref_incompatible_access_packages(connection, access_package_id, access_package_id1, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers,
      :"@id" => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/incompatibleAccessPackages/#{access_package_id1}/$ref")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Remove group from incompatibleGroups
  Remove a group from the list of groups that have been marked as incompatible on an accessPackage.   This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag
    - `:"@id"` (String.t): Delete Uri

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_delete_ref_incompatible_groups(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_delete_ref_incompatible_groups(connection, access_package_id, group_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers,
      :"@id" => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/incompatibleGroups/#{group_id}/$ref")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Remove resourceRoleScope from an accessPackage
  Remove a accessPackageResourceRoleScope from an accessPackage list of resource role scopes. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_delete_resource_role_scopes(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_delete_resource_role_scopes(connection, access_package_id, access_package_resource_role_scope_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get accessPackagesIncompatibleWith from identityGovernance
  The access packages that are incompatible with this package. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_id1` (String.t): The unique identifier of accessPackage
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_get_access_packages_incompatible_with(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_get_access_packages_incompatible_with(connection, access_package_id, access_package_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/accessPackagesIncompatibleWith/#{access_package_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get assignmentPolicies from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_assignment_policy_id` (String.t): The unique identifier of accessPackageAssignmentPolicy
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignmentPolicy.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_get_assignment_policies(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignmentPolicy.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_get_assignment_policies(connection, access_package_id, access_package_assignment_policy_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/assignmentPolicies/#{access_package_assignment_policy_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignmentPolicy},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get catalog from identityGovernance
  Required when creating the access package. Read-only. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageCatalog.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_get_catalog(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageCatalog.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_get_catalog(connection, access_package_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/catalog")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageCatalog},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_get_count87ea(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_get_count87ea(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resourceRoleScopes from identityGovernance
  The resource roles and scopes in this access package.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_get_resource_role_scopes(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleScope.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_get_resource_role_scopes(connection, access_package_id, access_package_resource_role_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_incompatible_access_packages_get_count_c2c1(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_incompatible_access_packages_get_count_c2c1(connection, access_package_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/incompatibleAccessPackages/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_incompatible_groups_get_count30b4(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_incompatible_groups_get_count30b4(connection, access_package_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/incompatibleGroups/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get serviceProvisioningErrors property value

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_incompatible_groups_list_service_provisioning_errors(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_incompatible_groups_list_service_provisioning_errors(connection, access_package_id, group_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/incompatibleGroups/#{group_id}/serviceProvisioningErrors")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `group_id` (String.t): The unique identifier of group
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_incompatible_groups_service_provisioning_errors_get_count072a(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_incompatible_groups_service_provisioning_errors_get_count072a(connection, access_package_id, group_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/incompatibleGroups/#{group_id}/serviceProvisioningErrors/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List accessPackagesIncompatibleWith
  Retrieve a list of the accessPackage objects that have marked a specified accessPackage as incompatible. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_list_access_packages_incompatible_with(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_list_access_packages_incompatible_with(connection, access_package_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/accessPackagesIncompatibleWith")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get assignmentPolicies from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignmentPolicyCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_list_assignment_policies(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignmentPolicyCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_list_assignment_policies(connection, access_package_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/assignmentPolicies")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignmentPolicyCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List incompatibleAccessPackages
  Retrieve a list of the accessPackage objects that have been marked as incompatible on an accessPackage.   This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_list_incompatible_access_packages(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_list_incompatible_access_packages(connection, access_package_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/incompatibleAccessPackages")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List incompatibleGroups
  Retrieve a list of the group objects that have been marked as incompatible on an accessPackage.   This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphGroupCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_list_incompatible_groups(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphGroupCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_list_incompatible_groups(connection, access_package_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/incompatibleGroups")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphGroupCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List incompatibleAccessPackages
  Retrieve a list of the accessPackage objects that have been marked as incompatible on an accessPackage.   This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values

  ### Returns

  - `{:ok, MicrosoftGraph.Model.StringCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_list_ref_incompatible_access_packages(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.StringCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_list_ref_incompatible_access_packages(connection, access_package_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/incompatibleAccessPackages/$ref")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.StringCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List incompatibleGroups
  Retrieve a list of the group objects that have been marked as incompatible on an accessPackage.   This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values

  ### Returns

  - `{:ok, MicrosoftGraph.Model.StringCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_list_ref_incompatible_groups(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.StringCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_list_ref_incompatible_groups(connection, access_package_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/incompatibleGroups/$ref")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.StringCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resourceRoleScopes from identityGovernance
  The resource roles and scopes in this access package.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleScopeCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_list_resource_role_scopes(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleScopeCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_list_resource_role_scopes(connection, access_package_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleScopeCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property role for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_delete_role(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_delete_role(connection, access_package_id, access_package_resource_role_scope_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/role")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property scope for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_delete_scope(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_delete_scope(connection, access_package_id, access_package_resource_role_scope_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_get_count_aec9(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_get_count_aec9(connection, access_package_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get role from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_get_role(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_get_role(connection, access_package_id, access_package_resource_role_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/role")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get scope from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_get_scope(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_get_scope(connection, access_package_id, access_package_resource_role_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property resource for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_role_delete_resource(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_role_delete_resource(connection, access_package_id, access_package_resource_role_scope_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/role/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resource from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_role_get_resource(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_role_get_resource(connection, access_package_id, access_package_resource_role_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/role/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to roles for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `microsoft_graph_access_package_resource_role` (MicrosoftGraphAccessPackageResourceRole): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_role_resource_create_roles(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_role_resource_create_roles(connection, access_package_id, access_package_resource_role_scope_id, microsoft_graph_access_package_resource_role, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/role/resource/roles")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_role)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to scopes for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `microsoft_graph_access_package_resource_scope` (MicrosoftGraphAccessPackageResourceScope): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_role_resource_create_scopes(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_role_resource_create_scopes(connection, access_package_id, access_package_resource_role_scope_id, microsoft_graph_access_package_resource_scope, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/role/resource/scopes")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_scope)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property roles for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_role_resource_delete_roles(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_role_resource_delete_roles(connection, access_package_id, access_package_resource_role_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/role/resource/roles/#{access_package_resource_role_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property scopes for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_role_resource_delete_scopes(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_role_resource_delete_scopes(connection, access_package_id, access_package_resource_role_scope_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/role/resource/scopes/#{access_package_resource_scope_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get environment from identityGovernance
  Contains the environment information for the resource. This can be set using either the @odata.bind annotation or the environment's originId.Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_role_resource_get_environment(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_role_resource_get_environment(connection, access_package_id, access_package_resource_role_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/role/resource/environment")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roles from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_role_resource_get_roles(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_role_resource_get_roles(connection, access_package_id, access_package_resource_role_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/role/resource/roles/#{access_package_resource_role_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get scopes from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_role_resource_get_scopes(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_role_resource_get_scopes(connection, access_package_id, access_package_resource_role_scope_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/role/resource/scopes/#{access_package_resource_scope_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roles from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_role_resource_list_roles(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_role_resource_list_roles(connection, access_package_id, access_package_resource_role_scope_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/role/resource/roles")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get scopes from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_role_resource_list_scopes(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_role_resource_list_scopes(connection, access_package_id, access_package_resource_role_scope_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/role/resource/scopes")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_role_resource_roles_get_count43af(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_role_resource_roles_get_count43af(connection, access_package_id, access_package_resource_role_scope_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/role/resource/roles/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property resource for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_role_resource_scopes_delete_resource(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_role_resource_scopes_delete_resource(connection, access_package_id, access_package_resource_role_scope_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/role/resource/scopes/#{access_package_resource_scope_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_role_resource_scopes_get_count_a183(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_role_resource_scopes_get_count_a183(connection, access_package_id, access_package_resource_role_scope_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/role/resource/scopes/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resource from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_role_resource_scopes_get_resource(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_role_resource_scopes_get_resource(connection, access_package_id, access_package_resource_role_scope_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/role/resource/scopes/#{access_package_resource_scope_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to roles for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `microsoft_graph_access_package_resource_role` (MicrosoftGraphAccessPackageResourceRole): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_role_resource_scopes_resource_create_roles(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_role_resource_scopes_resource_create_roles(connection, access_package_id, access_package_resource_role_scope_id, access_package_resource_scope_id, microsoft_graph_access_package_resource_role, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/role/resource/scopes/#{access_package_resource_scope_id}/resource/roles")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_role)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property roles for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_role_resource_scopes_resource_delete_roles(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_role_resource_scopes_resource_delete_roles(connection, access_package_id, access_package_resource_role_scope_id, access_package_resource_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/role/resource/scopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get environment from identityGovernance
  Contains the environment information for the resource. This can be set using either the @odata.bind annotation or the environment's originId.Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_role_resource_scopes_resource_get_environment(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_role_resource_scopes_resource_get_environment(connection, access_package_id, access_package_resource_role_scope_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/role/resource/scopes/#{access_package_resource_scope_id}/resource/environment")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roles from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_role_resource_scopes_resource_get_roles(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_role_resource_scopes_resource_get_roles(connection, access_package_id, access_package_resource_role_scope_id, access_package_resource_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/role/resource/scopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roles from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_role_resource_scopes_resource_list_roles(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_role_resource_scopes_resource_list_roles(connection, access_package_id, access_package_resource_role_scope_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/role/resource/scopes/#{access_package_resource_scope_id}/resource/roles")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_role_resource_scopes_resource_roles_get_count29b9(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_role_resource_scopes_resource_roles_get_count29b9(connection, access_package_id, access_package_resource_role_scope_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/role/resource/scopes/#{access_package_resource_scope_id}/resource/roles/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property roles in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `microsoft_graph_access_package_resource_role` (MicrosoftGraphAccessPackageResourceRole): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_role_resource_scopes_resource_update_roles(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_role_resource_scopes_resource_update_roles(connection, access_package_id, access_package_resource_role_scope_id, access_package_resource_scope_id, access_package_resource_role_id, microsoft_graph_access_package_resource_role, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/role/resource/scopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_role)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property resource in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `microsoft_graph_access_package_resource` (MicrosoftGraphAccessPackageResource): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_role_resource_scopes_update_resource(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_role_resource_scopes_update_resource(connection, access_package_id, access_package_resource_role_scope_id, access_package_resource_scope_id, microsoft_graph_access_package_resource, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/role/resource/scopes/#{access_package_resource_scope_id}/resource")
      |> add_param(:body, :body, microsoft_graph_access_package_resource)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property roles in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `microsoft_graph_access_package_resource_role` (MicrosoftGraphAccessPackageResourceRole): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_role_resource_update_roles(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_role_resource_update_roles(connection, access_package_id, access_package_resource_role_scope_id, access_package_resource_role_id, microsoft_graph_access_package_resource_role, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/role/resource/roles/#{access_package_resource_role_id}")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_role)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property scopes in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `microsoft_graph_access_package_resource_scope` (MicrosoftGraphAccessPackageResourceScope): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_role_resource_update_scopes(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_role_resource_update_scopes(connection, access_package_id, access_package_resource_role_scope_id, access_package_resource_scope_id, microsoft_graph_access_package_resource_scope, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/role/resource/scopes/#{access_package_resource_scope_id}")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_scope)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property resource in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `microsoft_graph_access_package_resource` (MicrosoftGraphAccessPackageResource): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_role_update_resource(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_role_update_resource(connection, access_package_id, access_package_resource_role_scope_id, microsoft_graph_access_package_resource, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/role/resource")
      |> add_param(:body, :body, microsoft_graph_access_package_resource)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property resource for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_scope_delete_resource(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_scope_delete_resource(connection, access_package_id, access_package_resource_role_scope_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resource from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_scope_get_resource(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_scope_get_resource(connection, access_package_id, access_package_resource_role_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to roles for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `microsoft_graph_access_package_resource_role` (MicrosoftGraphAccessPackageResourceRole): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_scope_resource_create_roles(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_scope_resource_create_roles(connection, access_package_id, access_package_resource_role_scope_id, microsoft_graph_access_package_resource_role, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope/resource/roles")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_role)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to scopes for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `microsoft_graph_access_package_resource_scope` (MicrosoftGraphAccessPackageResourceScope): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_scope_resource_create_scopes(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_scope_resource_create_scopes(connection, access_package_id, access_package_resource_role_scope_id, microsoft_graph_access_package_resource_scope, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope/resource/scopes")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_scope)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property roles for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_scope_resource_delete_roles(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_scope_resource_delete_roles(connection, access_package_id, access_package_resource_role_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope/resource/roles/#{access_package_resource_role_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property scopes for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_scope_resource_delete_scopes(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_scope_resource_delete_scopes(connection, access_package_id, access_package_resource_role_scope_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope/resource/scopes/#{access_package_resource_scope_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get environment from identityGovernance
  Contains the environment information for the resource. This can be set using either the @odata.bind annotation or the environment's originId.Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_scope_resource_get_environment(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_scope_resource_get_environment(connection, access_package_id, access_package_resource_role_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope/resource/environment")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roles from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_scope_resource_get_roles(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_scope_resource_get_roles(connection, access_package_id, access_package_resource_role_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope/resource/roles/#{access_package_resource_role_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get scopes from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_scope_resource_get_scopes(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_scope_resource_get_scopes(connection, access_package_id, access_package_resource_role_scope_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope/resource/scopes/#{access_package_resource_scope_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roles from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_scope_resource_list_roles(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_scope_resource_list_roles(connection, access_package_id, access_package_resource_role_scope_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope/resource/roles")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get scopes from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_scope_resource_list_scopes(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_scope_resource_list_scopes(connection, access_package_id, access_package_resource_role_scope_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope/resource/scopes")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property resource for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_scope_resource_roles_delete_resource(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_scope_resource_roles_delete_resource(connection, access_package_id, access_package_resource_role_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope/resource/roles/#{access_package_resource_role_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_scope_resource_roles_get_count_e406(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_scope_resource_roles_get_count_e406(connection, access_package_id, access_package_resource_role_scope_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope/resource/roles/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resource from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_scope_resource_roles_get_resource(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_scope_resource_roles_get_resource(connection, access_package_id, access_package_resource_role_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope/resource/roles/#{access_package_resource_role_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to scopes for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `microsoft_graph_access_package_resource_scope` (MicrosoftGraphAccessPackageResourceScope): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_scope_resource_roles_resource_create_scopes(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_scope_resource_roles_resource_create_scopes(connection, access_package_id, access_package_resource_role_scope_id, access_package_resource_role_id, microsoft_graph_access_package_resource_scope, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope/resource/roles/#{access_package_resource_role_id}/resource/scopes")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_scope)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property scopes for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_scope_resource_roles_resource_delete_scopes(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_scope_resource_roles_resource_delete_scopes(connection, access_package_id, access_package_resource_role_scope_id, access_package_resource_role_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope/resource/roles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get environment from identityGovernance
  Contains the environment information for the resource. This can be set using either the @odata.bind annotation or the environment's originId.Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_scope_resource_roles_resource_get_environment(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_scope_resource_roles_resource_get_environment(connection, access_package_id, access_package_resource_role_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope/resource/roles/#{access_package_resource_role_id}/resource/environment")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get scopes from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_scope_resource_roles_resource_get_scopes(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_scope_resource_roles_resource_get_scopes(connection, access_package_id, access_package_resource_role_scope_id, access_package_resource_role_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope/resource/roles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get scopes from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_scope_resource_roles_resource_list_scopes(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_scope_resource_roles_resource_list_scopes(connection, access_package_id, access_package_resource_role_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope/resource/roles/#{access_package_resource_role_id}/resource/scopes")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_scope_resource_roles_resource_scopes_get_count85f9(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_scope_resource_roles_resource_scopes_get_count85f9(connection, access_package_id, access_package_resource_role_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope/resource/roles/#{access_package_resource_role_id}/resource/scopes/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property scopes in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `microsoft_graph_access_package_resource_scope` (MicrosoftGraphAccessPackageResourceScope): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_scope_resource_roles_resource_update_scopes(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_scope_resource_roles_resource_update_scopes(connection, access_package_id, access_package_resource_role_scope_id, access_package_resource_role_id, access_package_resource_scope_id, microsoft_graph_access_package_resource_scope, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope/resource/roles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_scope)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property resource in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `microsoft_graph_access_package_resource` (MicrosoftGraphAccessPackageResource): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_scope_resource_roles_update_resource(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_scope_resource_roles_update_resource(connection, access_package_id, access_package_resource_role_scope_id, access_package_resource_role_id, microsoft_graph_access_package_resource, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope/resource/roles/#{access_package_resource_role_id}/resource")
      |> add_param(:body, :body, microsoft_graph_access_package_resource)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_scope_resource_scopes_get_count441e(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_scope_resource_scopes_get_count441e(connection, access_package_id, access_package_resource_role_scope_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope/resource/scopes/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property roles in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `microsoft_graph_access_package_resource_role` (MicrosoftGraphAccessPackageResourceRole): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_scope_resource_update_roles(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_scope_resource_update_roles(connection, access_package_id, access_package_resource_role_scope_id, access_package_resource_role_id, microsoft_graph_access_package_resource_role, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope/resource/roles/#{access_package_resource_role_id}")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_role)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property scopes in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `microsoft_graph_access_package_resource_scope` (MicrosoftGraphAccessPackageResourceScope): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_scope_resource_update_scopes(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_scope_resource_update_scopes(connection, access_package_id, access_package_resource_role_scope_id, access_package_resource_scope_id, microsoft_graph_access_package_resource_scope, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope/resource/scopes/#{access_package_resource_scope_id}")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_scope)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property resource in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `microsoft_graph_access_package_resource` (MicrosoftGraphAccessPackageResource): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_scope_update_resource(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_scope_update_resource(connection, access_package_id, access_package_resource_role_scope_id, microsoft_graph_access_package_resource, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope/resource")
      |> add_param(:body, :body, microsoft_graph_access_package_resource)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property role in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `microsoft_graph_access_package_resource_role` (MicrosoftGraphAccessPackageResourceRole): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_update_role(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_update_role(connection, access_package_id, access_package_resource_role_scope_id, microsoft_graph_access_package_resource_role, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/role")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_role)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property scope in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `microsoft_graph_access_package_resource_scope` (MicrosoftGraphAccessPackageResourceScope): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_resource_role_scopes_update_scope(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_resource_role_scopes_update_scope(connection, access_package_id, access_package_resource_role_scope_id, microsoft_graph_access_package_resource_scope, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_scope)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property assignmentPolicies in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_assignment_policy_id` (String.t): The unique identifier of accessPackageAssignmentPolicy
  - `microsoft_graph_access_package_assignment_policy` (MicrosoftGraphAccessPackageAssignmentPolicy): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignmentPolicy.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_update_assignment_policies(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignmentPolicy.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignmentPolicy.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_update_assignment_policies(connection, access_package_id, access_package_assignment_policy_id, microsoft_graph_access_package_assignment_policy, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/assignmentPolicies/#{access_package_assignment_policy_id}")
      |> add_param(:body, :body, microsoft_graph_access_package_assignment_policy)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignmentPolicy},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property resourceRoleScopes in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `microsoft_graph_access_package_resource_role_scope` (MicrosoftGraphAccessPackageResourceRoleScope): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_access_packages_update_resource_role_scopes(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleScope.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleScope.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_access_packages_update_resource_role_scopes(connection, access_package_id, access_package_resource_role_scope_id, microsoft_graph_access_package_resource_role_scope, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}/resourceRoleScopes/#{access_package_resource_role_scope_id}")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_role_scope)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to customExtensionStageSettings for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_assignment_policy_id` (String.t): The unique identifier of accessPackageAssignmentPolicy
  - `microsoft_graph_custom_extension_stage_setting` (MicrosoftGraphCustomExtensionStageSetting): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphCustomExtensionStageSetting.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_assignment_policies_create_custom_extension_stage_settings(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphCustomExtensionStageSetting.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphCustomExtensionStageSetting.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_assignment_policies_create_custom_extension_stage_settings(connection, access_package_assignment_policy_id, microsoft_graph_custom_extension_stage_setting, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/assignmentPolicies/#{access_package_assignment_policy_id}/customExtensionStageSettings")
      |> add_param(:body, :body, microsoft_graph_custom_extension_stage_setting)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphCustomExtensionStageSetting},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to questions for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_assignment_policy_id` (String.t): The unique identifier of accessPackageAssignmentPolicy
  - `microsoft_graph_access_package_question` (MicrosoftGraphAccessPackageQuestion): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageQuestion.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_assignment_policies_create_questions(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageQuestion.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageQuestion.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_assignment_policies_create_questions(connection, access_package_assignment_policy_id, microsoft_graph_access_package_question, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/assignmentPolicies/#{access_package_assignment_policy_id}/questions")
      |> add_param(:body, :body, microsoft_graph_access_package_question)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageQuestion},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_assignment_policy_id` (String.t): The unique identifier of accessPackageAssignmentPolicy
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_assignment_policies_custom_extension_stage_settings_get_count551d(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_assignment_policies_custom_extension_stage_settings_get_count551d(connection, access_package_assignment_policy_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/assignmentPolicies/#{access_package_assignment_policy_id}/customExtensionStageSettings/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get customExtension from identityGovernance
  Indicates the custom workflow extension that will be executed at this stage. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_assignment_policy_id` (String.t): The unique identifier of accessPackageAssignmentPolicy
  - `custom_extension_stage_setting_id` (String.t): The unique identifier of customExtensionStageSetting
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphCustomCalloutExtension.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_assignment_policies_custom_extension_stage_settings_get_custom_extension(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphCustomCalloutExtension.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_assignment_policies_custom_extension_stage_settings_get_custom_extension(connection, access_package_assignment_policy_id, custom_extension_stage_setting_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/assignmentPolicies/#{access_package_assignment_policy_id}/customExtensionStageSettings/#{custom_extension_stage_setting_id}/customExtension")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphCustomCalloutExtension},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property customExtensionStageSettings for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_assignment_policy_id` (String.t): The unique identifier of accessPackageAssignmentPolicy
  - `custom_extension_stage_setting_id` (String.t): The unique identifier of customExtensionStageSetting
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_assignment_policies_delete_custom_extension_stage_settings(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_assignment_policies_delete_custom_extension_stage_settings(connection, access_package_assignment_policy_id, custom_extension_stage_setting_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/assignmentPolicies/#{access_package_assignment_policy_id}/customExtensionStageSettings/#{custom_extension_stage_setting_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property questions for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_assignment_policy_id` (String.t): The unique identifier of accessPackageAssignmentPolicy
  - `access_package_question_id` (String.t): The unique identifier of accessPackageQuestion
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_assignment_policies_delete_questions(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_assignment_policies_delete_questions(connection, access_package_assignment_policy_id, access_package_question_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/assignmentPolicies/#{access_package_assignment_policy_id}/questions/#{access_package_question_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get accessPackage from identityGovernance
  Access package containing this policy. Read-only.  Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_assignment_policy_id` (String.t): The unique identifier of accessPackageAssignmentPolicy
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_assignment_policies_get_access_package(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_assignment_policies_get_access_package(connection, access_package_assignment_policy_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/assignmentPolicies/#{access_package_assignment_policy_id}/accessPackage")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get catalog from identityGovernance
  Catalog of the access package containing this policy. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_assignment_policy_id` (String.t): The unique identifier of accessPackageAssignmentPolicy
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageCatalog.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_assignment_policies_get_catalog(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageCatalog.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_assignment_policies_get_catalog(connection, access_package_assignment_policy_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/assignmentPolicies/#{access_package_assignment_policy_id}/catalog")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageCatalog},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_assignment_policies_get_count7f35(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_assignment_policies_get_count7f35(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/assignmentPolicies/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get customExtensionStageSettings from identityGovernance
  The collection of stages when to execute one or more custom access package workflow extensions. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_assignment_policy_id` (String.t): The unique identifier of accessPackageAssignmentPolicy
  - `custom_extension_stage_setting_id` (String.t): The unique identifier of customExtensionStageSetting
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphCustomExtensionStageSetting.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_assignment_policies_get_custom_extension_stage_settings(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphCustomExtensionStageSetting.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_assignment_policies_get_custom_extension_stage_settings(connection, access_package_assignment_policy_id, custom_extension_stage_setting_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/assignmentPolicies/#{access_package_assignment_policy_id}/customExtensionStageSettings/#{custom_extension_stage_setting_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphCustomExtensionStageSetting},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get questions from identityGovernance
  Questions that are posed to the  requestor.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_assignment_policy_id` (String.t): The unique identifier of accessPackageAssignmentPolicy
  - `access_package_question_id` (String.t): The unique identifier of accessPackageQuestion
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageQuestion.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_assignment_policies_get_questions(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageQuestion.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_assignment_policies_get_questions(connection, access_package_assignment_policy_id, access_package_question_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/assignmentPolicies/#{access_package_assignment_policy_id}/questions/#{access_package_question_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageQuestion},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get customExtensionStageSettings from identityGovernance
  The collection of stages when to execute one or more custom access package workflow extensions. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_assignment_policy_id` (String.t): The unique identifier of accessPackageAssignmentPolicy
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphCustomExtensionStageSettingCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_assignment_policies_list_custom_extension_stage_settings(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphCustomExtensionStageSettingCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_assignment_policies_list_custom_extension_stage_settings(connection, access_package_assignment_policy_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/assignmentPolicies/#{access_package_assignment_policy_id}/customExtensionStageSettings")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphCustomExtensionStageSettingCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get questions from identityGovernance
  Questions that are posed to the  requestor.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_assignment_policy_id` (String.t): The unique identifier of accessPackageAssignmentPolicy
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageQuestionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_assignment_policies_list_questions(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageQuestionCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_assignment_policies_list_questions(connection, access_package_assignment_policy_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/assignmentPolicies/#{access_package_assignment_policy_id}/questions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageQuestionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_assignment_policy_id` (String.t): The unique identifier of accessPackageAssignmentPolicy
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_assignment_policies_questions_get_count_ce3b(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_assignment_policies_questions_get_count_ce3b(connection, access_package_assignment_policy_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/assignmentPolicies/#{access_package_assignment_policy_id}/questions/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property customExtensionStageSettings in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_assignment_policy_id` (String.t): The unique identifier of accessPackageAssignmentPolicy
  - `custom_extension_stage_setting_id` (String.t): The unique identifier of customExtensionStageSetting
  - `microsoft_graph_custom_extension_stage_setting` (MicrosoftGraphCustomExtensionStageSetting): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphCustomExtensionStageSetting.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_assignment_policies_update_custom_extension_stage_settings(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphCustomExtensionStageSetting.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphCustomExtensionStageSetting.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_assignment_policies_update_custom_extension_stage_settings(connection, access_package_assignment_policy_id, custom_extension_stage_setting_id, microsoft_graph_custom_extension_stage_setting, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/assignmentPolicies/#{access_package_assignment_policy_id}/customExtensionStageSettings/#{custom_extension_stage_setting_id}")
      |> add_param(:body, :body, microsoft_graph_custom_extension_stage_setting)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphCustomExtensionStageSetting},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property questions in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_assignment_policy_id` (String.t): The unique identifier of accessPackageAssignmentPolicy
  - `access_package_question_id` (String.t): The unique identifier of accessPackageQuestion
  - `microsoft_graph_access_package_question` (MicrosoftGraphAccessPackageQuestion): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageQuestion.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_assignment_policies_update_questions(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageQuestion.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageQuestion.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_assignment_policies_update_questions(connection, access_package_assignment_policy_id, access_package_question_id, microsoft_graph_access_package_question, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/assignmentPolicies/#{access_package_assignment_policy_id}/questions/#{access_package_question_id}")
      |> add_param(:body, :body, microsoft_graph_access_package_question)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageQuestion},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get accessPackage from identityGovernance
  The access package associated with the accessPackageAssignmentRequest. An access package defines the collections of resource roles and the policies for how one or more users can get access to those resources. Read-only. Nullable.  Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_assignment_request_id` (String.t): The unique identifier of accessPackageAssignmentRequest
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_assignment_requests_get_access_package(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_assignment_requests_get_access_package(connection, access_package_assignment_request_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/assignmentRequests/#{access_package_assignment_request_id}/accessPackage")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get assignment from identityGovernance
  For a requestType of userAdd or adminAdd, this is an access package assignment requested to be created.  For a requestType of userRemove, adminRemove or systemRemove, this has the id property of an existing assignment to be removed.   Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_assignment_request_id` (String.t): The unique identifier of accessPackageAssignmentRequest
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_assignment_requests_get_assignment(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_assignment_requests_get_assignment(connection, access_package_assignment_request_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/assignmentRequests/#{access_package_assignment_request_id}/assignment")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_assignment_requests_get_count_e1cf(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_assignment_requests_get_count_e1cf(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/assignmentRequests/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get requestor from identityGovernance
  The subject who requested or, if a direct assignment, was assigned. Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_assignment_request_id` (String.t): The unique identifier of accessPackageAssignmentRequest
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageSubject.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_assignment_requests_get_requestor(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageSubject.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_assignment_requests_get_requestor(connection, access_package_assignment_request_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/assignmentRequests/#{access_package_assignment_request_id}/requestor")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageSubject},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get accessPackage from identityGovernance
  Read-only. Nullable. Supports $filter (eq) on the id property and $expand query parameters.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_assignment_id` (String.t): The unique identifier of accessPackageAssignment
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_assignments_get_access_package(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_assignments_get_access_package(connection, access_package_assignment_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/assignments/#{access_package_assignment_id}/accessPackage")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get assignmentPolicy from identityGovernance
  Read-only. Supports $filter (eq) on the id property and $expand query parameters.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_assignment_id` (String.t): The unique identifier of accessPackageAssignment
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignmentPolicy.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_assignments_get_assignment_policy(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignmentPolicy.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_assignments_get_assignment_policy(connection, access_package_assignment_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/assignments/#{access_package_assignment_id}/assignmentPolicy")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignmentPolicy},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_assignments_get_count_bb79(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_assignments_get_count_bb79(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/assignments/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get target from identityGovernance
  The subject of the access package assignment. Read-only. Nullable. Supports $expand. Supports $filter (eq) on objectId.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_assignment_id` (String.t): The unique identifier of accessPackageAssignment
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageSubject.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_assignments_get_target(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageSubject.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_assignments_get_target(connection, access_package_assignment_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/assignments/#{access_package_assignment_id}/target")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageSubject},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_access_packages_get_count_d253(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_access_packages_get_count_d253(connection, access_package_catalog_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/accessPackages/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create accessPackageCustomWorkflowExtension
  Create a new accessPackageAssignmentRequestWorkflowExtension or accessPackageAssignmentWorkflowExtension object and add it to an existing accessPackageCatalog object. You must explicitly provide an @odata.type property that indicates whether the object is an  accessPackageAssignmentRequestWorkflowExtension or an accessPackageAssignmentWorkflowExtension. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `microsoft_graph_custom_callout_extension` (MicrosoftGraphCustomCalloutExtension): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphCustomCalloutExtension.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_create_custom_workflow_extensions(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphCustomCalloutExtension.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphCustomCalloutExtension.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_create_custom_workflow_extensions(connection, access_package_catalog_id, microsoft_graph_custom_callout_extension, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/customWorkflowExtensions")
      |> add_param(:body, :body, microsoft_graph_custom_callout_extension)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphCustomCalloutExtension},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to resourceRoles for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `microsoft_graph_access_package_resource_role` (MicrosoftGraphAccessPackageResourceRole): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_create_resource_roles(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_create_resource_roles(connection, access_package_catalog_id, microsoft_graph_access_package_resource_role, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceRoles")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_role)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to resourceScopes for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `microsoft_graph_access_package_resource_scope` (MicrosoftGraphAccessPackageResourceScope): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_create_resource_scopes(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_create_resource_scopes(connection, access_package_catalog_id, microsoft_graph_access_package_resource_scope, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceScopes")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_scope)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to resources for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `microsoft_graph_access_package_resource` (MicrosoftGraphAccessPackageResource): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_create_resources(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_create_resources(connection, access_package_catalog_id, microsoft_graph_access_package_resource, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resources")
      |> add_param(:body, :body, microsoft_graph_access_package_resource)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_custom_workflow_extensions_get_count_dc25(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_custom_workflow_extensions_get_count_dc25(connection, access_package_catalog_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/customWorkflowExtensions/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete accessPackageAssignmentWorkflowExtension
  Delete an accessPackageAssignmentWorkflowExtension object. The custom workflow extension must first be removed from any associated policies before it can be deleted. Follow these steps to remove the custom workflow extension from any associated policies: This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `custom_callout_extension_id` (String.t): The unique identifier of customCalloutExtension
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_delete_custom_workflow_extensions(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_delete_custom_workflow_extensions(connection, access_package_catalog_id, custom_callout_extension_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/customWorkflowExtensions/#{custom_callout_extension_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property resourceRoles for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_delete_resource_roles(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_delete_resource_roles(connection, access_package_catalog_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceRoles/#{access_package_resource_role_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property resourceScopes for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_delete_resource_scopes(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_delete_resource_scopes(connection, access_package_catalog_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceScopes/#{access_package_resource_scope_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property resources for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_delete_resources(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_delete_resources(connection, access_package_catalog_id, access_package_resource_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resources/#{access_package_resource_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get accessPackages from identityGovernance
  The access packages in this catalog. Read-only. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_get_access_packages(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_get_access_packages(connection, access_package_catalog_id, access_package_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/accessPackages/#{access_package_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_get_count_ec42(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_get_count_ec42(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get accessPackageAssignmentWorkflowExtension
  Read the properties and relationships of an accessPackageAssignmentWorkflowExtension object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `custom_callout_extension_id` (String.t): The unique identifier of customCalloutExtension
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphCustomCalloutExtension.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_get_custom_workflow_extensions(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphCustomCalloutExtension.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_get_custom_workflow_extensions(connection, access_package_catalog_id, custom_callout_extension_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/customWorkflowExtensions/#{custom_callout_extension_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphCustomCalloutExtension},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resourceRoles from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_get_resource_roles(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_get_resource_roles(connection, access_package_catalog_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceRoles/#{access_package_resource_role_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resourceScopes from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_get_resource_scopes(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_get_resource_scopes(connection, access_package_catalog_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceScopes/#{access_package_resource_scope_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resources from identityGovernance
  Access package resources in this catalog.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_get_resources(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_get_resources(connection, access_package_catalog_id, access_package_resource_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resources/#{access_package_resource_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get accessPackages from identityGovernance
  The access packages in this catalog. Read-only. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_list_access_packages(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_list_access_packages(connection, access_package_catalog_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/accessPackages")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List accessPackageCustomWorkflowExtensions
  Get a list of the accessPackageAssignmentRequestWorkflowExtension and accessPackageAssignmentWorkflowExtension objects and their properties. The resulting list includes all the customAccessPackageWorkflowExtension objects for the catalog that the caller has access to read. Each object includes an @odata.type property that indicates whether the object is an  accessPackageAssignmentRequestWorkflowExtension or an accessPackageAssignmentWorkflowExtension. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphCustomCalloutExtensionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_list_custom_workflow_extensions(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphCustomCalloutExtensionCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_list_custom_workflow_extensions(connection, access_package_catalog_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/customWorkflowExtensions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphCustomCalloutExtensionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List resourceRoles
  Retrieve a list of accessPackageResourceRole objects of an accessPackageResource in an accessPackageCatalog. The resource should have been added to the catalog by creating an accessPackageResourceRequest. This list of roles can then be used by the caller to select a role, which is needed when subsequently creating an accessPackageResourceRoleScope. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_list_resource_roles(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_list_resource_roles(connection, access_package_catalog_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceRoles")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resourceScopes from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_list_resource_scopes(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_list_resource_scopes(connection, access_package_catalog_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceScopes")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List resources
  Retrieve a list of accessPackageResource objects in an accessPackageCatalog. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_list_resources(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_list_resources(connection, access_package_catalog_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resources")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property resource for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resource_roles_delete_resource(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resource_roles_delete_resource(connection, access_package_catalog_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceRoles/#{access_package_resource_role_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resource_roles_get_count0b89(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resource_roles_get_count0b89(connection, access_package_catalog_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceRoles/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resource from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resource_roles_get_resource(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resource_roles_get_resource(connection, access_package_catalog_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceRoles/#{access_package_resource_role_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to roles for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `microsoft_graph_access_package_resource_role` (MicrosoftGraphAccessPackageResourceRole): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resource_roles_resource_create_roles(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resource_roles_resource_create_roles(connection, access_package_catalog_id, access_package_resource_role_id, microsoft_graph_access_package_resource_role, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceRoles/#{access_package_resource_role_id}/resource/roles")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_role)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to scopes for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `microsoft_graph_access_package_resource_scope` (MicrosoftGraphAccessPackageResourceScope): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resource_roles_resource_create_scopes(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resource_roles_resource_create_scopes(connection, access_package_catalog_id, access_package_resource_role_id, microsoft_graph_access_package_resource_scope, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceRoles/#{access_package_resource_role_id}/resource/scopes")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_scope)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property roles for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_role_id1` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resource_roles_resource_delete_roles(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resource_roles_resource_delete_roles(connection, access_package_catalog_id, access_package_resource_role_id, access_package_resource_role_id1, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceRoles/#{access_package_resource_role_id}/resource/roles/#{access_package_resource_role_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property scopes for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resource_roles_resource_delete_scopes(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resource_roles_resource_delete_scopes(connection, access_package_catalog_id, access_package_resource_role_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceRoles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get environment from identityGovernance
  Contains the environment information for the resource. This can be set using either the @odata.bind annotation or the environment's originId.Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resource_roles_resource_get_environment(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resource_roles_resource_get_environment(connection, access_package_catalog_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceRoles/#{access_package_resource_role_id}/resource/environment")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roles from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_role_id1` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resource_roles_resource_get_roles(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resource_roles_resource_get_roles(connection, access_package_catalog_id, access_package_resource_role_id, access_package_resource_role_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceRoles/#{access_package_resource_role_id}/resource/roles/#{access_package_resource_role_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get scopes from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resource_roles_resource_get_scopes(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resource_roles_resource_get_scopes(connection, access_package_catalog_id, access_package_resource_role_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceRoles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roles from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resource_roles_resource_list_roles(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resource_roles_resource_list_roles(connection, access_package_catalog_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceRoles/#{access_package_resource_role_id}/resource/roles")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get scopes from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resource_roles_resource_list_scopes(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resource_roles_resource_list_scopes(connection, access_package_catalog_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceRoles/#{access_package_resource_role_id}/resource/scopes")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resource_roles_resource_roles_get_count_caee(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resource_roles_resource_roles_get_count_caee(connection, access_package_catalog_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceRoles/#{access_package_resource_role_id}/resource/roles/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property resource for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resource_roles_resource_scopes_delete_resource(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resource_roles_resource_scopes_delete_resource(connection, access_package_catalog_id, access_package_resource_role_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceRoles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resource_roles_resource_scopes_get_count0bb0(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resource_roles_resource_scopes_get_count0bb0(connection, access_package_catalog_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceRoles/#{access_package_resource_role_id}/resource/scopes/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resource from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resource_roles_resource_scopes_get_resource(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resource_roles_resource_scopes_get_resource(connection, access_package_catalog_id, access_package_resource_role_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceRoles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to roles for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `microsoft_graph_access_package_resource_role` (MicrosoftGraphAccessPackageResourceRole): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resource_roles_resource_scopes_resource_create_roles(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resource_roles_resource_scopes_resource_create_roles(connection, access_package_catalog_id, access_package_resource_role_id, access_package_resource_scope_id, microsoft_graph_access_package_resource_role, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceRoles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}/resource/roles")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_role)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property roles for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id1` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resource_roles_resource_scopes_resource_delete_roles(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resource_roles_resource_scopes_resource_delete_roles(connection, access_package_catalog_id, access_package_resource_role_id, access_package_resource_scope_id, access_package_resource_role_id1, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceRoles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get environment from identityGovernance
  Contains the environment information for the resource. This can be set using either the @odata.bind annotation or the environment's originId.Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resource_roles_resource_scopes_resource_get_environment(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resource_roles_resource_scopes_resource_get_environment(connection, access_package_catalog_id, access_package_resource_role_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceRoles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}/resource/environment")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roles from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id1` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resource_roles_resource_scopes_resource_get_roles(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resource_roles_resource_scopes_resource_get_roles(connection, access_package_catalog_id, access_package_resource_role_id, access_package_resource_scope_id, access_package_resource_role_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceRoles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roles from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resource_roles_resource_scopes_resource_list_roles(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resource_roles_resource_scopes_resource_list_roles(connection, access_package_catalog_id, access_package_resource_role_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceRoles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}/resource/roles")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resource_roles_resource_scopes_resource_roles_get_count_d5ce(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resource_roles_resource_scopes_resource_roles_get_count_d5ce(connection, access_package_catalog_id, access_package_resource_role_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceRoles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}/resource/roles/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property roles in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id1` (String.t): The unique identifier of accessPackageResourceRole
  - `microsoft_graph_access_package_resource_role` (MicrosoftGraphAccessPackageResourceRole): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resource_roles_resource_scopes_resource_update_roles(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resource_roles_resource_scopes_resource_update_roles(connection, access_package_catalog_id, access_package_resource_role_id, access_package_resource_scope_id, access_package_resource_role_id1, microsoft_graph_access_package_resource_role, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceRoles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id1}")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_role)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property resource in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `microsoft_graph_access_package_resource` (MicrosoftGraphAccessPackageResource): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resource_roles_resource_scopes_update_resource(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resource_roles_resource_scopes_update_resource(connection, access_package_catalog_id, access_package_resource_role_id, access_package_resource_scope_id, microsoft_graph_access_package_resource, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceRoles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}/resource")
      |> add_param(:body, :body, microsoft_graph_access_package_resource)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property roles in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_role_id1` (String.t): The unique identifier of accessPackageResourceRole
  - `microsoft_graph_access_package_resource_role` (MicrosoftGraphAccessPackageResourceRole): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resource_roles_resource_update_roles(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resource_roles_resource_update_roles(connection, access_package_catalog_id, access_package_resource_role_id, access_package_resource_role_id1, microsoft_graph_access_package_resource_role, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceRoles/#{access_package_resource_role_id}/resource/roles/#{access_package_resource_role_id1}")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_role)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property scopes in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `microsoft_graph_access_package_resource_scope` (MicrosoftGraphAccessPackageResourceScope): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resource_roles_resource_update_scopes(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resource_roles_resource_update_scopes(connection, access_package_catalog_id, access_package_resource_role_id, access_package_resource_scope_id, microsoft_graph_access_package_resource_scope, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceRoles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_scope)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property resource in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `microsoft_graph_access_package_resource` (MicrosoftGraphAccessPackageResource): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resource_roles_update_resource(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resource_roles_update_resource(connection, access_package_catalog_id, access_package_resource_role_id, microsoft_graph_access_package_resource, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceRoles/#{access_package_resource_role_id}/resource")
      |> add_param(:body, :body, microsoft_graph_access_package_resource)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property resource for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resource_scopes_delete_resource(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resource_scopes_delete_resource(connection, access_package_catalog_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceScopes/#{access_package_resource_scope_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resource_scopes_get_count41be(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resource_scopes_get_count41be(connection, access_package_catalog_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceScopes/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resource from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resource_scopes_get_resource(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resource_scopes_get_resource(connection, access_package_catalog_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceScopes/#{access_package_resource_scope_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to roles for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `microsoft_graph_access_package_resource_role` (MicrosoftGraphAccessPackageResourceRole): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resource_scopes_resource_create_roles(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resource_scopes_resource_create_roles(connection, access_package_catalog_id, access_package_resource_scope_id, microsoft_graph_access_package_resource_role, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceScopes/#{access_package_resource_scope_id}/resource/roles")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_role)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to scopes for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `microsoft_graph_access_package_resource_scope` (MicrosoftGraphAccessPackageResourceScope): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resource_scopes_resource_create_scopes(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resource_scopes_resource_create_scopes(connection, access_package_catalog_id, access_package_resource_scope_id, microsoft_graph_access_package_resource_scope, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceScopes/#{access_package_resource_scope_id}/resource/scopes")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_scope)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property roles for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resource_scopes_resource_delete_roles(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resource_scopes_resource_delete_roles(connection, access_package_catalog_id, access_package_resource_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceScopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property scopes for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_scope_id1` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resource_scopes_resource_delete_scopes(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resource_scopes_resource_delete_scopes(connection, access_package_catalog_id, access_package_resource_scope_id, access_package_resource_scope_id1, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceScopes/#{access_package_resource_scope_id}/resource/scopes/#{access_package_resource_scope_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get environment from identityGovernance
  Contains the environment information for the resource. This can be set using either the @odata.bind annotation or the environment's originId.Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resource_scopes_resource_get_environment(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resource_scopes_resource_get_environment(connection, access_package_catalog_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceScopes/#{access_package_resource_scope_id}/resource/environment")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roles from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resource_scopes_resource_get_roles(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resource_scopes_resource_get_roles(connection, access_package_catalog_id, access_package_resource_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceScopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get scopes from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_scope_id1` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resource_scopes_resource_get_scopes(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resource_scopes_resource_get_scopes(connection, access_package_catalog_id, access_package_resource_scope_id, access_package_resource_scope_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceScopes/#{access_package_resource_scope_id}/resource/scopes/#{access_package_resource_scope_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roles from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resource_scopes_resource_list_roles(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resource_scopes_resource_list_roles(connection, access_package_catalog_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceScopes/#{access_package_resource_scope_id}/resource/roles")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get scopes from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resource_scopes_resource_list_scopes(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resource_scopes_resource_list_scopes(connection, access_package_catalog_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceScopes/#{access_package_resource_scope_id}/resource/scopes")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property resource for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resource_scopes_resource_roles_delete_resource(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resource_scopes_resource_roles_delete_resource(connection, access_package_catalog_id, access_package_resource_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceScopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resource_scopes_resource_roles_get_count61e2(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resource_scopes_resource_roles_get_count61e2(connection, access_package_catalog_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceScopes/#{access_package_resource_scope_id}/resource/roles/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resource from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resource_scopes_resource_roles_get_resource(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resource_scopes_resource_roles_get_resource(connection, access_package_catalog_id, access_package_resource_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceScopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to scopes for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `microsoft_graph_access_package_resource_scope` (MicrosoftGraphAccessPackageResourceScope): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resource_scopes_resource_roles_resource_create_scopes(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resource_scopes_resource_roles_resource_create_scopes(connection, access_package_catalog_id, access_package_resource_scope_id, access_package_resource_role_id, microsoft_graph_access_package_resource_scope, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceScopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}/resource/scopes")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_scope)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property scopes for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id1` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resource_scopes_resource_roles_resource_delete_scopes(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resource_scopes_resource_roles_resource_delete_scopes(connection, access_package_catalog_id, access_package_resource_scope_id, access_package_resource_role_id, access_package_resource_scope_id1, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceScopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get environment from identityGovernance
  Contains the environment information for the resource. This can be set using either the @odata.bind annotation or the environment's originId.Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resource_scopes_resource_roles_resource_get_environment(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resource_scopes_resource_roles_resource_get_environment(connection, access_package_catalog_id, access_package_resource_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceScopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}/resource/environment")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get scopes from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id1` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resource_scopes_resource_roles_resource_get_scopes(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resource_scopes_resource_roles_resource_get_scopes(connection, access_package_catalog_id, access_package_resource_scope_id, access_package_resource_role_id, access_package_resource_scope_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceScopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get scopes from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resource_scopes_resource_roles_resource_list_scopes(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resource_scopes_resource_roles_resource_list_scopes(connection, access_package_catalog_id, access_package_resource_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceScopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}/resource/scopes")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resource_scopes_resource_roles_resource_scopes_get_count_d233(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resource_scopes_resource_roles_resource_scopes_get_count_d233(connection, access_package_catalog_id, access_package_resource_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceScopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}/resource/scopes/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property scopes in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id1` (String.t): The unique identifier of accessPackageResourceScope
  - `microsoft_graph_access_package_resource_scope` (MicrosoftGraphAccessPackageResourceScope): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resource_scopes_resource_roles_resource_update_scopes(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resource_scopes_resource_roles_resource_update_scopes(connection, access_package_catalog_id, access_package_resource_scope_id, access_package_resource_role_id, access_package_resource_scope_id1, microsoft_graph_access_package_resource_scope, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceScopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id1}")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_scope)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property resource in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `microsoft_graph_access_package_resource` (MicrosoftGraphAccessPackageResource): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resource_scopes_resource_roles_update_resource(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resource_scopes_resource_roles_update_resource(connection, access_package_catalog_id, access_package_resource_scope_id, access_package_resource_role_id, microsoft_graph_access_package_resource, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceScopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}/resource")
      |> add_param(:body, :body, microsoft_graph_access_package_resource)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resource_scopes_resource_scopes_get_count8843(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resource_scopes_resource_scopes_get_count8843(connection, access_package_catalog_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceScopes/#{access_package_resource_scope_id}/resource/scopes/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property roles in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `microsoft_graph_access_package_resource_role` (MicrosoftGraphAccessPackageResourceRole): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resource_scopes_resource_update_roles(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resource_scopes_resource_update_roles(connection, access_package_catalog_id, access_package_resource_scope_id, access_package_resource_role_id, microsoft_graph_access_package_resource_role, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceScopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_role)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property scopes in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_scope_id1` (String.t): The unique identifier of accessPackageResourceScope
  - `microsoft_graph_access_package_resource_scope` (MicrosoftGraphAccessPackageResourceScope): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resource_scopes_resource_update_scopes(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resource_scopes_resource_update_scopes(connection, access_package_catalog_id, access_package_resource_scope_id, access_package_resource_scope_id1, microsoft_graph_access_package_resource_scope, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceScopes/#{access_package_resource_scope_id}/resource/scopes/#{access_package_resource_scope_id1}")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_scope)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property resource in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `microsoft_graph_access_package_resource` (MicrosoftGraphAccessPackageResource): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resource_scopes_update_resource(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resource_scopes_update_resource(connection, access_package_catalog_id, access_package_resource_scope_id, microsoft_graph_access_package_resource, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceScopes/#{access_package_resource_scope_id}/resource")
      |> add_param(:body, :body, microsoft_graph_access_package_resource)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to roles for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `microsoft_graph_access_package_resource_role` (MicrosoftGraphAccessPackageResourceRole): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resources_create_roles(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resources_create_roles(connection, access_package_catalog_id, access_package_resource_id, microsoft_graph_access_package_resource_role, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resources/#{access_package_resource_id}/roles")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_role)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to scopes for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `microsoft_graph_access_package_resource_scope` (MicrosoftGraphAccessPackageResourceScope): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resources_create_scopes(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resources_create_scopes(connection, access_package_catalog_id, access_package_resource_id, microsoft_graph_access_package_resource_scope, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resources/#{access_package_resource_id}/scopes")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_scope)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property roles for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resources_delete_roles(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resources_delete_roles(connection, access_package_catalog_id, access_package_resource_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property scopes for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resources_delete_scopes(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resources_delete_scopes(connection, access_package_catalog_id, access_package_resource_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resources_get_count_d7cc(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resources_get_count_d7cc(connection, access_package_catalog_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resources/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get environment from identityGovernance
  Contains the environment information for the resource. This can be set using either the @odata.bind annotation or the environment's originId.Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resources_get_environment(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resources_get_environment(connection, access_package_catalog_id, access_package_resource_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resources/#{access_package_resource_id}/environment")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roles from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resources_get_roles(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resources_get_roles(connection, access_package_catalog_id, access_package_resource_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get scopes from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resources_get_scopes(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resources_get_scopes(connection, access_package_catalog_id, access_package_resource_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roles from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resources_list_roles(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resources_list_roles(connection, access_package_catalog_id, access_package_resource_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resources/#{access_package_resource_id}/roles")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get scopes from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resources_list_scopes(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resources_list_scopes(connection, access_package_catalog_id, access_package_resource_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resources/#{access_package_resource_id}/scopes")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property resource for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resources_roles_delete_resource(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resources_roles_delete_resource(connection, access_package_catalog_id, access_package_resource_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resources_roles_get_count09f2(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resources_roles_get_count09f2(connection, access_package_catalog_id, access_package_resource_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resources/#{access_package_resource_id}/roles/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resource from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resources_roles_get_resource(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resources_roles_get_resource(connection, access_package_catalog_id, access_package_resource_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to scopes for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `microsoft_graph_access_package_resource_scope` (MicrosoftGraphAccessPackageResourceScope): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resources_roles_resource_create_scopes(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resources_roles_resource_create_scopes(connection, access_package_catalog_id, access_package_resource_id, access_package_resource_role_id, microsoft_graph_access_package_resource_scope, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}/resource/scopes")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_scope)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property scopes for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resources_roles_resource_delete_scopes(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resources_roles_resource_delete_scopes(connection, access_package_catalog_id, access_package_resource_id, access_package_resource_role_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get environment from identityGovernance
  Contains the environment information for the resource. This can be set using either the @odata.bind annotation or the environment's originId.Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resources_roles_resource_get_environment(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resources_roles_resource_get_environment(connection, access_package_catalog_id, access_package_resource_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}/resource/environment")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get scopes from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resources_roles_resource_get_scopes(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resources_roles_resource_get_scopes(connection, access_package_catalog_id, access_package_resource_id, access_package_resource_role_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get scopes from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resources_roles_resource_list_scopes(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resources_roles_resource_list_scopes(connection, access_package_catalog_id, access_package_resource_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}/resource/scopes")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property resource for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resources_roles_resource_scopes_delete_resource(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resources_roles_resource_scopes_delete_resource(connection, access_package_catalog_id, access_package_resource_id, access_package_resource_role_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resources_roles_resource_scopes_get_count_d8a6(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resources_roles_resource_scopes_get_count_d8a6(connection, access_package_catalog_id, access_package_resource_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}/resource/scopes/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resource from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resources_roles_resource_scopes_get_resource(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resources_roles_resource_scopes_get_resource(connection, access_package_catalog_id, access_package_resource_id, access_package_resource_role_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get environment from identityGovernance
  Contains the environment information for the resource. This can be set using either the @odata.bind annotation or the environment's originId.Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resources_roles_resource_scopes_resource_get_environment(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resources_roles_resource_scopes_resource_get_environment(connection, access_package_catalog_id, access_package_resource_id, access_package_resource_role_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}/resource/environment")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property resource in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `microsoft_graph_access_package_resource` (MicrosoftGraphAccessPackageResource): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resources_roles_resource_scopes_update_resource(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resources_roles_resource_scopes_update_resource(connection, access_package_catalog_id, access_package_resource_id, access_package_resource_role_id, access_package_resource_scope_id, microsoft_graph_access_package_resource, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}/resource")
      |> add_param(:body, :body, microsoft_graph_access_package_resource)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property scopes in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `microsoft_graph_access_package_resource_scope` (MicrosoftGraphAccessPackageResourceScope): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resources_roles_resource_update_scopes(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resources_roles_resource_update_scopes(connection, access_package_catalog_id, access_package_resource_id, access_package_resource_role_id, access_package_resource_scope_id, microsoft_graph_access_package_resource_scope, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_scope)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property resource in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `microsoft_graph_access_package_resource` (MicrosoftGraphAccessPackageResource): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resources_roles_update_resource(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resources_roles_update_resource(connection, access_package_catalog_id, access_package_resource_id, access_package_resource_role_id, microsoft_graph_access_package_resource, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}/resource")
      |> add_param(:body, :body, microsoft_graph_access_package_resource)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property resource for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resources_scopes_delete_resource(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resources_scopes_delete_resource(connection, access_package_catalog_id, access_package_resource_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resources_scopes_get_count_da5f(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resources_scopes_get_count_da5f(connection, access_package_catalog_id, access_package_resource_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resources/#{access_package_resource_id}/scopes/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resource from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resources_scopes_get_resource(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resources_scopes_get_resource(connection, access_package_catalog_id, access_package_resource_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to roles for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `microsoft_graph_access_package_resource_role` (MicrosoftGraphAccessPackageResourceRole): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resources_scopes_resource_create_roles(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resources_scopes_resource_create_roles(connection, access_package_catalog_id, access_package_resource_id, access_package_resource_scope_id, microsoft_graph_access_package_resource_role, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}/resource/roles")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_role)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property roles for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resources_scopes_resource_delete_roles(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resources_scopes_resource_delete_roles(connection, access_package_catalog_id, access_package_resource_id, access_package_resource_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get environment from identityGovernance
  Contains the environment information for the resource. This can be set using either the @odata.bind annotation or the environment's originId.Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resources_scopes_resource_get_environment(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resources_scopes_resource_get_environment(connection, access_package_catalog_id, access_package_resource_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}/resource/environment")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roles from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resources_scopes_resource_get_roles(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resources_scopes_resource_get_roles(connection, access_package_catalog_id, access_package_resource_id, access_package_resource_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roles from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resources_scopes_resource_list_roles(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resources_scopes_resource_list_roles(connection, access_package_catalog_id, access_package_resource_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}/resource/roles")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property resource for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resources_scopes_resource_roles_delete_resource(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resources_scopes_resource_roles_delete_resource(connection, access_package_catalog_id, access_package_resource_id, access_package_resource_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resources_scopes_resource_roles_get_count8e7a(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resources_scopes_resource_roles_get_count8e7a(connection, access_package_catalog_id, access_package_resource_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}/resource/roles/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resource from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resources_scopes_resource_roles_get_resource(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resources_scopes_resource_roles_get_resource(connection, access_package_catalog_id, access_package_resource_id, access_package_resource_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get environment from identityGovernance
  Contains the environment information for the resource. This can be set using either the @odata.bind annotation or the environment's originId.Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resources_scopes_resource_roles_resource_get_environment(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resources_scopes_resource_roles_resource_get_environment(connection, access_package_catalog_id, access_package_resource_id, access_package_resource_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}/resource/environment")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property resource in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `microsoft_graph_access_package_resource` (MicrosoftGraphAccessPackageResource): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resources_scopes_resource_roles_update_resource(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resources_scopes_resource_roles_update_resource(connection, access_package_catalog_id, access_package_resource_id, access_package_resource_scope_id, access_package_resource_role_id, microsoft_graph_access_package_resource, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}/resource")
      |> add_param(:body, :body, microsoft_graph_access_package_resource)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property roles in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `microsoft_graph_access_package_resource_role` (MicrosoftGraphAccessPackageResourceRole): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resources_scopes_resource_update_roles(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resources_scopes_resource_update_roles(connection, access_package_catalog_id, access_package_resource_id, access_package_resource_scope_id, access_package_resource_role_id, microsoft_graph_access_package_resource_role, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_role)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property resource in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `microsoft_graph_access_package_resource` (MicrosoftGraphAccessPackageResource): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resources_scopes_update_resource(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resources_scopes_update_resource(connection, access_package_catalog_id, access_package_resource_id, access_package_resource_scope_id, microsoft_graph_access_package_resource, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}/resource")
      |> add_param(:body, :body, microsoft_graph_access_package_resource)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property roles in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `microsoft_graph_access_package_resource_role` (MicrosoftGraphAccessPackageResourceRole): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resources_update_roles(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resources_update_roles(connection, access_package_catalog_id, access_package_resource_id, access_package_resource_role_id, microsoft_graph_access_package_resource_role, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_role)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property scopes in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `microsoft_graph_access_package_resource_scope` (MicrosoftGraphAccessPackageResourceScope): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_resources_update_scopes(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_resources_update_scopes(connection, access_package_catalog_id, access_package_resource_id, access_package_resource_scope_id, microsoft_graph_access_package_resource_scope, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_scope)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update accessPackageAssignmentRequestWorkflowExtension
  Update the properties of an accessPackageAssignmentRequestWorkflowExtension object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `custom_callout_extension_id` (String.t): The unique identifier of customCalloutExtension
  - `microsoft_graph_custom_callout_extension` (MicrosoftGraphCustomCalloutExtension): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphCustomCalloutExtension.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_update_custom_workflow_extensions(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphCustomCalloutExtension.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphCustomCalloutExtension.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_update_custom_workflow_extensions(connection, access_package_catalog_id, custom_callout_extension_id, microsoft_graph_custom_callout_extension, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/customWorkflowExtensions/#{custom_callout_extension_id}")
      |> add_param(:body, :body, microsoft_graph_custom_callout_extension)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphCustomCalloutExtension},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property resourceRoles in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `microsoft_graph_access_package_resource_role` (MicrosoftGraphAccessPackageResourceRole): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_update_resource_roles(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_update_resource_roles(connection, access_package_catalog_id, access_package_resource_role_id, microsoft_graph_access_package_resource_role, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceRoles/#{access_package_resource_role_id}")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_role)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property resourceScopes in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `microsoft_graph_access_package_resource_scope` (MicrosoftGraphAccessPackageResourceScope): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_update_resource_scopes(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_update_resource_scopes(connection, access_package_catalog_id, access_package_resource_scope_id, microsoft_graph_access_package_resource_scope, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resourceScopes/#{access_package_resource_scope_id}")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_scope)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property resources in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `microsoft_graph_access_package_resource` (MicrosoftGraphAccessPackageResource): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_catalogs_update_resources(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_catalogs_update_resources(connection, access_package_catalog_id, access_package_resource_id, microsoft_graph_access_package_resource, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}/resources/#{access_package_resource_id}")
      |> add_param(:body, :body, microsoft_graph_access_package_resource)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Add externalSponsors
  Add a user or a group to the connected organization's external sponsors. The external sponsors are a set of users who can approve requests on behalf of other users from that connected organization. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `connected_organization_id` (String.t): The unique identifier of connectedOrganization
  - `request_body` (%{optional(String.t) => map()}): New navigation property ref value
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_connected_organizations_create_ref_external_sponsors(Tesla.Env.client, String.t, %{optional(String.t) => Map.t}, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_connected_organizations_create_ref_external_sponsors(connection, connected_organization_id, request_body, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/connectedOrganizations/#{connected_organization_id}/externalSponsors/$ref")
      |> add_param(:body, :body, request_body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Add internalSponsors
  Add a user or a group to the connected organization's internal sponsors. The internal sponsors are a set of users who can approve requests on behalf of other users from that connected organization. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `connected_organization_id` (String.t): The unique identifier of connectedOrganization
  - `request_body` (%{optional(String.t) => map()}): New navigation property ref value
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_connected_organizations_create_ref_internal_sponsors(Tesla.Env.client, String.t, %{optional(String.t) => Map.t}, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_connected_organizations_create_ref_internal_sponsors(connection, connected_organization_id, request_body, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/connectedOrganizations/#{connected_organization_id}/internalSponsors/$ref")
      |> add_param(:body, :body, request_body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Remove externalSponsors
  Remove a user or a group from the connected organization's external sponsors. The external sponsors are a set of users who can approve requests on behalf of other users from that connected organization. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `connected_organization_id` (String.t): The unique identifier of connectedOrganization
  - `directory_object_id` (String.t): The unique identifier of directoryObject
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag
    - `:"@id"` (String.t): Delete Uri

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_connected_organizations_delete_ref_external_sponsors(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_connected_organizations_delete_ref_external_sponsors(connection, connected_organization_id, directory_object_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers,
      :"@id" => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/connectedOrganizations/#{connected_organization_id}/externalSponsors/#{directory_object_id}/$ref")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Remove internalSponsors
  Remove a user or a group from the connected organization's internal sponsors. The internal sponsors are a set of users who can approve requests on behalf of other users from that connected organization. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `connected_organization_id` (String.t): The unique identifier of connectedOrganization
  - `directory_object_id` (String.t): The unique identifier of directoryObject
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag
    - `:"@id"` (String.t): Delete Uri

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_connected_organizations_delete_ref_internal_sponsors(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_connected_organizations_delete_ref_internal_sponsors(connection, connected_organization_id, directory_object_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers,
      :"@id" => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/connectedOrganizations/#{connected_organization_id}/internalSponsors/#{directory_object_id}/$ref")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `connected_organization_id` (String.t): The unique identifier of connectedOrganization
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_connected_organizations_external_sponsors_get_count3513(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_connected_organizations_external_sponsors_get_count3513(connection, connected_organization_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/connectedOrganizations/#{connected_organization_id}/externalSponsors/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_connected_organizations_get_count03a9(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_connected_organizations_get_count03a9(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/connectedOrganizations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `connected_organization_id` (String.t): The unique identifier of connectedOrganization
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_connected_organizations_internal_sponsors_get_count7123(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_connected_organizations_internal_sponsors_get_count7123(connection, connected_organization_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/connectedOrganizations/#{connected_organization_id}/internalSponsors/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List externalSponsors
  Retrieve a list of a connectedOrganization's external sponsors.  The external sponsors are a set of users who can approve requests on behalf of other users from that connected organization. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `connected_organization_id` (String.t): The unique identifier of connectedOrganization
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObjectCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_connected_organizations_list_external_sponsors(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObjectCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_connected_organizations_list_external_sponsors(connection, connected_organization_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/connectedOrganizations/#{connected_organization_id}/externalSponsors")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDirectoryObjectCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List internalSponsors
  Retrieve a list of a connectedOrganization's internal sponsors.  The internal sponsors are a set of users who can approve requests on behalf of other users from that connected organization. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `connected_organization_id` (String.t): The unique identifier of connectedOrganization
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObjectCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_connected_organizations_list_internal_sponsors(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObjectCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_connected_organizations_list_internal_sponsors(connection, connected_organization_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/connectedOrganizations/#{connected_organization_id}/internalSponsors")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDirectoryObjectCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List externalSponsors
  Retrieve a list of a connectedOrganization's external sponsors.  The external sponsors are a set of users who can approve requests on behalf of other users from that connected organization. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `connected_organization_id` (String.t): The unique identifier of connectedOrganization
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values

  ### Returns

  - `{:ok, MicrosoftGraph.Model.StringCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_connected_organizations_list_ref_external_sponsors(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.StringCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_connected_organizations_list_ref_external_sponsors(connection, connected_organization_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/connectedOrganizations/#{connected_organization_id}/externalSponsors/$ref")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.StringCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List internalSponsors
  Retrieve a list of a connectedOrganization's internal sponsors.  The internal sponsors are a set of users who can approve requests on behalf of other users from that connected organization. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `connected_organization_id` (String.t): The unique identifier of connectedOrganization
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values

  ### Returns

  - `{:ok, MicrosoftGraph.Model.StringCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_connected_organizations_list_ref_internal_sponsors(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.StringCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_connected_organizations_list_ref_internal_sponsors(connection, connected_organization_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/connectedOrganizations/#{connected_organization_id}/internalSponsors/$ref")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.StringCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to accessPackageAssignmentApprovals for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_approval` (MicrosoftGraphApproval): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphApproval.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_create_access_package_assignment_approvals(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphApproval.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphApproval.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_create_access_package_assignment_approvals(connection, microsoft_graph_approval, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/accessPackageAssignmentApprovals")
      |> add_param(:body, :body, microsoft_graph_approval)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphApproval},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create accessPackage
  Create a new accessPackage object. The access package will be added to an existing accessPackageCatalog. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_access_package` (MicrosoftGraphAccessPackage): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_create_access_packages(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphAccessPackage.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_create_access_packages(connection, microsoft_graph_access_package, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/accessPackages")
      |> add_param(:body, :body, microsoft_graph_access_package)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create assignmentPolicies
  In Microsoft Entra entitlement management, create a new accessPackageAssignmentPolicy object.  The request will include a reference to the accessPackage that will contain this policy, which must already exist. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_access_package_assignment_policy` (MicrosoftGraphAccessPackageAssignmentPolicy): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignmentPolicy.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_create_assignment_policies(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignmentPolicy.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignmentPolicy.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_create_assignment_policies(connection, microsoft_graph_access_package_assignment_policy, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/assignmentPolicies")
      |> add_param(:body, :body, microsoft_graph_access_package_assignment_policy)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignmentPolicy},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create accessPackageAssignmentRequest
  In Microsoft Entra Entitlement Management, create a new accessPackageAssignmentRequest object.  This operation is used to assign a user to an access package, update the assignment, or to remove an access package assignment. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_access_package_assignment_request` (MicrosoftGraphAccessPackageAssignmentRequest): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignmentRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_create_assignment_requests(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignmentRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignmentRequest.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_create_assignment_requests(connection, microsoft_graph_access_package_assignment_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/assignmentRequests")
      |> add_param(:body, :body, microsoft_graph_access_package_assignment_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignmentRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to assignments for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_access_package_assignment` (MicrosoftGraphAccessPackageAssignment): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_create_assignments(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignment.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_create_assignments(connection, microsoft_graph_access_package_assignment, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/assignments")
      |> add_param(:body, :body, microsoft_graph_access_package_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create accessPackageCatalog
  Create a new accessPackageCatalog object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_access_package_catalog` (MicrosoftGraphAccessPackageCatalog): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageCatalog.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_create_catalogs(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphAccessPackageCatalog.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageCatalog.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_create_catalogs(connection, microsoft_graph_access_package_catalog, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/catalogs")
      |> add_param(:body, :body, microsoft_graph_access_package_catalog)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageCatalog},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create connectedOrganization
  Create a new connectedOrganization object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_connected_organization` (MicrosoftGraphConnectedOrganization): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphConnectedOrganization.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_create_connected_organizations(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphConnectedOrganization.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphConnectedOrganization.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_create_connected_organizations(connection, microsoft_graph_connected_organization, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/connectedOrganizations")
      |> add_param(:body, :body, microsoft_graph_connected_organization)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphConnectedOrganization},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to resourceEnvironments for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_access_package_resource_environment` (MicrosoftGraphAccessPackageResourceEnvironment): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_create_resource_environments(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_create_resource_environments(connection, microsoft_graph_access_package_resource_environment, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/resourceEnvironments")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_environment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create accessPackageResourceRequest
  Create a new accessPackageResourceRequest object to request the addition of a resource to an access package catalog, update of a resource, or the removal of a resource from a catalog.  A resource must be included in an access package catalog before a role of that resource can be added to an access package. To add a Microsoft Entra group as a resource to a catalog, set the requestType to be adminAdd, and a resource representing the resource. The value of the originSystem property within the resource should be AadGroup and the value of the originId is the identifier of the group. To add a Microsoft Entra application as a resource to a catalog, set the requestType to be adminAdd, and a resource representing the resource. The value of the originSystem property within the resource should be AadApplication and the value of the originId is the identifier of the servicePrincipal. To add a SharePoint Online site an as a resource to a catalog, set the requestType to be adminAdd, and a resource representing the resource. The value of the originSystem property within the resource should be SharePointOnline and the value of the originId is the URI of the site. To remove a resource from a catalog, set the requestType to be adminRemove, and the resource to contain the id of the resource object to be removed.  The resource object can be retrieved using list resources. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_access_package_resource_request` (MicrosoftGraphAccessPackageResourceRequest): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_create_resource_requests(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRequest.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_create_resource_requests(connection, microsoft_graph_access_package_resource_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/resourceRequests")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to resourceRoleScopes for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_access_package_resource_role_scope` (MicrosoftGraphAccessPackageResourceRoleScope): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_create_resource_role_scopes(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleScope.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleScope.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_create_resource_role_scopes(connection, microsoft_graph_access_package_resource_role_scope, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_role_scope)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to resources for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_access_package_resource` (MicrosoftGraphAccessPackageResource): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_create_resources(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_create_resources(connection, microsoft_graph_access_package_resource, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/resources")
      |> add_param(:body, :body, microsoft_graph_access_package_resource)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property accessPackageAssignmentApprovals for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `approval_id` (String.t): The unique identifier of approval
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_delete_access_package_assignment_approvals(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_delete_access_package_assignment_approvals(connection, approval_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/accessPackageAssignmentApprovals/#{approval_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete accessPackage
  Delete an accessPackage object. You cannot delete an access package if it has any accessPackageAssignment. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_delete_access_packages(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_delete_access_packages(connection, access_package_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete accessPackageAssignmentPolicy
  In Microsoft Entra entitlement management, delete an accessPackageAssignmentPolicy. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_assignment_policy_id` (String.t): The unique identifier of accessPackageAssignmentPolicy
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_delete_assignment_policies(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_delete_assignment_policies(connection, access_package_assignment_policy_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/assignmentPolicies/#{access_package_assignment_policy_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete accessPackageAssignmentRequest
  Delete an accessPackageAssignmentRequest object. This request can be made to remove a denied or completed request.  You cannot delete an access package assignment request if it has any accessPackageAssignment objects. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_assignment_request_id` (String.t): The unique identifier of accessPackageAssignmentRequest
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_delete_assignment_requests(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_delete_assignment_requests(connection, access_package_assignment_request_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/assignmentRequests/#{access_package_assignment_request_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property assignments for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_assignment_id` (String.t): The unique identifier of accessPackageAssignment
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_delete_assignments(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_delete_assignments(connection, access_package_assignment_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/assignments/#{access_package_assignment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete accessPackageCatalog
  Delete an accessPackageCatalog. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_delete_catalogs(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_delete_catalogs(connection, access_package_catalog_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete connectedOrganization
  Delete a connectedOrganization object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `connected_organization_id` (String.t): The unique identifier of connectedOrganization
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_delete_connected_organizations(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_delete_connected_organizations(connection, connected_organization_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/connectedOrganizations/#{connected_organization_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property resourceEnvironments for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_environment_id` (String.t): The unique identifier of accessPackageResourceEnvironment
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_delete_resource_environments(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_delete_resource_environments(connection, access_package_resource_environment_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resourceEnvironments/#{access_package_resource_environment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property resourceRequests for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_delete_resource_requests(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_delete_resource_requests(connection, access_package_resource_request_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property resourceRoleScopes for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_delete_resource_role_scopes(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_delete_resource_role_scopes(connection, access_package_resource_role_scope_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property resources for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_delete_resources(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_delete_resources(connection, access_package_resource_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resources/#{access_package_resource_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property settings for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_delete_settings(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_delete_settings(connection, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/settings")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get approval
  Retrieve the properties of an approval object. This API request is made by an approver in the following scenarios: In Microsoft Entra entitlement management, providing the identifier of the access package assignment request. In PIM for groups, providing the identifier of the assignment schedule request. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `approval_id` (String.t): The unique identifier of approval
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphApproval.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_get_access_package_assignment_approvals(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphApproval.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_get_access_package_assignment_approvals(connection, approval_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackageAssignmentApprovals/#{approval_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphApproval},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List resourceRoleScopes
  Retrieve an access package with a list of accessPackageResourceRoleScope objects. These objects represent the resource roles that an access package assigns to each subject. Each object links to an accessPackageResourceRole and an accessPackageResourceScope. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_get_access_packages(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_get_access_packages(connection, access_package_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get accessPackageAssignmentPolicy
  In Microsoft Entra entitlement management, retrieve the properties and relationships of an  accessPackageAssignmentPolicy object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_assignment_policy_id` (String.t): The unique identifier of accessPackageAssignmentPolicy
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignmentPolicy.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_get_assignment_policies(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignmentPolicy.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_get_assignment_policies(connection, access_package_assignment_policy_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/assignmentPolicies/#{access_package_assignment_policy_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignmentPolicy},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get accessPackageAssignmentRequest
  In Microsoft Entra entitlement management, retrieve the properties and relationships of an  accessPackageAssignmentRequest object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_assignment_request_id` (String.t): The unique identifier of accessPackageAssignmentRequest
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignmentRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_get_assignment_requests(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignmentRequest.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_get_assignment_requests(connection, access_package_assignment_request_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/assignmentRequests/#{access_package_assignment_request_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignmentRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get accessPackageAssignment
  In Microsoft Entra entitlement management, retrieve the properties and relationships of an accessPackageAssignment object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_assignment_id` (String.t): The unique identifier of accessPackageAssignment
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_get_assignments(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_get_assignments(connection, access_package_assignment_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/assignments/#{access_package_assignment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get accessPackageCatalog
  Retrieve the properties and relationships of an accessPackageCatalog object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageCatalog.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_get_catalogs(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageCatalog.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_get_catalogs(connection, access_package_catalog_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageCatalog},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get connectedOrganization
  Retrieve the properties and relationships of a connectedOrganization object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `connected_organization_id` (String.t): The unique identifier of connectedOrganization
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphConnectedOrganization.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_get_connected_organizations(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphConnectedOrganization.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_get_connected_organizations(connection, connected_organization_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/connectedOrganizations/#{connected_organization_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphConnectedOrganization},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resourceEnvironments from identityGovernance
  A reference to the geolocation environments in which a resource is located.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_environment_id` (String.t): The unique identifier of accessPackageResourceEnvironment
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_get_resource_environments(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_get_resource_environments(connection, access_package_resource_environment_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceEnvironments/#{access_package_resource_environment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resourceRequests from identityGovernance
  Represents a request to add or remove a resource to or from a catalog respectively.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_get_resource_requests(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRequest.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_get_resource_requests(connection, access_package_resource_request_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resourceRoleScopes from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_get_resource_role_scopes(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleScope.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_get_resource_role_scopes(connection, access_package_resource_role_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resources from identityGovernance
  The resources associated with the catalogs.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_get_resources(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_get_resources(connection, access_package_resource_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resources/#{access_package_resource_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get entitlementManagementSettings
  Retrieve the properties of an entitlementManagementSettings object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEntitlementManagementSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_get_settings(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphEntitlementManagementSettings.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_get_settings(connection, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/settings")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEntitlementManagementSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get approval
  Retrieve the properties of an approval object. This API request is made by an approver in the following scenarios: In Microsoft Entra entitlement management, providing the identifier of the access package assignment request. In PIM for groups, providing the identifier of the assignment schedule request. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphApprovalCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_list_access_package_assignment_approvals(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphApprovalCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_list_access_package_assignment_approvals(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackageAssignmentApprovals")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphApprovalCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List accessPackages
  Retrieve a list of accessPackage objects.  The resulting list includes all the access packages that the caller has access to read, across all catalogs. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_list_access_packages(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_list_access_packages(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/accessPackages")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List assignmentPolicies
  In Microsoft Entra entitlement management, retrieve a list of accessPackageAssignmentPolicy objects. If the delegated user is in a directory role, the resulting list includes all the assignment policies that the caller has access to read, across all catalogs and access packages. If the delegated user is an access package manager or catalog owner, they should instead retrieve the policies for the access packages they can read with list accessPackages by including $expand=accessPackageAssignmentPolicies as a query parameter. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignmentPolicyCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_list_assignment_policies(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignmentPolicyCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_list_assignment_policies(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/assignmentPolicies")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignmentPolicyCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List assignmentRequests
  In Microsoft Entra entitlement management, retrieve a list of accessPackageAssignmentRequest objects.  The resulting list includes all the assignment requests, current and well as expired, that the caller has access to read, across all catalogs and access packages. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignmentRequestCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_list_assignment_requests(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignmentRequestCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_list_assignment_requests(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/assignmentRequests")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignmentRequestCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List assignments
  In Microsoft Entra entitlement management, retrieve a list of accessPackageAssignment objects. For directory-wide administrators, the resulting list includes all the assignments, current and well as expired, that the caller has access to read, across all catalogs and access packages.  If the caller is on behalf of a delegated user who is assigned only to catalog-specific delegated administrative roles, the request must supply a filter to indicate a specific access package, such as: $filter=accessPackage/id eq 'a914b616-e04e-476b-aa37-91038f0b165b'. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignmentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_list_assignments(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignmentCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_list_assignments(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/assignments")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignmentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List catalogs
  Retrieve a list of accessPackageCatalog objects. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageCatalogCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_list_catalogs(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageCatalogCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_list_catalogs(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/catalogs")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageCatalogCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List connectedOrganizations
  Retrieve a list of connectedOrganization objects. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphConnectedOrganizationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_list_connected_organizations(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphConnectedOrganizationCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_list_connected_organizations(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/connectedOrganizations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphConnectedOrganizationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List accessPackageResourceEnvironments
  Retrieve a list of accessPackageResourceEnvironment objects and their properties. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironmentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_list_resource_environments(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironmentCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_list_resource_environments(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceEnvironments")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironmentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List accessPackageResourceRequests
  Retrieve a list of accessPackageResourceRequest objects. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRequestCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_list_resource_requests(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRequestCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_list_resource_requests(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRequestCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resourceRoleScopes from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleScopeCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_list_resource_role_scopes(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleScopeCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_list_resource_role_scopes(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleScopeCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resources from identityGovernance
  The resources associated with the catalogs.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_list_resources(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_list_resources(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resources")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to resources for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_environment_id` (String.t): The unique identifier of accessPackageResourceEnvironment
  - `microsoft_graph_access_package_resource` (MicrosoftGraphAccessPackageResource): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_environments_create_resources(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_environments_create_resources(connection, access_package_resource_environment_id, microsoft_graph_access_package_resource, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/resourceEnvironments/#{access_package_resource_environment_id}/resources")
      |> add_param(:body, :body, microsoft_graph_access_package_resource)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property resources for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_environment_id` (String.t): The unique identifier of accessPackageResourceEnvironment
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_environments_delete_resources(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_environments_delete_resources(connection, access_package_resource_environment_id, access_package_resource_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resourceEnvironments/#{access_package_resource_environment_id}/resources/#{access_package_resource_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_environments_get_count6cd7(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_environments_get_count6cd7(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceEnvironments/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resources from identityGovernance
  Read-only. Required.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_environment_id` (String.t): The unique identifier of accessPackageResourceEnvironment
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_environments_get_resources(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_environments_get_resources(connection, access_package_resource_environment_id, access_package_resource_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceEnvironments/#{access_package_resource_environment_id}/resources/#{access_package_resource_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resources from identityGovernance
  Read-only. Required.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_environment_id` (String.t): The unique identifier of accessPackageResourceEnvironment
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_environments_list_resources(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_environments_list_resources(connection, access_package_resource_environment_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceEnvironments/#{access_package_resource_environment_id}/resources")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to roles for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_environment_id` (String.t): The unique identifier of accessPackageResourceEnvironment
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `microsoft_graph_access_package_resource_role` (MicrosoftGraphAccessPackageResourceRole): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_environments_resources_create_roles(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_environments_resources_create_roles(connection, access_package_resource_environment_id, access_package_resource_id, microsoft_graph_access_package_resource_role, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/resourceEnvironments/#{access_package_resource_environment_id}/resources/#{access_package_resource_id}/roles")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_role)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to scopes for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_environment_id` (String.t): The unique identifier of accessPackageResourceEnvironment
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `microsoft_graph_access_package_resource_scope` (MicrosoftGraphAccessPackageResourceScope): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_environments_resources_create_scopes(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_environments_resources_create_scopes(connection, access_package_resource_environment_id, access_package_resource_id, microsoft_graph_access_package_resource_scope, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/resourceEnvironments/#{access_package_resource_environment_id}/resources/#{access_package_resource_id}/scopes")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_scope)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property roles for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_environment_id` (String.t): The unique identifier of accessPackageResourceEnvironment
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_environments_resources_delete_roles(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_environments_resources_delete_roles(connection, access_package_resource_environment_id, access_package_resource_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resourceEnvironments/#{access_package_resource_environment_id}/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property scopes for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_environment_id` (String.t): The unique identifier of accessPackageResourceEnvironment
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_environments_resources_delete_scopes(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_environments_resources_delete_scopes(connection, access_package_resource_environment_id, access_package_resource_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resourceEnvironments/#{access_package_resource_environment_id}/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_environment_id` (String.t): The unique identifier of accessPackageResourceEnvironment
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_environments_resources_get_count_a39d(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_environments_resources_get_count_a39d(connection, access_package_resource_environment_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceEnvironments/#{access_package_resource_environment_id}/resources/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get environment from identityGovernance
  Contains the environment information for the resource. This can be set using either the @odata.bind annotation or the environment's originId.Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_environment_id` (String.t): The unique identifier of accessPackageResourceEnvironment
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_environments_resources_get_environment(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_environments_resources_get_environment(connection, access_package_resource_environment_id, access_package_resource_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceEnvironments/#{access_package_resource_environment_id}/resources/#{access_package_resource_id}/environment")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roles from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_environment_id` (String.t): The unique identifier of accessPackageResourceEnvironment
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_environments_resources_get_roles(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_environments_resources_get_roles(connection, access_package_resource_environment_id, access_package_resource_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceEnvironments/#{access_package_resource_environment_id}/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get scopes from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_environment_id` (String.t): The unique identifier of accessPackageResourceEnvironment
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_environments_resources_get_scopes(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_environments_resources_get_scopes(connection, access_package_resource_environment_id, access_package_resource_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceEnvironments/#{access_package_resource_environment_id}/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roles from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_environment_id` (String.t): The unique identifier of accessPackageResourceEnvironment
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_environments_resources_list_roles(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_environments_resources_list_roles(connection, access_package_resource_environment_id, access_package_resource_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceEnvironments/#{access_package_resource_environment_id}/resources/#{access_package_resource_id}/roles")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get scopes from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_environment_id` (String.t): The unique identifier of accessPackageResourceEnvironment
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_environments_resources_list_scopes(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_environments_resources_list_scopes(connection, access_package_resource_environment_id, access_package_resource_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceEnvironments/#{access_package_resource_environment_id}/resources/#{access_package_resource_id}/scopes")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property resource for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_environment_id` (String.t): The unique identifier of accessPackageResourceEnvironment
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_environments_resources_roles_delete_resource(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_environments_resources_roles_delete_resource(connection, access_package_resource_environment_id, access_package_resource_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resourceEnvironments/#{access_package_resource_environment_id}/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_environment_id` (String.t): The unique identifier of accessPackageResourceEnvironment
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_environments_resources_roles_get_count_c688(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_environments_resources_roles_get_count_c688(connection, access_package_resource_environment_id, access_package_resource_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceEnvironments/#{access_package_resource_environment_id}/resources/#{access_package_resource_id}/roles/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resource from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_environment_id` (String.t): The unique identifier of accessPackageResourceEnvironment
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_environments_resources_roles_get_resource(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_environments_resources_roles_get_resource(connection, access_package_resource_environment_id, access_package_resource_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceEnvironments/#{access_package_resource_environment_id}/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to scopes for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_environment_id` (String.t): The unique identifier of accessPackageResourceEnvironment
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `microsoft_graph_access_package_resource_scope` (MicrosoftGraphAccessPackageResourceScope): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_environments_resources_roles_resource_create_scopes(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_environments_resources_roles_resource_create_scopes(connection, access_package_resource_environment_id, access_package_resource_id, access_package_resource_role_id, microsoft_graph_access_package_resource_scope, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/resourceEnvironments/#{access_package_resource_environment_id}/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}/resource/scopes")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_scope)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property scopes for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_environment_id` (String.t): The unique identifier of accessPackageResourceEnvironment
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_environments_resources_roles_resource_delete_scopes(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_environments_resources_roles_resource_delete_scopes(connection, access_package_resource_environment_id, access_package_resource_id, access_package_resource_role_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resourceEnvironments/#{access_package_resource_environment_id}/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get environment from identityGovernance
  Contains the environment information for the resource. This can be set using either the @odata.bind annotation or the environment's originId.Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_environment_id` (String.t): The unique identifier of accessPackageResourceEnvironment
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_environments_resources_roles_resource_get_environment(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_environments_resources_roles_resource_get_environment(connection, access_package_resource_environment_id, access_package_resource_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceEnvironments/#{access_package_resource_environment_id}/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}/resource/environment")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get scopes from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_environment_id` (String.t): The unique identifier of accessPackageResourceEnvironment
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_environments_resources_roles_resource_get_scopes(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_environments_resources_roles_resource_get_scopes(connection, access_package_resource_environment_id, access_package_resource_id, access_package_resource_role_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceEnvironments/#{access_package_resource_environment_id}/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get scopes from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_environment_id` (String.t): The unique identifier of accessPackageResourceEnvironment
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_environments_resources_roles_resource_list_scopes(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_environments_resources_roles_resource_list_scopes(connection, access_package_resource_environment_id, access_package_resource_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceEnvironments/#{access_package_resource_environment_id}/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}/resource/scopes")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property resource for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_environment_id` (String.t): The unique identifier of accessPackageResourceEnvironment
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_environments_resources_roles_resource_scopes_delete_resource(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_environments_resources_roles_resource_scopes_delete_resource(connection, access_package_resource_environment_id, access_package_resource_id, access_package_resource_role_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resourceEnvironments/#{access_package_resource_environment_id}/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_environment_id` (String.t): The unique identifier of accessPackageResourceEnvironment
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_environments_resources_roles_resource_scopes_get_count_c193(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_environments_resources_roles_resource_scopes_get_count_c193(connection, access_package_resource_environment_id, access_package_resource_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceEnvironments/#{access_package_resource_environment_id}/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}/resource/scopes/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resource from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_environment_id` (String.t): The unique identifier of accessPackageResourceEnvironment
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_environments_resources_roles_resource_scopes_get_resource(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_environments_resources_roles_resource_scopes_get_resource(connection, access_package_resource_environment_id, access_package_resource_id, access_package_resource_role_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceEnvironments/#{access_package_resource_environment_id}/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get environment from identityGovernance
  Contains the environment information for the resource. This can be set using either the @odata.bind annotation or the environment's originId.Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_environment_id` (String.t): The unique identifier of accessPackageResourceEnvironment
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_environments_resources_roles_resource_scopes_resource_get_environment(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_environments_resources_roles_resource_scopes_resource_get_environment(connection, access_package_resource_environment_id, access_package_resource_id, access_package_resource_role_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceEnvironments/#{access_package_resource_environment_id}/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}/resource/environment")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property resource in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_environment_id` (String.t): The unique identifier of accessPackageResourceEnvironment
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `microsoft_graph_access_package_resource` (MicrosoftGraphAccessPackageResource): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_environments_resources_roles_resource_scopes_update_resource(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_environments_resources_roles_resource_scopes_update_resource(connection, access_package_resource_environment_id, access_package_resource_id, access_package_resource_role_id, access_package_resource_scope_id, microsoft_graph_access_package_resource, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resourceEnvironments/#{access_package_resource_environment_id}/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}/resource")
      |> add_param(:body, :body, microsoft_graph_access_package_resource)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property scopes in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_environment_id` (String.t): The unique identifier of accessPackageResourceEnvironment
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `microsoft_graph_access_package_resource_scope` (MicrosoftGraphAccessPackageResourceScope): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_environments_resources_roles_resource_update_scopes(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_environments_resources_roles_resource_update_scopes(connection, access_package_resource_environment_id, access_package_resource_id, access_package_resource_role_id, access_package_resource_scope_id, microsoft_graph_access_package_resource_scope, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resourceEnvironments/#{access_package_resource_environment_id}/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_scope)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property resource in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_environment_id` (String.t): The unique identifier of accessPackageResourceEnvironment
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `microsoft_graph_access_package_resource` (MicrosoftGraphAccessPackageResource): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_environments_resources_roles_update_resource(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_environments_resources_roles_update_resource(connection, access_package_resource_environment_id, access_package_resource_id, access_package_resource_role_id, microsoft_graph_access_package_resource, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resourceEnvironments/#{access_package_resource_environment_id}/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}/resource")
      |> add_param(:body, :body, microsoft_graph_access_package_resource)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property resource for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_environment_id` (String.t): The unique identifier of accessPackageResourceEnvironment
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_environments_resources_scopes_delete_resource(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_environments_resources_scopes_delete_resource(connection, access_package_resource_environment_id, access_package_resource_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resourceEnvironments/#{access_package_resource_environment_id}/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_environment_id` (String.t): The unique identifier of accessPackageResourceEnvironment
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_environments_resources_scopes_get_count_a9d8(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_environments_resources_scopes_get_count_a9d8(connection, access_package_resource_environment_id, access_package_resource_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceEnvironments/#{access_package_resource_environment_id}/resources/#{access_package_resource_id}/scopes/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resource from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_environment_id` (String.t): The unique identifier of accessPackageResourceEnvironment
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_environments_resources_scopes_get_resource(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_environments_resources_scopes_get_resource(connection, access_package_resource_environment_id, access_package_resource_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceEnvironments/#{access_package_resource_environment_id}/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to roles for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_environment_id` (String.t): The unique identifier of accessPackageResourceEnvironment
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `microsoft_graph_access_package_resource_role` (MicrosoftGraphAccessPackageResourceRole): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_environments_resources_scopes_resource_create_roles(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_environments_resources_scopes_resource_create_roles(connection, access_package_resource_environment_id, access_package_resource_id, access_package_resource_scope_id, microsoft_graph_access_package_resource_role, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/resourceEnvironments/#{access_package_resource_environment_id}/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}/resource/roles")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_role)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property roles for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_environment_id` (String.t): The unique identifier of accessPackageResourceEnvironment
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_environments_resources_scopes_resource_delete_roles(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_environments_resources_scopes_resource_delete_roles(connection, access_package_resource_environment_id, access_package_resource_id, access_package_resource_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resourceEnvironments/#{access_package_resource_environment_id}/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get environment from identityGovernance
  Contains the environment information for the resource. This can be set using either the @odata.bind annotation or the environment's originId.Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_environment_id` (String.t): The unique identifier of accessPackageResourceEnvironment
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_environments_resources_scopes_resource_get_environment(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_environments_resources_scopes_resource_get_environment(connection, access_package_resource_environment_id, access_package_resource_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceEnvironments/#{access_package_resource_environment_id}/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}/resource/environment")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roles from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_environment_id` (String.t): The unique identifier of accessPackageResourceEnvironment
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_environments_resources_scopes_resource_get_roles(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_environments_resources_scopes_resource_get_roles(connection, access_package_resource_environment_id, access_package_resource_id, access_package_resource_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceEnvironments/#{access_package_resource_environment_id}/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roles from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_environment_id` (String.t): The unique identifier of accessPackageResourceEnvironment
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_environments_resources_scopes_resource_list_roles(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_environments_resources_scopes_resource_list_roles(connection, access_package_resource_environment_id, access_package_resource_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceEnvironments/#{access_package_resource_environment_id}/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}/resource/roles")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property resource for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_environment_id` (String.t): The unique identifier of accessPackageResourceEnvironment
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_environments_resources_scopes_resource_roles_delete_resource(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_environments_resources_scopes_resource_roles_delete_resource(connection, access_package_resource_environment_id, access_package_resource_id, access_package_resource_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resourceEnvironments/#{access_package_resource_environment_id}/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_environment_id` (String.t): The unique identifier of accessPackageResourceEnvironment
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_environments_resources_scopes_resource_roles_get_count_aef4(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_environments_resources_scopes_resource_roles_get_count_aef4(connection, access_package_resource_environment_id, access_package_resource_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceEnvironments/#{access_package_resource_environment_id}/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}/resource/roles/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resource from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_environment_id` (String.t): The unique identifier of accessPackageResourceEnvironment
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_environments_resources_scopes_resource_roles_get_resource(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_environments_resources_scopes_resource_roles_get_resource(connection, access_package_resource_environment_id, access_package_resource_id, access_package_resource_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceEnvironments/#{access_package_resource_environment_id}/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get environment from identityGovernance
  Contains the environment information for the resource. This can be set using either the @odata.bind annotation or the environment's originId.Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_environment_id` (String.t): The unique identifier of accessPackageResourceEnvironment
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_environments_resources_scopes_resource_roles_resource_get_environment(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_environments_resources_scopes_resource_roles_resource_get_environment(connection, access_package_resource_environment_id, access_package_resource_id, access_package_resource_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceEnvironments/#{access_package_resource_environment_id}/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}/resource/environment")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property resource in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_environment_id` (String.t): The unique identifier of accessPackageResourceEnvironment
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `microsoft_graph_access_package_resource` (MicrosoftGraphAccessPackageResource): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_environments_resources_scopes_resource_roles_update_resource(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_environments_resources_scopes_resource_roles_update_resource(connection, access_package_resource_environment_id, access_package_resource_id, access_package_resource_scope_id, access_package_resource_role_id, microsoft_graph_access_package_resource, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resourceEnvironments/#{access_package_resource_environment_id}/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}/resource")
      |> add_param(:body, :body, microsoft_graph_access_package_resource)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property roles in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_environment_id` (String.t): The unique identifier of accessPackageResourceEnvironment
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `microsoft_graph_access_package_resource_role` (MicrosoftGraphAccessPackageResourceRole): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_environments_resources_scopes_resource_update_roles(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_environments_resources_scopes_resource_update_roles(connection, access_package_resource_environment_id, access_package_resource_id, access_package_resource_scope_id, access_package_resource_role_id, microsoft_graph_access_package_resource_role, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resourceEnvironments/#{access_package_resource_environment_id}/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_role)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property resource in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_environment_id` (String.t): The unique identifier of accessPackageResourceEnvironment
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `microsoft_graph_access_package_resource` (MicrosoftGraphAccessPackageResource): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_environments_resources_scopes_update_resource(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_environments_resources_scopes_update_resource(connection, access_package_resource_environment_id, access_package_resource_id, access_package_resource_scope_id, microsoft_graph_access_package_resource, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resourceEnvironments/#{access_package_resource_environment_id}/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}/resource")
      |> add_param(:body, :body, microsoft_graph_access_package_resource)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property roles in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_environment_id` (String.t): The unique identifier of accessPackageResourceEnvironment
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `microsoft_graph_access_package_resource_role` (MicrosoftGraphAccessPackageResourceRole): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_environments_resources_update_roles(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_environments_resources_update_roles(connection, access_package_resource_environment_id, access_package_resource_id, access_package_resource_role_id, microsoft_graph_access_package_resource_role, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resourceEnvironments/#{access_package_resource_environment_id}/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_role)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property scopes in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_environment_id` (String.t): The unique identifier of accessPackageResourceEnvironment
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `microsoft_graph_access_package_resource_scope` (MicrosoftGraphAccessPackageResourceScope): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_environments_resources_update_scopes(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_environments_resources_update_scopes(connection, access_package_resource_environment_id, access_package_resource_id, access_package_resource_scope_id, microsoft_graph_access_package_resource_scope, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resourceEnvironments/#{access_package_resource_environment_id}/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_scope)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property resources in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_environment_id` (String.t): The unique identifier of accessPackageResourceEnvironment
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `microsoft_graph_access_package_resource` (MicrosoftGraphAccessPackageResource): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_environments_update_resources(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_environments_update_resources(connection, access_package_resource_environment_id, access_package_resource_id, microsoft_graph_access_package_resource, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resourceEnvironments/#{access_package_resource_environment_id}/resources/#{access_package_resource_id}")
      |> add_param(:body, :body, microsoft_graph_access_package_resource)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_access_packages_get_count_c982(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_access_packages_get_count_c982(connection, access_package_resource_request_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/accessPackages/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create accessPackageCustomWorkflowExtension
  Create a new accessPackageAssignmentRequestWorkflowExtension or accessPackageAssignmentWorkflowExtension object and add it to an existing accessPackageCatalog object. You must explicitly provide an @odata.type property that indicates whether the object is an  accessPackageAssignmentRequestWorkflowExtension or an accessPackageAssignmentWorkflowExtension. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `microsoft_graph_custom_callout_extension` (MicrosoftGraphCustomCalloutExtension): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphCustomCalloutExtension.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_create_custom_workflow_extensions(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphCustomCalloutExtension.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphCustomCalloutExtension.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_create_custom_workflow_extensions(connection, access_package_resource_request_id, microsoft_graph_custom_callout_extension, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/customWorkflowExtensions")
      |> add_param(:body, :body, microsoft_graph_custom_callout_extension)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphCustomCalloutExtension},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to resourceRoles for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `microsoft_graph_access_package_resource_role` (MicrosoftGraphAccessPackageResourceRole): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_create_resource_roles(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_create_resource_roles(connection, access_package_resource_request_id, microsoft_graph_access_package_resource_role, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceRoles")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_role)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to resourceScopes for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `microsoft_graph_access_package_resource_scope` (MicrosoftGraphAccessPackageResourceScope): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_create_resource_scopes(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_create_resource_scopes(connection, access_package_resource_request_id, microsoft_graph_access_package_resource_scope, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceScopes")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_scope)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to resources for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `microsoft_graph_access_package_resource` (MicrosoftGraphAccessPackageResource): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_create_resources(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_create_resources(connection, access_package_resource_request_id, microsoft_graph_access_package_resource, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resources")
      |> add_param(:body, :body, microsoft_graph_access_package_resource)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_custom_workflow_extensions_get_count_a166(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_custom_workflow_extensions_get_count_a166(connection, access_package_resource_request_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/customWorkflowExtensions/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete accessPackageAssignmentWorkflowExtension
  Delete an accessPackageAssignmentWorkflowExtension object. The custom workflow extension must first be removed from any associated policies before it can be deleted. Follow these steps to remove the custom workflow extension from any associated policies: This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `custom_callout_extension_id` (String.t): The unique identifier of customCalloutExtension
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_delete_custom_workflow_extensions(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_delete_custom_workflow_extensions(connection, access_package_resource_request_id, custom_callout_extension_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/customWorkflowExtensions/#{custom_callout_extension_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property resourceRoles for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_delete_resource_roles(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_delete_resource_roles(connection, access_package_resource_request_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceRoles/#{access_package_resource_role_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property resourceScopes for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_delete_resource_scopes(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_delete_resource_scopes(connection, access_package_resource_request_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceScopes/#{access_package_resource_scope_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property resources for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_delete_resources(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_delete_resources(connection, access_package_resource_request_id, access_package_resource_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resources/#{access_package_resource_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get accessPackages from identityGovernance
  The access packages in this catalog. Read-only. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_get_access_packages(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_get_access_packages(connection, access_package_resource_request_id, access_package_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/accessPackages/#{access_package_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get accessPackageAssignmentWorkflowExtension
  Read the properties and relationships of an accessPackageAssignmentWorkflowExtension object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `custom_callout_extension_id` (String.t): The unique identifier of customCalloutExtension
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphCustomCalloutExtension.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_get_custom_workflow_extensions(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphCustomCalloutExtension.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_get_custom_workflow_extensions(connection, access_package_resource_request_id, custom_callout_extension_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/customWorkflowExtensions/#{custom_callout_extension_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphCustomCalloutExtension},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resourceRoles from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_get_resource_roles(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_get_resource_roles(connection, access_package_resource_request_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceRoles/#{access_package_resource_role_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resourceScopes from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_get_resource_scopes(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_get_resource_scopes(connection, access_package_resource_request_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceScopes/#{access_package_resource_scope_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resources from identityGovernance
  Access package resources in this catalog.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_get_resources(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_get_resources(connection, access_package_resource_request_id, access_package_resource_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resources/#{access_package_resource_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get accessPackages from identityGovernance
  The access packages in this catalog. Read-only. Nullable.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_list_access_packages(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_list_access_packages(connection, access_package_resource_request_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/accessPackages")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List accessPackageCustomWorkflowExtensions
  Get a list of the accessPackageAssignmentRequestWorkflowExtension and accessPackageAssignmentWorkflowExtension objects and their properties. The resulting list includes all the customAccessPackageWorkflowExtension objects for the catalog that the caller has access to read. Each object includes an @odata.type property that indicates whether the object is an  accessPackageAssignmentRequestWorkflowExtension or an accessPackageAssignmentWorkflowExtension. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphCustomCalloutExtensionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_list_custom_workflow_extensions(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphCustomCalloutExtensionCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_list_custom_workflow_extensions(connection, access_package_resource_request_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/customWorkflowExtensions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphCustomCalloutExtensionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List resourceRoles
  Retrieve a list of accessPackageResourceRole objects of an accessPackageResource in an accessPackageCatalog. The resource should have been added to the catalog by creating an accessPackageResourceRequest. This list of roles can then be used by the caller to select a role, which is needed when subsequently creating an accessPackageResourceRoleScope. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_list_resource_roles(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_list_resource_roles(connection, access_package_resource_request_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceRoles")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resourceScopes from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_list_resource_scopes(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_list_resource_scopes(connection, access_package_resource_request_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceScopes")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List resources
  Retrieve a list of accessPackageResource objects in an accessPackageCatalog. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_list_resources(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_list_resources(connection, access_package_resource_request_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resources")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property resource for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resource_roles_delete_resource(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resource_roles_delete_resource(connection, access_package_resource_request_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceRoles/#{access_package_resource_role_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resource_roles_get_count416b(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resource_roles_get_count416b(connection, access_package_resource_request_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceRoles/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resource from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resource_roles_get_resource(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resource_roles_get_resource(connection, access_package_resource_request_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceRoles/#{access_package_resource_role_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to roles for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `microsoft_graph_access_package_resource_role` (MicrosoftGraphAccessPackageResourceRole): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resource_roles_resource_create_roles(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resource_roles_resource_create_roles(connection, access_package_resource_request_id, access_package_resource_role_id, microsoft_graph_access_package_resource_role, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceRoles/#{access_package_resource_role_id}/resource/roles")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_role)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to scopes for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `microsoft_graph_access_package_resource_scope` (MicrosoftGraphAccessPackageResourceScope): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resource_roles_resource_create_scopes(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resource_roles_resource_create_scopes(connection, access_package_resource_request_id, access_package_resource_role_id, microsoft_graph_access_package_resource_scope, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceRoles/#{access_package_resource_role_id}/resource/scopes")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_scope)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property roles for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_role_id1` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resource_roles_resource_delete_roles(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resource_roles_resource_delete_roles(connection, access_package_resource_request_id, access_package_resource_role_id, access_package_resource_role_id1, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceRoles/#{access_package_resource_role_id}/resource/roles/#{access_package_resource_role_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property scopes for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resource_roles_resource_delete_scopes(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resource_roles_resource_delete_scopes(connection, access_package_resource_request_id, access_package_resource_role_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceRoles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get environment from identityGovernance
  Contains the environment information for the resource. This can be set using either the @odata.bind annotation or the environment's originId.Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resource_roles_resource_get_environment(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resource_roles_resource_get_environment(connection, access_package_resource_request_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceRoles/#{access_package_resource_role_id}/resource/environment")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roles from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_role_id1` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resource_roles_resource_get_roles(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resource_roles_resource_get_roles(connection, access_package_resource_request_id, access_package_resource_role_id, access_package_resource_role_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceRoles/#{access_package_resource_role_id}/resource/roles/#{access_package_resource_role_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get scopes from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resource_roles_resource_get_scopes(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resource_roles_resource_get_scopes(connection, access_package_resource_request_id, access_package_resource_role_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceRoles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roles from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resource_roles_resource_list_roles(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resource_roles_resource_list_roles(connection, access_package_resource_request_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceRoles/#{access_package_resource_role_id}/resource/roles")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get scopes from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resource_roles_resource_list_scopes(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resource_roles_resource_list_scopes(connection, access_package_resource_request_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceRoles/#{access_package_resource_role_id}/resource/scopes")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resource_roles_resource_roles_get_count_ae6c(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resource_roles_resource_roles_get_count_ae6c(connection, access_package_resource_request_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceRoles/#{access_package_resource_role_id}/resource/roles/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property resource for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resource_roles_resource_scopes_delete_resource(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resource_roles_resource_scopes_delete_resource(connection, access_package_resource_request_id, access_package_resource_role_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceRoles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resource_roles_resource_scopes_get_count_d694(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resource_roles_resource_scopes_get_count_d694(connection, access_package_resource_request_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceRoles/#{access_package_resource_role_id}/resource/scopes/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resource from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resource_roles_resource_scopes_get_resource(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resource_roles_resource_scopes_get_resource(connection, access_package_resource_request_id, access_package_resource_role_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceRoles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to roles for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `microsoft_graph_access_package_resource_role` (MicrosoftGraphAccessPackageResourceRole): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resource_roles_resource_scopes_resource_create_roles(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resource_roles_resource_scopes_resource_create_roles(connection, access_package_resource_request_id, access_package_resource_role_id, access_package_resource_scope_id, microsoft_graph_access_package_resource_role, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceRoles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}/resource/roles")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_role)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property roles for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id1` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resource_roles_resource_scopes_resource_delete_roles(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resource_roles_resource_scopes_resource_delete_roles(connection, access_package_resource_request_id, access_package_resource_role_id, access_package_resource_scope_id, access_package_resource_role_id1, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceRoles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get environment from identityGovernance
  Contains the environment information for the resource. This can be set using either the @odata.bind annotation or the environment's originId.Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resource_roles_resource_scopes_resource_get_environment(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resource_roles_resource_scopes_resource_get_environment(connection, access_package_resource_request_id, access_package_resource_role_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceRoles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}/resource/environment")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roles from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id1` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resource_roles_resource_scopes_resource_get_roles(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resource_roles_resource_scopes_resource_get_roles(connection, access_package_resource_request_id, access_package_resource_role_id, access_package_resource_scope_id, access_package_resource_role_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceRoles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roles from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resource_roles_resource_scopes_resource_list_roles(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resource_roles_resource_scopes_resource_list_roles(connection, access_package_resource_request_id, access_package_resource_role_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceRoles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}/resource/roles")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resource_roles_resource_scopes_resource_roles_get_count931a(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resource_roles_resource_scopes_resource_roles_get_count931a(connection, access_package_resource_request_id, access_package_resource_role_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceRoles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}/resource/roles/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property roles in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id1` (String.t): The unique identifier of accessPackageResourceRole
  - `microsoft_graph_access_package_resource_role` (MicrosoftGraphAccessPackageResourceRole): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resource_roles_resource_scopes_resource_update_roles(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resource_roles_resource_scopes_resource_update_roles(connection, access_package_resource_request_id, access_package_resource_role_id, access_package_resource_scope_id, access_package_resource_role_id1, microsoft_graph_access_package_resource_role, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceRoles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id1}")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_role)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property resource in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `microsoft_graph_access_package_resource` (MicrosoftGraphAccessPackageResource): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resource_roles_resource_scopes_update_resource(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resource_roles_resource_scopes_update_resource(connection, access_package_resource_request_id, access_package_resource_role_id, access_package_resource_scope_id, microsoft_graph_access_package_resource, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceRoles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}/resource")
      |> add_param(:body, :body, microsoft_graph_access_package_resource)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property roles in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_role_id1` (String.t): The unique identifier of accessPackageResourceRole
  - `microsoft_graph_access_package_resource_role` (MicrosoftGraphAccessPackageResourceRole): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resource_roles_resource_update_roles(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resource_roles_resource_update_roles(connection, access_package_resource_request_id, access_package_resource_role_id, access_package_resource_role_id1, microsoft_graph_access_package_resource_role, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceRoles/#{access_package_resource_role_id}/resource/roles/#{access_package_resource_role_id1}")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_role)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property scopes in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `microsoft_graph_access_package_resource_scope` (MicrosoftGraphAccessPackageResourceScope): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resource_roles_resource_update_scopes(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resource_roles_resource_update_scopes(connection, access_package_resource_request_id, access_package_resource_role_id, access_package_resource_scope_id, microsoft_graph_access_package_resource_scope, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceRoles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_scope)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property resource in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `microsoft_graph_access_package_resource` (MicrosoftGraphAccessPackageResource): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resource_roles_update_resource(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resource_roles_update_resource(connection, access_package_resource_request_id, access_package_resource_role_id, microsoft_graph_access_package_resource, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceRoles/#{access_package_resource_role_id}/resource")
      |> add_param(:body, :body, microsoft_graph_access_package_resource)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property resource for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resource_scopes_delete_resource(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resource_scopes_delete_resource(connection, access_package_resource_request_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceScopes/#{access_package_resource_scope_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resource_scopes_get_count7b8f(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resource_scopes_get_count7b8f(connection, access_package_resource_request_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceScopes/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resource from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resource_scopes_get_resource(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resource_scopes_get_resource(connection, access_package_resource_request_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceScopes/#{access_package_resource_scope_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to roles for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `microsoft_graph_access_package_resource_role` (MicrosoftGraphAccessPackageResourceRole): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resource_scopes_resource_create_roles(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resource_scopes_resource_create_roles(connection, access_package_resource_request_id, access_package_resource_scope_id, microsoft_graph_access_package_resource_role, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceScopes/#{access_package_resource_scope_id}/resource/roles")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_role)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to scopes for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `microsoft_graph_access_package_resource_scope` (MicrosoftGraphAccessPackageResourceScope): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resource_scopes_resource_create_scopes(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resource_scopes_resource_create_scopes(connection, access_package_resource_request_id, access_package_resource_scope_id, microsoft_graph_access_package_resource_scope, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceScopes/#{access_package_resource_scope_id}/resource/scopes")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_scope)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property roles for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resource_scopes_resource_delete_roles(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resource_scopes_resource_delete_roles(connection, access_package_resource_request_id, access_package_resource_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceScopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property scopes for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_scope_id1` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resource_scopes_resource_delete_scopes(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resource_scopes_resource_delete_scopes(connection, access_package_resource_request_id, access_package_resource_scope_id, access_package_resource_scope_id1, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceScopes/#{access_package_resource_scope_id}/resource/scopes/#{access_package_resource_scope_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get environment from identityGovernance
  Contains the environment information for the resource. This can be set using either the @odata.bind annotation or the environment's originId.Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resource_scopes_resource_get_environment(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resource_scopes_resource_get_environment(connection, access_package_resource_request_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceScopes/#{access_package_resource_scope_id}/resource/environment")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roles from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resource_scopes_resource_get_roles(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resource_scopes_resource_get_roles(connection, access_package_resource_request_id, access_package_resource_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceScopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get scopes from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_scope_id1` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resource_scopes_resource_get_scopes(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resource_scopes_resource_get_scopes(connection, access_package_resource_request_id, access_package_resource_scope_id, access_package_resource_scope_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceScopes/#{access_package_resource_scope_id}/resource/scopes/#{access_package_resource_scope_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roles from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resource_scopes_resource_list_roles(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resource_scopes_resource_list_roles(connection, access_package_resource_request_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceScopes/#{access_package_resource_scope_id}/resource/roles")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get scopes from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resource_scopes_resource_list_scopes(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resource_scopes_resource_list_scopes(connection, access_package_resource_request_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceScopes/#{access_package_resource_scope_id}/resource/scopes")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property resource for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resource_scopes_resource_roles_delete_resource(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resource_scopes_resource_roles_delete_resource(connection, access_package_resource_request_id, access_package_resource_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceScopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resource_scopes_resource_roles_get_count2f61(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resource_scopes_resource_roles_get_count2f61(connection, access_package_resource_request_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceScopes/#{access_package_resource_scope_id}/resource/roles/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resource from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resource_scopes_resource_roles_get_resource(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resource_scopes_resource_roles_get_resource(connection, access_package_resource_request_id, access_package_resource_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceScopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to scopes for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `microsoft_graph_access_package_resource_scope` (MicrosoftGraphAccessPackageResourceScope): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resource_scopes_resource_roles_resource_create_scopes(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resource_scopes_resource_roles_resource_create_scopes(connection, access_package_resource_request_id, access_package_resource_scope_id, access_package_resource_role_id, microsoft_graph_access_package_resource_scope, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceScopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}/resource/scopes")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_scope)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property scopes for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id1` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resource_scopes_resource_roles_resource_delete_scopes(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resource_scopes_resource_roles_resource_delete_scopes(connection, access_package_resource_request_id, access_package_resource_scope_id, access_package_resource_role_id, access_package_resource_scope_id1, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceScopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get environment from identityGovernance
  Contains the environment information for the resource. This can be set using either the @odata.bind annotation or the environment's originId.Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resource_scopes_resource_roles_resource_get_environment(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resource_scopes_resource_roles_resource_get_environment(connection, access_package_resource_request_id, access_package_resource_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceScopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}/resource/environment")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get scopes from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id1` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resource_scopes_resource_roles_resource_get_scopes(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resource_scopes_resource_roles_resource_get_scopes(connection, access_package_resource_request_id, access_package_resource_scope_id, access_package_resource_role_id, access_package_resource_scope_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceScopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get scopes from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resource_scopes_resource_roles_resource_list_scopes(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resource_scopes_resource_roles_resource_list_scopes(connection, access_package_resource_request_id, access_package_resource_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceScopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}/resource/scopes")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resource_scopes_resource_roles_resource_scopes_get_count80a5(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resource_scopes_resource_roles_resource_scopes_get_count80a5(connection, access_package_resource_request_id, access_package_resource_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceScopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}/resource/scopes/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property scopes in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id1` (String.t): The unique identifier of accessPackageResourceScope
  - `microsoft_graph_access_package_resource_scope` (MicrosoftGraphAccessPackageResourceScope): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resource_scopes_resource_roles_resource_update_scopes(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resource_scopes_resource_roles_resource_update_scopes(connection, access_package_resource_request_id, access_package_resource_scope_id, access_package_resource_role_id, access_package_resource_scope_id1, microsoft_graph_access_package_resource_scope, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceScopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id1}")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_scope)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property resource in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `microsoft_graph_access_package_resource` (MicrosoftGraphAccessPackageResource): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resource_scopes_resource_roles_update_resource(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resource_scopes_resource_roles_update_resource(connection, access_package_resource_request_id, access_package_resource_scope_id, access_package_resource_role_id, microsoft_graph_access_package_resource, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceScopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}/resource")
      |> add_param(:body, :body, microsoft_graph_access_package_resource)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resource_scopes_resource_scopes_get_count_ce55(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resource_scopes_resource_scopes_get_count_ce55(connection, access_package_resource_request_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceScopes/#{access_package_resource_scope_id}/resource/scopes/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property roles in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `microsoft_graph_access_package_resource_role` (MicrosoftGraphAccessPackageResourceRole): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resource_scopes_resource_update_roles(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resource_scopes_resource_update_roles(connection, access_package_resource_request_id, access_package_resource_scope_id, access_package_resource_role_id, microsoft_graph_access_package_resource_role, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceScopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_role)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property scopes in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_scope_id1` (String.t): The unique identifier of accessPackageResourceScope
  - `microsoft_graph_access_package_resource_scope` (MicrosoftGraphAccessPackageResourceScope): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resource_scopes_resource_update_scopes(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resource_scopes_resource_update_scopes(connection, access_package_resource_request_id, access_package_resource_scope_id, access_package_resource_scope_id1, microsoft_graph_access_package_resource_scope, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceScopes/#{access_package_resource_scope_id}/resource/scopes/#{access_package_resource_scope_id1}")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_scope)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property resource in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `microsoft_graph_access_package_resource` (MicrosoftGraphAccessPackageResource): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resource_scopes_update_resource(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resource_scopes_update_resource(connection, access_package_resource_request_id, access_package_resource_scope_id, microsoft_graph_access_package_resource, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceScopes/#{access_package_resource_scope_id}/resource")
      |> add_param(:body, :body, microsoft_graph_access_package_resource)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to roles for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `microsoft_graph_access_package_resource_role` (MicrosoftGraphAccessPackageResourceRole): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resources_create_roles(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resources_create_roles(connection, access_package_resource_request_id, access_package_resource_id, microsoft_graph_access_package_resource_role, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resources/#{access_package_resource_id}/roles")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_role)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to scopes for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `microsoft_graph_access_package_resource_scope` (MicrosoftGraphAccessPackageResourceScope): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resources_create_scopes(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resources_create_scopes(connection, access_package_resource_request_id, access_package_resource_id, microsoft_graph_access_package_resource_scope, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resources/#{access_package_resource_id}/scopes")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_scope)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property roles for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resources_delete_roles(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resources_delete_roles(connection, access_package_resource_request_id, access_package_resource_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property scopes for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resources_delete_scopes(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resources_delete_scopes(connection, access_package_resource_request_id, access_package_resource_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resources_get_count10ad(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resources_get_count10ad(connection, access_package_resource_request_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resources/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get environment from identityGovernance
  Contains the environment information for the resource. This can be set using either the @odata.bind annotation or the environment's originId.Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resources_get_environment(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resources_get_environment(connection, access_package_resource_request_id, access_package_resource_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resources/#{access_package_resource_id}/environment")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roles from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resources_get_roles(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resources_get_roles(connection, access_package_resource_request_id, access_package_resource_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get scopes from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resources_get_scopes(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resources_get_scopes(connection, access_package_resource_request_id, access_package_resource_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roles from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resources_list_roles(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resources_list_roles(connection, access_package_resource_request_id, access_package_resource_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resources/#{access_package_resource_id}/roles")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get scopes from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resources_list_scopes(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resources_list_scopes(connection, access_package_resource_request_id, access_package_resource_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resources/#{access_package_resource_id}/scopes")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property resource for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resources_roles_delete_resource(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resources_roles_delete_resource(connection, access_package_resource_request_id, access_package_resource_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resources_roles_get_count061e(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resources_roles_get_count061e(connection, access_package_resource_request_id, access_package_resource_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resources/#{access_package_resource_id}/roles/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resource from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resources_roles_get_resource(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resources_roles_get_resource(connection, access_package_resource_request_id, access_package_resource_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to scopes for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `microsoft_graph_access_package_resource_scope` (MicrosoftGraphAccessPackageResourceScope): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resources_roles_resource_create_scopes(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resources_roles_resource_create_scopes(connection, access_package_resource_request_id, access_package_resource_id, access_package_resource_role_id, microsoft_graph_access_package_resource_scope, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}/resource/scopes")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_scope)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property scopes for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resources_roles_resource_delete_scopes(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resources_roles_resource_delete_scopes(connection, access_package_resource_request_id, access_package_resource_id, access_package_resource_role_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get environment from identityGovernance
  Contains the environment information for the resource. This can be set using either the @odata.bind annotation or the environment's originId.Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resources_roles_resource_get_environment(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resources_roles_resource_get_environment(connection, access_package_resource_request_id, access_package_resource_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}/resource/environment")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get scopes from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resources_roles_resource_get_scopes(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resources_roles_resource_get_scopes(connection, access_package_resource_request_id, access_package_resource_id, access_package_resource_role_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get scopes from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resources_roles_resource_list_scopes(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resources_roles_resource_list_scopes(connection, access_package_resource_request_id, access_package_resource_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}/resource/scopes")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property resource for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resources_roles_resource_scopes_delete_resource(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resources_roles_resource_scopes_delete_resource(connection, access_package_resource_request_id, access_package_resource_id, access_package_resource_role_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resources_roles_resource_scopes_get_count64b6(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resources_roles_resource_scopes_get_count64b6(connection, access_package_resource_request_id, access_package_resource_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}/resource/scopes/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resource from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resources_roles_resource_scopes_get_resource(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resources_roles_resource_scopes_get_resource(connection, access_package_resource_request_id, access_package_resource_id, access_package_resource_role_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get environment from identityGovernance
  Contains the environment information for the resource. This can be set using either the @odata.bind annotation or the environment's originId.Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resources_roles_resource_scopes_resource_get_environment(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resources_roles_resource_scopes_resource_get_environment(connection, access_package_resource_request_id, access_package_resource_id, access_package_resource_role_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}/resource/environment")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property resource in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `microsoft_graph_access_package_resource` (MicrosoftGraphAccessPackageResource): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resources_roles_resource_scopes_update_resource(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resources_roles_resource_scopes_update_resource(connection, access_package_resource_request_id, access_package_resource_id, access_package_resource_role_id, access_package_resource_scope_id, microsoft_graph_access_package_resource, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}/resource")
      |> add_param(:body, :body, microsoft_graph_access_package_resource)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property scopes in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `microsoft_graph_access_package_resource_scope` (MicrosoftGraphAccessPackageResourceScope): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resources_roles_resource_update_scopes(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resources_roles_resource_update_scopes(connection, access_package_resource_request_id, access_package_resource_id, access_package_resource_role_id, access_package_resource_scope_id, microsoft_graph_access_package_resource_scope, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_scope)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property resource in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `microsoft_graph_access_package_resource` (MicrosoftGraphAccessPackageResource): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resources_roles_update_resource(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resources_roles_update_resource(connection, access_package_resource_request_id, access_package_resource_id, access_package_resource_role_id, microsoft_graph_access_package_resource, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}/resource")
      |> add_param(:body, :body, microsoft_graph_access_package_resource)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property resource for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resources_scopes_delete_resource(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resources_scopes_delete_resource(connection, access_package_resource_request_id, access_package_resource_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resources_scopes_get_count26fa(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resources_scopes_get_count26fa(connection, access_package_resource_request_id, access_package_resource_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resources/#{access_package_resource_id}/scopes/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resource from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resources_scopes_get_resource(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resources_scopes_get_resource(connection, access_package_resource_request_id, access_package_resource_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to roles for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `microsoft_graph_access_package_resource_role` (MicrosoftGraphAccessPackageResourceRole): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resources_scopes_resource_create_roles(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resources_scopes_resource_create_roles(connection, access_package_resource_request_id, access_package_resource_id, access_package_resource_scope_id, microsoft_graph_access_package_resource_role, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}/resource/roles")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_role)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property roles for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resources_scopes_resource_delete_roles(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resources_scopes_resource_delete_roles(connection, access_package_resource_request_id, access_package_resource_id, access_package_resource_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get environment from identityGovernance
  Contains the environment information for the resource. This can be set using either the @odata.bind annotation or the environment's originId.Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resources_scopes_resource_get_environment(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resources_scopes_resource_get_environment(connection, access_package_resource_request_id, access_package_resource_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}/resource/environment")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roles from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resources_scopes_resource_get_roles(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resources_scopes_resource_get_roles(connection, access_package_resource_request_id, access_package_resource_id, access_package_resource_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roles from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resources_scopes_resource_list_roles(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resources_scopes_resource_list_roles(connection, access_package_resource_request_id, access_package_resource_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}/resource/roles")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property resource for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resources_scopes_resource_roles_delete_resource(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resources_scopes_resource_roles_delete_resource(connection, access_package_resource_request_id, access_package_resource_id, access_package_resource_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resources_scopes_resource_roles_get_count2e6d(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resources_scopes_resource_roles_get_count2e6d(connection, access_package_resource_request_id, access_package_resource_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}/resource/roles/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resource from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resources_scopes_resource_roles_get_resource(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resources_scopes_resource_roles_get_resource(connection, access_package_resource_request_id, access_package_resource_id, access_package_resource_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get environment from identityGovernance
  Contains the environment information for the resource. This can be set using either the @odata.bind annotation or the environment's originId.Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resources_scopes_resource_roles_resource_get_environment(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resources_scopes_resource_roles_resource_get_environment(connection, access_package_resource_request_id, access_package_resource_id, access_package_resource_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}/resource/environment")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property resource in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `microsoft_graph_access_package_resource` (MicrosoftGraphAccessPackageResource): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resources_scopes_resource_roles_update_resource(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resources_scopes_resource_roles_update_resource(connection, access_package_resource_request_id, access_package_resource_id, access_package_resource_scope_id, access_package_resource_role_id, microsoft_graph_access_package_resource, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}/resource")
      |> add_param(:body, :body, microsoft_graph_access_package_resource)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property roles in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `microsoft_graph_access_package_resource_role` (MicrosoftGraphAccessPackageResourceRole): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resources_scopes_resource_update_roles(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resources_scopes_resource_update_roles(connection, access_package_resource_request_id, access_package_resource_id, access_package_resource_scope_id, access_package_resource_role_id, microsoft_graph_access_package_resource_role, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_role)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property resource in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `microsoft_graph_access_package_resource` (MicrosoftGraphAccessPackageResource): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resources_scopes_update_resource(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resources_scopes_update_resource(connection, access_package_resource_request_id, access_package_resource_id, access_package_resource_scope_id, microsoft_graph_access_package_resource, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}/resource")
      |> add_param(:body, :body, microsoft_graph_access_package_resource)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property roles in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `microsoft_graph_access_package_resource_role` (MicrosoftGraphAccessPackageResourceRole): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resources_update_roles(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resources_update_roles(connection, access_package_resource_request_id, access_package_resource_id, access_package_resource_role_id, microsoft_graph_access_package_resource_role, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_role)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property scopes in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `microsoft_graph_access_package_resource_scope` (MicrosoftGraphAccessPackageResourceScope): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_resources_update_scopes(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_resources_update_scopes(connection, access_package_resource_request_id, access_package_resource_id, access_package_resource_scope_id, microsoft_graph_access_package_resource_scope, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_scope)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update accessPackageAssignmentRequestWorkflowExtension
  Update the properties of an accessPackageAssignmentRequestWorkflowExtension object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `custom_callout_extension_id` (String.t): The unique identifier of customCalloutExtension
  - `microsoft_graph_custom_callout_extension` (MicrosoftGraphCustomCalloutExtension): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphCustomCalloutExtension.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_update_custom_workflow_extensions(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphCustomCalloutExtension.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphCustomCalloutExtension.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_update_custom_workflow_extensions(connection, access_package_resource_request_id, custom_callout_extension_id, microsoft_graph_custom_callout_extension, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/customWorkflowExtensions/#{custom_callout_extension_id}")
      |> add_param(:body, :body, microsoft_graph_custom_callout_extension)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphCustomCalloutExtension},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property resourceRoles in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `microsoft_graph_access_package_resource_role` (MicrosoftGraphAccessPackageResourceRole): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_update_resource_roles(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_update_resource_roles(connection, access_package_resource_request_id, access_package_resource_role_id, microsoft_graph_access_package_resource_role, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceRoles/#{access_package_resource_role_id}")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_role)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property resourceScopes in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `microsoft_graph_access_package_resource_scope` (MicrosoftGraphAccessPackageResourceScope): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_update_resource_scopes(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_update_resource_scopes(connection, access_package_resource_request_id, access_package_resource_scope_id, microsoft_graph_access_package_resource_scope, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resourceScopes/#{access_package_resource_scope_id}")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_scope)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property resources in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `microsoft_graph_access_package_resource` (MicrosoftGraphAccessPackageResource): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_catalog_update_resources(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_catalog_update_resources(connection, access_package_resource_request_id, access_package_resource_id, microsoft_graph_access_package_resource, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog/resources/#{access_package_resource_id}")
      |> add_param(:body, :body, microsoft_graph_access_package_resource)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property catalog for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_delete_catalog(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_delete_catalog(connection, access_package_resource_request_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property resource for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_delete_resource(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_delete_resource(connection, access_package_resource_request_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get catalog from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageCatalog.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_get_catalog(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageCatalog.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_get_catalog(connection, access_package_resource_request_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageCatalog},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_get_count_c3aa(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_get_count_c3aa(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resource from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_get_resource(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_get_resource(connection, access_package_resource_request_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to roles for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `microsoft_graph_access_package_resource_role` (MicrosoftGraphAccessPackageResourceRole): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_resource_create_roles(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_resource_create_roles(connection, access_package_resource_request_id, microsoft_graph_access_package_resource_role, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/resource/roles")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_role)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to scopes for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `microsoft_graph_access_package_resource_scope` (MicrosoftGraphAccessPackageResourceScope): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_resource_create_scopes(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_resource_create_scopes(connection, access_package_resource_request_id, microsoft_graph_access_package_resource_scope, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/resource/scopes")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_scope)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property roles for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_resource_delete_roles(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_resource_delete_roles(connection, access_package_resource_request_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/resource/roles/#{access_package_resource_role_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property scopes for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_resource_delete_scopes(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_resource_delete_scopes(connection, access_package_resource_request_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/resource/scopes/#{access_package_resource_scope_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get environment from identityGovernance
  Contains the environment information for the resource. This can be set using either the @odata.bind annotation or the environment's originId.Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_resource_get_environment(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_resource_get_environment(connection, access_package_resource_request_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/resource/environment")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roles from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_resource_get_roles(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_resource_get_roles(connection, access_package_resource_request_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/resource/roles/#{access_package_resource_role_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get scopes from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_resource_get_scopes(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_resource_get_scopes(connection, access_package_resource_request_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/resource/scopes/#{access_package_resource_scope_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roles from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_resource_list_roles(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_resource_list_roles(connection, access_package_resource_request_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/resource/roles")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get scopes from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_resource_list_scopes(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_resource_list_scopes(connection, access_package_resource_request_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/resource/scopes")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property resource for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_resource_roles_delete_resource(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_resource_roles_delete_resource(connection, access_package_resource_request_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/resource/roles/#{access_package_resource_role_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_resource_roles_get_count_ca1d(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_resource_roles_get_count_ca1d(connection, access_package_resource_request_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/resource/roles/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resource from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_resource_roles_get_resource(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_resource_roles_get_resource(connection, access_package_resource_request_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/resource/roles/#{access_package_resource_role_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to scopes for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `microsoft_graph_access_package_resource_scope` (MicrosoftGraphAccessPackageResourceScope): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_resource_roles_resource_create_scopes(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_resource_roles_resource_create_scopes(connection, access_package_resource_request_id, access_package_resource_role_id, microsoft_graph_access_package_resource_scope, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/resource/roles/#{access_package_resource_role_id}/resource/scopes")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_scope)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property scopes for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_resource_roles_resource_delete_scopes(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_resource_roles_resource_delete_scopes(connection, access_package_resource_request_id, access_package_resource_role_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/resource/roles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get environment from identityGovernance
  Contains the environment information for the resource. This can be set using either the @odata.bind annotation or the environment's originId.Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_resource_roles_resource_get_environment(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_resource_roles_resource_get_environment(connection, access_package_resource_request_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/resource/roles/#{access_package_resource_role_id}/resource/environment")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get scopes from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_resource_roles_resource_get_scopes(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_resource_roles_resource_get_scopes(connection, access_package_resource_request_id, access_package_resource_role_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/resource/roles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get scopes from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_resource_roles_resource_list_scopes(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_resource_roles_resource_list_scopes(connection, access_package_resource_request_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/resource/roles/#{access_package_resource_role_id}/resource/scopes")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property resource for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_resource_roles_resource_scopes_delete_resource(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_resource_roles_resource_scopes_delete_resource(connection, access_package_resource_request_id, access_package_resource_role_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/resource/roles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_resource_roles_resource_scopes_get_count_ee56(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_resource_roles_resource_scopes_get_count_ee56(connection, access_package_resource_request_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/resource/roles/#{access_package_resource_role_id}/resource/scopes/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resource from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_resource_roles_resource_scopes_get_resource(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_resource_roles_resource_scopes_get_resource(connection, access_package_resource_request_id, access_package_resource_role_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/resource/roles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get environment from identityGovernance
  Contains the environment information for the resource. This can be set using either the @odata.bind annotation or the environment's originId.Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_resource_roles_resource_scopes_resource_get_environment(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_resource_roles_resource_scopes_resource_get_environment(connection, access_package_resource_request_id, access_package_resource_role_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/resource/roles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}/resource/environment")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property resource in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `microsoft_graph_access_package_resource` (MicrosoftGraphAccessPackageResource): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_resource_roles_resource_scopes_update_resource(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_resource_roles_resource_scopes_update_resource(connection, access_package_resource_request_id, access_package_resource_role_id, access_package_resource_scope_id, microsoft_graph_access_package_resource, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/resource/roles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}/resource")
      |> add_param(:body, :body, microsoft_graph_access_package_resource)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property scopes in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `microsoft_graph_access_package_resource_scope` (MicrosoftGraphAccessPackageResourceScope): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_resource_roles_resource_update_scopes(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_resource_roles_resource_update_scopes(connection, access_package_resource_request_id, access_package_resource_role_id, access_package_resource_scope_id, microsoft_graph_access_package_resource_scope, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/resource/roles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_scope)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property resource in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `microsoft_graph_access_package_resource` (MicrosoftGraphAccessPackageResource): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_resource_roles_update_resource(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_resource_roles_update_resource(connection, access_package_resource_request_id, access_package_resource_role_id, microsoft_graph_access_package_resource, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/resource/roles/#{access_package_resource_role_id}/resource")
      |> add_param(:body, :body, microsoft_graph_access_package_resource)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property resource for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_resource_scopes_delete_resource(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_resource_scopes_delete_resource(connection, access_package_resource_request_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/resource/scopes/#{access_package_resource_scope_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_resource_scopes_get_count_ebee(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_resource_scopes_get_count_ebee(connection, access_package_resource_request_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/resource/scopes/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resource from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_resource_scopes_get_resource(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_resource_scopes_get_resource(connection, access_package_resource_request_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/resource/scopes/#{access_package_resource_scope_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to roles for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `microsoft_graph_access_package_resource_role` (MicrosoftGraphAccessPackageResourceRole): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_resource_scopes_resource_create_roles(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_resource_scopes_resource_create_roles(connection, access_package_resource_request_id, access_package_resource_scope_id, microsoft_graph_access_package_resource_role, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/resource/scopes/#{access_package_resource_scope_id}/resource/roles")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_role)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property roles for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_resource_scopes_resource_delete_roles(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_resource_scopes_resource_delete_roles(connection, access_package_resource_request_id, access_package_resource_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/resource/scopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get environment from identityGovernance
  Contains the environment information for the resource. This can be set using either the @odata.bind annotation or the environment's originId.Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_resource_scopes_resource_get_environment(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_resource_scopes_resource_get_environment(connection, access_package_resource_request_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/resource/scopes/#{access_package_resource_scope_id}/resource/environment")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roles from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_resource_scopes_resource_get_roles(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_resource_scopes_resource_get_roles(connection, access_package_resource_request_id, access_package_resource_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/resource/scopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roles from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_resource_scopes_resource_list_roles(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_resource_scopes_resource_list_roles(connection, access_package_resource_request_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/resource/scopes/#{access_package_resource_scope_id}/resource/roles")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property resource for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_resource_scopes_resource_roles_delete_resource(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_resource_scopes_resource_roles_delete_resource(connection, access_package_resource_request_id, access_package_resource_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/resource/scopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_resource_scopes_resource_roles_get_count94bf(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_resource_scopes_resource_roles_get_count94bf(connection, access_package_resource_request_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/resource/scopes/#{access_package_resource_scope_id}/resource/roles/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resource from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_resource_scopes_resource_roles_get_resource(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_resource_scopes_resource_roles_get_resource(connection, access_package_resource_request_id, access_package_resource_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/resource/scopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get environment from identityGovernance
  Contains the environment information for the resource. This can be set using either the @odata.bind annotation or the environment's originId.Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_resource_scopes_resource_roles_resource_get_environment(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_resource_scopes_resource_roles_resource_get_environment(connection, access_package_resource_request_id, access_package_resource_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/resource/scopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}/resource/environment")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property resource in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `microsoft_graph_access_package_resource` (MicrosoftGraphAccessPackageResource): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_resource_scopes_resource_roles_update_resource(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_resource_scopes_resource_roles_update_resource(connection, access_package_resource_request_id, access_package_resource_scope_id, access_package_resource_role_id, microsoft_graph_access_package_resource, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/resource/scopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}/resource")
      |> add_param(:body, :body, microsoft_graph_access_package_resource)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property roles in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `microsoft_graph_access_package_resource_role` (MicrosoftGraphAccessPackageResourceRole): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_resource_scopes_resource_update_roles(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_resource_scopes_resource_update_roles(connection, access_package_resource_request_id, access_package_resource_scope_id, access_package_resource_role_id, microsoft_graph_access_package_resource_role, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/resource/scopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_role)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property resource in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `microsoft_graph_access_package_resource` (MicrosoftGraphAccessPackageResource): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_resource_scopes_update_resource(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_resource_scopes_update_resource(connection, access_package_resource_request_id, access_package_resource_scope_id, microsoft_graph_access_package_resource, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/resource/scopes/#{access_package_resource_scope_id}/resource")
      |> add_param(:body, :body, microsoft_graph_access_package_resource)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property roles in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `microsoft_graph_access_package_resource_role` (MicrosoftGraphAccessPackageResourceRole): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_resource_update_roles(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_resource_update_roles(connection, access_package_resource_request_id, access_package_resource_role_id, microsoft_graph_access_package_resource_role, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/resource/roles/#{access_package_resource_role_id}")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_role)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property scopes in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `microsoft_graph_access_package_resource_scope` (MicrosoftGraphAccessPackageResourceScope): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_resource_update_scopes(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_resource_update_scopes(connection, access_package_resource_request_id, access_package_resource_scope_id, microsoft_graph_access_package_resource_scope, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/resource/scopes/#{access_package_resource_scope_id}")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_scope)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property catalog in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `microsoft_graph_access_package_catalog` (MicrosoftGraphAccessPackageCatalog): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageCatalog.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_update_catalog(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageCatalog.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageCatalog.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_update_catalog(connection, access_package_resource_request_id, microsoft_graph_access_package_catalog, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/catalog")
      |> add_param(:body, :body, microsoft_graph_access_package_catalog)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageCatalog},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property resource in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `microsoft_graph_access_package_resource` (MicrosoftGraphAccessPackageResource): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_requests_update_resource(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_requests_update_resource(connection, access_package_resource_request_id, microsoft_graph_access_package_resource, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}/resource")
      |> add_param(:body, :body, microsoft_graph_access_package_resource)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property role for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_delete_role(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_delete_role(connection, access_package_resource_role_scope_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/role")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property scope for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_delete_scope(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_delete_scope(connection, access_package_resource_role_scope_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_get_count_dadb(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_get_count_dadb(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get role from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_get_role(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_get_role(connection, access_package_resource_role_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/role")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get scope from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_get_scope(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_get_scope(connection, access_package_resource_role_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property resource for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_role_delete_resource(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_role_delete_resource(connection, access_package_resource_role_scope_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/role/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resource from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_role_get_resource(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_role_get_resource(connection, access_package_resource_role_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/role/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to roles for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `microsoft_graph_access_package_resource_role` (MicrosoftGraphAccessPackageResourceRole): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_role_resource_create_roles(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_role_resource_create_roles(connection, access_package_resource_role_scope_id, microsoft_graph_access_package_resource_role, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/role/resource/roles")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_role)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to scopes for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `microsoft_graph_access_package_resource_scope` (MicrosoftGraphAccessPackageResourceScope): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_role_resource_create_scopes(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_role_resource_create_scopes(connection, access_package_resource_role_scope_id, microsoft_graph_access_package_resource_scope, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/role/resource/scopes")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_scope)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property roles for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_role_resource_delete_roles(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_role_resource_delete_roles(connection, access_package_resource_role_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/role/resource/roles/#{access_package_resource_role_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property scopes for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_role_resource_delete_scopes(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_role_resource_delete_scopes(connection, access_package_resource_role_scope_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/role/resource/scopes/#{access_package_resource_scope_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get environment from identityGovernance
  Contains the environment information for the resource. This can be set using either the @odata.bind annotation or the environment's originId.Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_role_resource_get_environment(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_role_resource_get_environment(connection, access_package_resource_role_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/role/resource/environment")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roles from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_role_resource_get_roles(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_role_resource_get_roles(connection, access_package_resource_role_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/role/resource/roles/#{access_package_resource_role_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get scopes from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_role_resource_get_scopes(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_role_resource_get_scopes(connection, access_package_resource_role_scope_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/role/resource/scopes/#{access_package_resource_scope_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roles from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_role_resource_list_roles(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_role_resource_list_roles(connection, access_package_resource_role_scope_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/role/resource/roles")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get scopes from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_role_resource_list_scopes(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_role_resource_list_scopes(connection, access_package_resource_role_scope_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/role/resource/scopes")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_role_resource_roles_get_count_f86a(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_role_resource_roles_get_count_f86a(connection, access_package_resource_role_scope_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/role/resource/roles/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property resource for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_role_resource_scopes_delete_resource(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_role_resource_scopes_delete_resource(connection, access_package_resource_role_scope_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/role/resource/scopes/#{access_package_resource_scope_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_role_resource_scopes_get_count2739(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_role_resource_scopes_get_count2739(connection, access_package_resource_role_scope_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/role/resource/scopes/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resource from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_role_resource_scopes_get_resource(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_role_resource_scopes_get_resource(connection, access_package_resource_role_scope_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/role/resource/scopes/#{access_package_resource_scope_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to roles for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `microsoft_graph_access_package_resource_role` (MicrosoftGraphAccessPackageResourceRole): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_role_resource_scopes_resource_create_roles(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_role_resource_scopes_resource_create_roles(connection, access_package_resource_role_scope_id, access_package_resource_scope_id, microsoft_graph_access_package_resource_role, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/role/resource/scopes/#{access_package_resource_scope_id}/resource/roles")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_role)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property roles for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_role_resource_scopes_resource_delete_roles(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_role_resource_scopes_resource_delete_roles(connection, access_package_resource_role_scope_id, access_package_resource_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/role/resource/scopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get environment from identityGovernance
  Contains the environment information for the resource. This can be set using either the @odata.bind annotation or the environment's originId.Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_role_resource_scopes_resource_get_environment(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_role_resource_scopes_resource_get_environment(connection, access_package_resource_role_scope_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/role/resource/scopes/#{access_package_resource_scope_id}/resource/environment")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roles from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_role_resource_scopes_resource_get_roles(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_role_resource_scopes_resource_get_roles(connection, access_package_resource_role_scope_id, access_package_resource_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/role/resource/scopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roles from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_role_resource_scopes_resource_list_roles(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_role_resource_scopes_resource_list_roles(connection, access_package_resource_role_scope_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/role/resource/scopes/#{access_package_resource_scope_id}/resource/roles")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_role_resource_scopes_resource_roles_get_count_d2bb(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_role_resource_scopes_resource_roles_get_count_d2bb(connection, access_package_resource_role_scope_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/role/resource/scopes/#{access_package_resource_scope_id}/resource/roles/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property roles in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `microsoft_graph_access_package_resource_role` (MicrosoftGraphAccessPackageResourceRole): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_role_resource_scopes_resource_update_roles(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_role_resource_scopes_resource_update_roles(connection, access_package_resource_role_scope_id, access_package_resource_scope_id, access_package_resource_role_id, microsoft_graph_access_package_resource_role, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/role/resource/scopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_role)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property resource in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `microsoft_graph_access_package_resource` (MicrosoftGraphAccessPackageResource): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_role_resource_scopes_update_resource(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_role_resource_scopes_update_resource(connection, access_package_resource_role_scope_id, access_package_resource_scope_id, microsoft_graph_access_package_resource, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/role/resource/scopes/#{access_package_resource_scope_id}/resource")
      |> add_param(:body, :body, microsoft_graph_access_package_resource)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property roles in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `microsoft_graph_access_package_resource_role` (MicrosoftGraphAccessPackageResourceRole): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_role_resource_update_roles(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_role_resource_update_roles(connection, access_package_resource_role_scope_id, access_package_resource_role_id, microsoft_graph_access_package_resource_role, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/role/resource/roles/#{access_package_resource_role_id}")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_role)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property scopes in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `microsoft_graph_access_package_resource_scope` (MicrosoftGraphAccessPackageResourceScope): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_role_resource_update_scopes(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_role_resource_update_scopes(connection, access_package_resource_role_scope_id, access_package_resource_scope_id, microsoft_graph_access_package_resource_scope, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/role/resource/scopes/#{access_package_resource_scope_id}")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_scope)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property resource in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `microsoft_graph_access_package_resource` (MicrosoftGraphAccessPackageResource): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_role_update_resource(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_role_update_resource(connection, access_package_resource_role_scope_id, microsoft_graph_access_package_resource, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/role/resource")
      |> add_param(:body, :body, microsoft_graph_access_package_resource)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property resource for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_scope_delete_resource(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_scope_delete_resource(connection, access_package_resource_role_scope_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resource from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_scope_get_resource(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_scope_get_resource(connection, access_package_resource_role_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to roles for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `microsoft_graph_access_package_resource_role` (MicrosoftGraphAccessPackageResourceRole): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_scope_resource_create_roles(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_scope_resource_create_roles(connection, access_package_resource_role_scope_id, microsoft_graph_access_package_resource_role, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope/resource/roles")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_role)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to scopes for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `microsoft_graph_access_package_resource_scope` (MicrosoftGraphAccessPackageResourceScope): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_scope_resource_create_scopes(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_scope_resource_create_scopes(connection, access_package_resource_role_scope_id, microsoft_graph_access_package_resource_scope, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope/resource/scopes")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_scope)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property roles for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_scope_resource_delete_roles(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_scope_resource_delete_roles(connection, access_package_resource_role_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope/resource/roles/#{access_package_resource_role_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property scopes for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_scope_resource_delete_scopes(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_scope_resource_delete_scopes(connection, access_package_resource_role_scope_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope/resource/scopes/#{access_package_resource_scope_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get environment from identityGovernance
  Contains the environment information for the resource. This can be set using either the @odata.bind annotation or the environment's originId.Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_scope_resource_get_environment(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_scope_resource_get_environment(connection, access_package_resource_role_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope/resource/environment")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roles from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_scope_resource_get_roles(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_scope_resource_get_roles(connection, access_package_resource_role_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope/resource/roles/#{access_package_resource_role_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get scopes from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_scope_resource_get_scopes(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_scope_resource_get_scopes(connection, access_package_resource_role_scope_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope/resource/scopes/#{access_package_resource_scope_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roles from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_scope_resource_list_roles(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_scope_resource_list_roles(connection, access_package_resource_role_scope_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope/resource/roles")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get scopes from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_scope_resource_list_scopes(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_scope_resource_list_scopes(connection, access_package_resource_role_scope_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope/resource/scopes")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property resource for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_scope_resource_roles_delete_resource(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_scope_resource_roles_delete_resource(connection, access_package_resource_role_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope/resource/roles/#{access_package_resource_role_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_scope_resource_roles_get_count_d421(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_scope_resource_roles_get_count_d421(connection, access_package_resource_role_scope_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope/resource/roles/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resource from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_scope_resource_roles_get_resource(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_scope_resource_roles_get_resource(connection, access_package_resource_role_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope/resource/roles/#{access_package_resource_role_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to scopes for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `microsoft_graph_access_package_resource_scope` (MicrosoftGraphAccessPackageResourceScope): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_scope_resource_roles_resource_create_scopes(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_scope_resource_roles_resource_create_scopes(connection, access_package_resource_role_scope_id, access_package_resource_role_id, microsoft_graph_access_package_resource_scope, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope/resource/roles/#{access_package_resource_role_id}/resource/scopes")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_scope)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property scopes for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_scope_resource_roles_resource_delete_scopes(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_scope_resource_roles_resource_delete_scopes(connection, access_package_resource_role_scope_id, access_package_resource_role_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope/resource/roles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get environment from identityGovernance
  Contains the environment information for the resource. This can be set using either the @odata.bind annotation or the environment's originId.Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_scope_resource_roles_resource_get_environment(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_scope_resource_roles_resource_get_environment(connection, access_package_resource_role_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope/resource/roles/#{access_package_resource_role_id}/resource/environment")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get scopes from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_scope_resource_roles_resource_get_scopes(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_scope_resource_roles_resource_get_scopes(connection, access_package_resource_role_scope_id, access_package_resource_role_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope/resource/roles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get scopes from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_scope_resource_roles_resource_list_scopes(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_scope_resource_roles_resource_list_scopes(connection, access_package_resource_role_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope/resource/roles/#{access_package_resource_role_id}/resource/scopes")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_scope_resource_roles_resource_scopes_get_count37e6(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_scope_resource_roles_resource_scopes_get_count37e6(connection, access_package_resource_role_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope/resource/roles/#{access_package_resource_role_id}/resource/scopes/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property scopes in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `microsoft_graph_access_package_resource_scope` (MicrosoftGraphAccessPackageResourceScope): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_scope_resource_roles_resource_update_scopes(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_scope_resource_roles_resource_update_scopes(connection, access_package_resource_role_scope_id, access_package_resource_role_id, access_package_resource_scope_id, microsoft_graph_access_package_resource_scope, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope/resource/roles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_scope)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property resource in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `microsoft_graph_access_package_resource` (MicrosoftGraphAccessPackageResource): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_scope_resource_roles_update_resource(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_scope_resource_roles_update_resource(connection, access_package_resource_role_scope_id, access_package_resource_role_id, microsoft_graph_access_package_resource, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope/resource/roles/#{access_package_resource_role_id}/resource")
      |> add_param(:body, :body, microsoft_graph_access_package_resource)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_scope_resource_scopes_get_count7447(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_scope_resource_scopes_get_count7447(connection, access_package_resource_role_scope_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope/resource/scopes/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property roles in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `microsoft_graph_access_package_resource_role` (MicrosoftGraphAccessPackageResourceRole): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_scope_resource_update_roles(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_scope_resource_update_roles(connection, access_package_resource_role_scope_id, access_package_resource_role_id, microsoft_graph_access_package_resource_role, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope/resource/roles/#{access_package_resource_role_id}")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_role)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property scopes in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `microsoft_graph_access_package_resource_scope` (MicrosoftGraphAccessPackageResourceScope): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_scope_resource_update_scopes(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_scope_resource_update_scopes(connection, access_package_resource_role_scope_id, access_package_resource_scope_id, microsoft_graph_access_package_resource_scope, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope/resource/scopes/#{access_package_resource_scope_id}")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_scope)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property resource in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `microsoft_graph_access_package_resource` (MicrosoftGraphAccessPackageResource): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_scope_update_resource(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_scope_update_resource(connection, access_package_resource_role_scope_id, microsoft_graph_access_package_resource, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope/resource")
      |> add_param(:body, :body, microsoft_graph_access_package_resource)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property role in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `microsoft_graph_access_package_resource_role` (MicrosoftGraphAccessPackageResourceRole): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_update_role(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_update_role(connection, access_package_resource_role_scope_id, microsoft_graph_access_package_resource_role, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/role")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_role)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property scope in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `microsoft_graph_access_package_resource_scope` (MicrosoftGraphAccessPackageResourceScope): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resource_role_scopes_update_scope(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resource_role_scopes_update_scope(connection, access_package_resource_role_scope_id, microsoft_graph_access_package_resource_scope, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}/scope")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_scope)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to roles for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `microsoft_graph_access_package_resource_role` (MicrosoftGraphAccessPackageResourceRole): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resources_create_roles(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resources_create_roles(connection, access_package_resource_id, microsoft_graph_access_package_resource_role, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/resources/#{access_package_resource_id}/roles")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_role)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to scopes for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `microsoft_graph_access_package_resource_scope` (MicrosoftGraphAccessPackageResourceScope): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resources_create_scopes(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resources_create_scopes(connection, access_package_resource_id, microsoft_graph_access_package_resource_scope, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/resources/#{access_package_resource_id}/scopes")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_scope)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property roles for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resources_delete_roles(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resources_delete_roles(connection, access_package_resource_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property scopes for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resources_delete_scopes(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resources_delete_scopes(connection, access_package_resource_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resources_get_count_c197(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resources_get_count_c197(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resources/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get environment from identityGovernance
  Contains the environment information for the resource. This can be set using either the @odata.bind annotation or the environment's originId.Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resources_get_environment(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resources_get_environment(connection, access_package_resource_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resources/#{access_package_resource_id}/environment")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roles from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resources_get_roles(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resources_get_roles(connection, access_package_resource_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get scopes from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resources_get_scopes(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resources_get_scopes(connection, access_package_resource_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roles from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resources_list_roles(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resources_list_roles(connection, access_package_resource_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resources/#{access_package_resource_id}/roles")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get scopes from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resources_list_scopes(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resources_list_scopes(connection, access_package_resource_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resources/#{access_package_resource_id}/scopes")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property resource for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resources_roles_delete_resource(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resources_roles_delete_resource(connection, access_package_resource_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resources_roles_get_count0757(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resources_roles_get_count0757(connection, access_package_resource_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resources/#{access_package_resource_id}/roles/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resource from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resources_roles_get_resource(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resources_roles_get_resource(connection, access_package_resource_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to scopes for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `microsoft_graph_access_package_resource_scope` (MicrosoftGraphAccessPackageResourceScope): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resources_roles_resource_create_scopes(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resources_roles_resource_create_scopes(connection, access_package_resource_id, access_package_resource_role_id, microsoft_graph_access_package_resource_scope, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}/resource/scopes")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_scope)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property scopes for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resources_roles_resource_delete_scopes(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resources_roles_resource_delete_scopes(connection, access_package_resource_id, access_package_resource_role_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get environment from identityGovernance
  Contains the environment information for the resource. This can be set using either the @odata.bind annotation or the environment's originId.Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resources_roles_resource_get_environment(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resources_roles_resource_get_environment(connection, access_package_resource_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}/resource/environment")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get scopes from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resources_roles_resource_get_scopes(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resources_roles_resource_get_scopes(connection, access_package_resource_id, access_package_resource_role_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get scopes from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resources_roles_resource_list_scopes(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resources_roles_resource_list_scopes(connection, access_package_resource_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}/resource/scopes")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScopeCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property resource for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resources_roles_resource_scopes_delete_resource(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resources_roles_resource_scopes_delete_resource(connection, access_package_resource_id, access_package_resource_role_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resources_roles_resource_scopes_get_count_a8f2(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resources_roles_resource_scopes_get_count_a8f2(connection, access_package_resource_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}/resource/scopes/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resource from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resources_roles_resource_scopes_get_resource(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resources_roles_resource_scopes_get_resource(connection, access_package_resource_id, access_package_resource_role_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get environment from identityGovernance
  Contains the environment information for the resource. This can be set using either the @odata.bind annotation or the environment's originId.Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resources_roles_resource_scopes_resource_get_environment(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resources_roles_resource_scopes_resource_get_environment(connection, access_package_resource_id, access_package_resource_role_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}/resource/environment")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property resource in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `microsoft_graph_access_package_resource` (MicrosoftGraphAccessPackageResource): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resources_roles_resource_scopes_update_resource(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resources_roles_resource_scopes_update_resource(connection, access_package_resource_id, access_package_resource_role_id, access_package_resource_scope_id, microsoft_graph_access_package_resource, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}/resource")
      |> add_param(:body, :body, microsoft_graph_access_package_resource)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property scopes in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `microsoft_graph_access_package_resource_scope` (MicrosoftGraphAccessPackageResourceScope): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resources_roles_resource_update_scopes(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resources_roles_resource_update_scopes(connection, access_package_resource_id, access_package_resource_role_id, access_package_resource_scope_id, microsoft_graph_access_package_resource_scope, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}/resource/scopes/#{access_package_resource_scope_id}")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_scope)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property resource in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `microsoft_graph_access_package_resource` (MicrosoftGraphAccessPackageResource): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resources_roles_update_resource(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resources_roles_update_resource(connection, access_package_resource_id, access_package_resource_role_id, microsoft_graph_access_package_resource, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}/resource")
      |> add_param(:body, :body, microsoft_graph_access_package_resource)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property resource for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resources_scopes_delete_resource(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resources_scopes_delete_resource(connection, access_package_resource_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resources_scopes_get_count_d1a9(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resources_scopes_get_count_d1a9(connection, access_package_resource_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resources/#{access_package_resource_id}/scopes/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resource from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resources_scopes_get_resource(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resources_scopes_get_resource(connection, access_package_resource_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to roles for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `microsoft_graph_access_package_resource_role` (MicrosoftGraphAccessPackageResourceRole): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resources_scopes_resource_create_roles(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resources_scopes_resource_create_roles(connection, access_package_resource_id, access_package_resource_scope_id, microsoft_graph_access_package_resource_role, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/entitlementManagement/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}/resource/roles")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_role)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property roles for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resources_scopes_resource_delete_roles(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resources_scopes_resource_delete_roles(connection, access_package_resource_id, access_package_resource_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get environment from identityGovernance
  Contains the environment information for the resource. This can be set using either the @odata.bind annotation or the environment's originId.Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resources_scopes_resource_get_environment(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resources_scopes_resource_get_environment(connection, access_package_resource_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}/resource/environment")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roles from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resources_scopes_resource_get_roles(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resources_scopes_resource_get_roles(connection, access_package_resource_id, access_package_resource_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get roles from identityGovernance
  Read-only. Nullable. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resources_scopes_resource_list_roles(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resources_scopes_resource_list_roles(connection, access_package_resource_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}/resource/roles")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property resource for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resources_scopes_resource_roles_delete_resource(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resources_scopes_resource_roles_delete_resource(connection, access_package_resource_id, access_package_resource_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/entitlementManagement/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resources_scopes_resource_roles_get_count5bb2(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resources_scopes_resource_roles_get_count5bb2(connection, access_package_resource_id, access_package_resource_scope_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}/resource/roles/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get resource from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resources_scopes_resource_roles_get_resource(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resources_scopes_resource_roles_get_resource(connection, access_package_resource_id, access_package_resource_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}/resource")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get environment from identityGovernance
  Contains the environment information for the resource. This can be set using either the @odata.bind annotation or the environment's originId.Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resources_scopes_resource_roles_resource_get_environment(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resources_scopes_resource_roles_resource_get_environment(connection, access_package_resource_id, access_package_resource_scope_id, access_package_resource_role_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}/resource/environment")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property resource in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `microsoft_graph_access_package_resource` (MicrosoftGraphAccessPackageResource): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resources_scopes_resource_roles_update_resource(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resources_scopes_resource_roles_update_resource(connection, access_package_resource_id, access_package_resource_scope_id, access_package_resource_role_id, microsoft_graph_access_package_resource, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}/resource")
      |> add_param(:body, :body, microsoft_graph_access_package_resource)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property roles in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `microsoft_graph_access_package_resource_role` (MicrosoftGraphAccessPackageResourceRole): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resources_scopes_resource_update_roles(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resources_scopes_resource_update_roles(connection, access_package_resource_id, access_package_resource_scope_id, access_package_resource_role_id, microsoft_graph_access_package_resource_role, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}/resource/roles/#{access_package_resource_role_id}")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_role)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property resource in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `microsoft_graph_access_package_resource` (MicrosoftGraphAccessPackageResource): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resources_scopes_update_resource(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resources_scopes_update_resource(connection, access_package_resource_id, access_package_resource_scope_id, microsoft_graph_access_package_resource, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}/resource")
      |> add_param(:body, :body, microsoft_graph_access_package_resource)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property roles in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_role_id` (String.t): The unique identifier of accessPackageResourceRole
  - `microsoft_graph_access_package_resource_role` (MicrosoftGraphAccessPackageResourceRole): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resources_update_roles(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resources_update_roles(connection, access_package_resource_id, access_package_resource_role_id, microsoft_graph_access_package_resource_role, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resources/#{access_package_resource_id}/roles/#{access_package_resource_role_id}")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_role)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRole},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property scopes in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `access_package_resource_scope_id` (String.t): The unique identifier of accessPackageResourceScope
  - `microsoft_graph_access_package_resource_scope` (MicrosoftGraphAccessPackageResourceScope): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_resources_update_scopes(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_resources_update_scopes(connection, access_package_resource_id, access_package_resource_scope_id, microsoft_graph_access_package_resource_scope, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resources/#{access_package_resource_id}/scopes/#{access_package_resource_scope_id}")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_scope)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property accessPackageAssignmentApprovals in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `approval_id` (String.t): The unique identifier of approval
  - `microsoft_graph_approval` (MicrosoftGraphApproval): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphApproval.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_update_access_package_assignment_approvals(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphApproval.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphApproval.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_update_access_package_assignment_approvals(connection, approval_id, microsoft_graph_approval, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/accessPackageAssignmentApprovals/#{approval_id}")
      |> add_param(:body, :body, microsoft_graph_approval)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphApproval},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update accessPackage
  Update an existing accessPackage object to change one or more of its properties, such as the display name or description. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_id` (String.t): The unique identifier of accessPackage
  - `microsoft_graph_access_package` (MicrosoftGraphAccessPackage): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_update_access_packages(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackage.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_update_access_packages(connection, access_package_id, microsoft_graph_access_package, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/accessPackages/#{access_package_id}")
      |> add_param(:body, :body, microsoft_graph_access_package)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property assignmentPolicies in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_assignment_policy_id` (String.t): The unique identifier of accessPackageAssignmentPolicy
  - `microsoft_graph_access_package_assignment_policy` (MicrosoftGraphAccessPackageAssignmentPolicy): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignmentPolicy.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_update_assignment_policies(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignmentPolicy.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignmentPolicy.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_update_assignment_policies(connection, access_package_assignment_policy_id, microsoft_graph_access_package_assignment_policy, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/identityGovernance/entitlementManagement/assignmentPolicies/#{access_package_assignment_policy_id}")
      |> add_param(:body, :body, microsoft_graph_access_package_assignment_policy)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignmentPolicy},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property assignmentRequests in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_assignment_request_id` (String.t): The unique identifier of accessPackageAssignmentRequest
  - `microsoft_graph_access_package_assignment_request` (MicrosoftGraphAccessPackageAssignmentRequest): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignmentRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_update_assignment_requests(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignmentRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignmentRequest.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_update_assignment_requests(connection, access_package_assignment_request_id, microsoft_graph_access_package_assignment_request, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/assignmentRequests/#{access_package_assignment_request_id}")
      |> add_param(:body, :body, microsoft_graph_access_package_assignment_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignmentRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property assignments in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_assignment_id` (String.t): The unique identifier of accessPackageAssignment
  - `microsoft_graph_access_package_assignment` (MicrosoftGraphAccessPackageAssignment): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_update_assignments(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignment.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_update_assignments(connection, access_package_assignment_id, microsoft_graph_access_package_assignment, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/assignments/#{access_package_assignment_id}")
      |> add_param(:body, :body, microsoft_graph_access_package_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update accessPackageCatalog
  Update an existing accessPackageCatalog object to change one or more of its properties, such as the display name or description. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_catalog_id` (String.t): The unique identifier of accessPackageCatalog
  - `microsoft_graph_access_package_catalog` (MicrosoftGraphAccessPackageCatalog): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageCatalog.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_update_catalogs(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageCatalog.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageCatalog.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_update_catalogs(connection, access_package_catalog_id, microsoft_graph_access_package_catalog, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/catalogs/#{access_package_catalog_id}")
      |> add_param(:body, :body, microsoft_graph_access_package_catalog)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageCatalog},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update connectedOrganization
  Update a connectedOrganization object to change one or more of its properties. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `connected_organization_id` (String.t): The unique identifier of connectedOrganization
  - `microsoft_graph_connected_organization` (MicrosoftGraphConnectedOrganization): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphConnectedOrganization.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_update_connected_organizations(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphConnectedOrganization.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphConnectedOrganization.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_update_connected_organizations(connection, connected_organization_id, microsoft_graph_connected_organization, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/connectedOrganizations/#{connected_organization_id}")
      |> add_param(:body, :body, microsoft_graph_connected_organization)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphConnectedOrganization},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property resourceEnvironments in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_environment_id` (String.t): The unique identifier of accessPackageResourceEnvironment
  - `microsoft_graph_access_package_resource_environment` (MicrosoftGraphAccessPackageResourceEnvironment): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_update_resource_environments(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_update_resource_environments(connection, access_package_resource_environment_id, microsoft_graph_access_package_resource_environment, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resourceEnvironments/#{access_package_resource_environment_id}")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_environment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceEnvironment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property resourceRequests in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_request_id` (String.t): The unique identifier of accessPackageResourceRequest
  - `microsoft_graph_access_package_resource_request` (MicrosoftGraphAccessPackageResourceRequest): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_update_resource_requests(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRequest.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_update_resource_requests(connection, access_package_resource_request_id, microsoft_graph_access_package_resource_request, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resourceRequests/#{access_package_resource_request_id}")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property resourceRoleScopes in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_role_scope_id` (String.t): The unique identifier of accessPackageResourceRoleScope
  - `microsoft_graph_access_package_resource_role_scope` (MicrosoftGraphAccessPackageResourceRoleScope): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleScope.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_update_resource_role_scopes(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleScope.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleScope.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_update_resource_role_scopes(connection, access_package_resource_role_scope_id, microsoft_graph_access_package_resource_role_scope, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resourceRoleScopes/#{access_package_resource_role_scope_id}")
      |> add_param(:body, :body, microsoft_graph_access_package_resource_role_scope)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResourceRoleScope},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property resources in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_package_resource_id` (String.t): The unique identifier of accessPackageResource
  - `microsoft_graph_access_package_resource` (MicrosoftGraphAccessPackageResource): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_update_resources(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_update_resources(connection, access_package_resource_id, microsoft_graph_access_package_resource, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/resources/#{access_package_resource_id}")
      |> add_param(:body, :body, microsoft_graph_access_package_resource)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessPackageResource},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update entitlementManagementSettings
  Update an existing entitlementManagementSettings object to change one or more of its properties. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_entitlement_management_settings` (MicrosoftGraphEntitlementManagementSettings): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEntitlementManagementSettings.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_entitlement_management_update_settings(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphEntitlementManagementSettings.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphEntitlementManagementSettings.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_entitlement_management_update_settings(connection, microsoft_graph_entitlement_management_settings, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement/settings")
      |> add_param(:body, :body, microsoft_graph_entitlement_management_settings)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEntitlementManagementSettings},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get entitlementManagement from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEntitlementManagement.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_get_entitlement_management(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphEntitlementManagement.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_get_entitlement_management(connection, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/entitlementManagement")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEntitlementManagement},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property entitlementManagement in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_entitlement_management` (MicrosoftGraphEntitlementManagement): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphEntitlementManagement.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_update_entitlement_management(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphEntitlementManagement.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphEntitlementManagement.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_update_entitlement_management(connection, microsoft_graph_entitlement_management, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/entitlementManagement")
      |> add_param(:body, :body, microsoft_graph_entitlement_management)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphEntitlementManagement},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
