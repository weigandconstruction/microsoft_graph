# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.IdentityGovernanceAccessReviewSet do
  @moduledoc """
  API calls for all endpoints tagged `IdentityGovernanceAccessReviewSet`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Create definitions
  Create a new accessReviewScheduleDefinition object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_access_review_schedule_definition` (MicrosoftGraphAccessReviewScheduleDefinition): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewScheduleDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_create_definitions(
          Tesla.Env.client(),
          MicrosoftGraph.Model.MicrosoftGraphAccessReviewScheduleDefinition.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewScheduleDefinition.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_create_definitions(
        connection,
        microsoft_graph_access_review_schedule_definition,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/accessReviews/definitions")
      |> add_param(:body, :body, microsoft_graph_access_review_schedule_definition)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessReviewScheduleDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create historyDefinitions
  Create a new accessReviewHistoryDefinition object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_access_review_history_definition` (MicrosoftGraphAccessReviewHistoryDefinition): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewHistoryDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_create_history_definitions(
          Tesla.Env.client(),
          MicrosoftGraph.Model.MicrosoftGraphAccessReviewHistoryDefinition.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewHistoryDefinition.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_create_history_definitions(
        connection,
        microsoft_graph_access_review_history_definition,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/accessReviews/historyDefinitions")
      |> add_param(:body, :body, microsoft_graph_access_review_history_definition)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessReviewHistoryDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to instances for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_schedule_definition_id` (String.t): The unique identifier of accessReviewScheduleDefinition
  - `microsoft_graph_access_review_instance` (MicrosoftGraphAccessReviewInstance): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewInstance.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_definitions_create_instances(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphAccessReviewInstance.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewInstance.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_definitions_create_instances(
        connection,
        access_review_schedule_definition_id,
        microsoft_graph_access_review_instance,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/identityGovernance/accessReviews/definitions/#{access_review_schedule_definition_id}/instances"
      )
      |> add_param(:body, :body, microsoft_graph_access_review_instance)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessReviewInstance},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property instances for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_schedule_definition_id` (String.t): The unique identifier of accessReviewScheduleDefinition
  - `access_review_instance_id` (String.t): The unique identifier of accessReviewInstance
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_definitions_delete_instances(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_definitions_delete_instances(
        connection,
        access_review_schedule_definition_id,
        access_review_instance_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/identityGovernance/accessReviews/definitions/#{access_review_schedule_definition_id}/instances/#{access_review_instance_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_definitions_get_count6cbe(
          Tesla.Env.client(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_definitions_get_count6cbe(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/accessReviews/definitions/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get accessReviewInstance
  Read the properties and relationships of an accessReviewInstance object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_schedule_definition_id` (String.t): The unique identifier of accessReviewScheduleDefinition
  - `access_review_instance_id` (String.t): The unique identifier of accessReviewInstance
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewInstance.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_definitions_get_instances(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewInstance.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_definitions_get_instances(
        connection,
        access_review_schedule_definition_id,
        access_review_instance_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/identityGovernance/accessReviews/definitions/#{access_review_schedule_definition_id}/instances/#{access_review_instance_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessReviewInstance},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_schedule_definition_id` (String.t): The unique identifier of accessReviewScheduleDefinition
  - `access_review_instance_id` (String.t): The unique identifier of accessReviewInstance
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_definitions_instances_contacted_reviewers_get_count_fe5f(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_definitions_instances_contacted_reviewers_get_count_fe5f(
        connection,
        access_review_schedule_definition_id,
        access_review_instance_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/identityGovernance/accessReviews/definitions/#{access_review_schedule_definition_id}/instances/#{access_review_instance_id}/contactedReviewers/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to contactedReviewers for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_schedule_definition_id` (String.t): The unique identifier of accessReviewScheduleDefinition
  - `access_review_instance_id` (String.t): The unique identifier of accessReviewInstance
  - `microsoft_graph_access_review_reviewer` (MicrosoftGraphAccessReviewReviewer): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewReviewer.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_definitions_instances_create_contacted_reviewers(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphAccessReviewReviewer.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewReviewer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_definitions_instances_create_contacted_reviewers(
        connection,
        access_review_schedule_definition_id,
        access_review_instance_id,
        microsoft_graph_access_review_reviewer,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/identityGovernance/accessReviews/definitions/#{access_review_schedule_definition_id}/instances/#{access_review_instance_id}/contactedReviewers"
      )
      |> add_param(:body, :body, microsoft_graph_access_review_reviewer)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessReviewReviewer},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to decisions for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_schedule_definition_id` (String.t): The unique identifier of accessReviewScheduleDefinition
  - `access_review_instance_id` (String.t): The unique identifier of accessReviewInstance
  - `microsoft_graph_access_review_instance_decision_item` (MicrosoftGraphAccessReviewInstanceDecisionItem): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewInstanceDecisionItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_definitions_instances_create_decisions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphAccessReviewInstanceDecisionItem.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewInstanceDecisionItem.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_definitions_instances_create_decisions(
        connection,
        access_review_schedule_definition_id,
        access_review_instance_id,
        microsoft_graph_access_review_instance_decision_item,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/identityGovernance/accessReviews/definitions/#{access_review_schedule_definition_id}/instances/#{access_review_instance_id}/decisions"
      )
      |> add_param(:body, :body, microsoft_graph_access_review_instance_decision_item)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessReviewInstanceDecisionItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to stages for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_schedule_definition_id` (String.t): The unique identifier of accessReviewScheduleDefinition
  - `access_review_instance_id` (String.t): The unique identifier of accessReviewInstance
  - `microsoft_graph_access_review_stage` (MicrosoftGraphAccessReviewStage): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewStage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_definitions_instances_create_stages(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphAccessReviewStage.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewStage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_definitions_instances_create_stages(
        connection,
        access_review_schedule_definition_id,
        access_review_instance_id,
        microsoft_graph_access_review_stage,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/identityGovernance/accessReviews/definitions/#{access_review_schedule_definition_id}/instances/#{access_review_instance_id}/stages"
      )
      |> add_param(:body, :body, microsoft_graph_access_review_stage)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessReviewStage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to insights for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_schedule_definition_id` (String.t): The unique identifier of accessReviewScheduleDefinition
  - `access_review_instance_id` (String.t): The unique identifier of accessReviewInstance
  - `access_review_instance_decision_item_id` (String.t): The unique identifier of accessReviewInstanceDecisionItem
  - `microsoft_graph_governance_insight` (MicrosoftGraphGovernanceInsight): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphGovernanceInsight.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_definitions_instances_decisions_create_insights(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphGovernanceInsight.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphGovernanceInsight.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_definitions_instances_decisions_create_insights(
        connection,
        access_review_schedule_definition_id,
        access_review_instance_id,
        access_review_instance_decision_item_id,
        microsoft_graph_governance_insight,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/identityGovernance/accessReviews/definitions/#{access_review_schedule_definition_id}/instances/#{access_review_instance_id}/decisions/#{access_review_instance_decision_item_id}/insights"
      )
      |> add_param(:body, :body, microsoft_graph_governance_insight)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphGovernanceInsight},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property insights for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_schedule_definition_id` (String.t): The unique identifier of accessReviewScheduleDefinition
  - `access_review_instance_id` (String.t): The unique identifier of accessReviewInstance
  - `access_review_instance_decision_item_id` (String.t): The unique identifier of accessReviewInstanceDecisionItem
  - `governance_insight_id` (String.t): The unique identifier of governanceInsight
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_definitions_instances_decisions_delete_insights(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_definitions_instances_decisions_delete_insights(
        connection,
        access_review_schedule_definition_id,
        access_review_instance_id,
        access_review_instance_decision_item_id,
        governance_insight_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/identityGovernance/accessReviews/definitions/#{access_review_schedule_definition_id}/instances/#{access_review_instance_id}/decisions/#{access_review_instance_decision_item_id}/insights/#{governance_insight_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_schedule_definition_id` (String.t): The unique identifier of accessReviewScheduleDefinition
  - `access_review_instance_id` (String.t): The unique identifier of accessReviewInstance
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_definitions_instances_decisions_get_count_c10a(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_definitions_instances_decisions_get_count_c10a(
        connection,
        access_review_schedule_definition_id,
        access_review_instance_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/identityGovernance/accessReviews/definitions/#{access_review_schedule_definition_id}/instances/#{access_review_instance_id}/decisions/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get insights from identityGovernance
  Insights are recommendations to reviewers on whether to approve or deny a decision. There can be multiple insights associated with an accessReviewInstanceDecisionItem.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_schedule_definition_id` (String.t): The unique identifier of accessReviewScheduleDefinition
  - `access_review_instance_id` (String.t): The unique identifier of accessReviewInstance
  - `access_review_instance_decision_item_id` (String.t): The unique identifier of accessReviewInstanceDecisionItem
  - `governance_insight_id` (String.t): The unique identifier of governanceInsight
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphGovernanceInsight.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_definitions_instances_decisions_get_insights(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphGovernanceInsight.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_definitions_instances_decisions_get_insights(
        connection,
        access_review_schedule_definition_id,
        access_review_instance_id,
        access_review_instance_decision_item_id,
        governance_insight_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/identityGovernance/accessReviews/definitions/#{access_review_schedule_definition_id}/instances/#{access_review_instance_id}/decisions/#{access_review_instance_decision_item_id}/insights/#{governance_insight_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphGovernanceInsight},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_schedule_definition_id` (String.t): The unique identifier of accessReviewScheduleDefinition
  - `access_review_instance_id` (String.t): The unique identifier of accessReviewInstance
  - `access_review_instance_decision_item_id` (String.t): The unique identifier of accessReviewInstanceDecisionItem
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_definitions_instances_decisions_insights_get_count9dc2(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_definitions_instances_decisions_insights_get_count9dc2(
        connection,
        access_review_schedule_definition_id,
        access_review_instance_id,
        access_review_instance_decision_item_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/identityGovernance/accessReviews/definitions/#{access_review_schedule_definition_id}/instances/#{access_review_instance_id}/decisions/#{access_review_instance_decision_item_id}/insights/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get insights from identityGovernance
  Insights are recommendations to reviewers on whether to approve or deny a decision. There can be multiple insights associated with an accessReviewInstanceDecisionItem.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_schedule_definition_id` (String.t): The unique identifier of accessReviewScheduleDefinition
  - `access_review_instance_id` (String.t): The unique identifier of accessReviewInstance
  - `access_review_instance_decision_item_id` (String.t): The unique identifier of accessReviewInstanceDecisionItem
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphGovernanceInsightCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_definitions_instances_decisions_list_insights(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphGovernanceInsightCollectionResponse.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_definitions_instances_decisions_list_insights(
        connection,
        access_review_schedule_definition_id,
        access_review_instance_id,
        access_review_instance_decision_item_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/identityGovernance/accessReviews/definitions/#{access_review_schedule_definition_id}/instances/#{access_review_instance_id}/decisions/#{access_review_instance_decision_item_id}/insights"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphGovernanceInsightCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property insights in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_schedule_definition_id` (String.t): The unique identifier of accessReviewScheduleDefinition
  - `access_review_instance_id` (String.t): The unique identifier of accessReviewInstance
  - `access_review_instance_decision_item_id` (String.t): The unique identifier of accessReviewInstanceDecisionItem
  - `governance_insight_id` (String.t): The unique identifier of governanceInsight
  - `microsoft_graph_governance_insight` (MicrosoftGraphGovernanceInsight): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphGovernanceInsight.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_definitions_instances_decisions_update_insights(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphGovernanceInsight.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphGovernanceInsight.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_definitions_instances_decisions_update_insights(
        connection,
        access_review_schedule_definition_id,
        access_review_instance_id,
        access_review_instance_decision_item_id,
        governance_insight_id,
        microsoft_graph_governance_insight,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/identityGovernance/accessReviews/definitions/#{access_review_schedule_definition_id}/instances/#{access_review_instance_id}/decisions/#{access_review_instance_decision_item_id}/insights/#{governance_insight_id}"
      )
      |> add_param(:body, :body, microsoft_graph_governance_insight)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphGovernanceInsight},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property contactedReviewers for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_schedule_definition_id` (String.t): The unique identifier of accessReviewScheduleDefinition
  - `access_review_instance_id` (String.t): The unique identifier of accessReviewInstance
  - `access_review_reviewer_id` (String.t): The unique identifier of accessReviewReviewer
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_definitions_instances_delete_contacted_reviewers(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_definitions_instances_delete_contacted_reviewers(
        connection,
        access_review_schedule_definition_id,
        access_review_instance_id,
        access_review_reviewer_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/identityGovernance/accessReviews/definitions/#{access_review_schedule_definition_id}/instances/#{access_review_instance_id}/contactedReviewers/#{access_review_reviewer_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property decisions for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_schedule_definition_id` (String.t): The unique identifier of accessReviewScheduleDefinition
  - `access_review_instance_id` (String.t): The unique identifier of accessReviewInstance
  - `access_review_instance_decision_item_id` (String.t): The unique identifier of accessReviewInstanceDecisionItem
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_definitions_instances_delete_decisions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_definitions_instances_delete_decisions(
        connection,
        access_review_schedule_definition_id,
        access_review_instance_id,
        access_review_instance_decision_item_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/identityGovernance/accessReviews/definitions/#{access_review_schedule_definition_id}/instances/#{access_review_instance_id}/decisions/#{access_review_instance_decision_item_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property stages for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_schedule_definition_id` (String.t): The unique identifier of accessReviewScheduleDefinition
  - `access_review_instance_id` (String.t): The unique identifier of accessReviewInstance
  - `access_review_stage_id` (String.t): The unique identifier of accessReviewStage
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_definitions_instances_delete_stages(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_definitions_instances_delete_stages(
        connection,
        access_review_schedule_definition_id,
        access_review_instance_id,
        access_review_stage_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/identityGovernance/accessReviews/definitions/#{access_review_schedule_definition_id}/instances/#{access_review_instance_id}/stages/#{access_review_stage_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get contactedReviewers from identityGovernance
  Returns the collection of reviewers who were contacted to complete this review. While the reviewers and fallbackReviewers properties of the accessReviewScheduleDefinition might specify group owners or managers as reviewers, contactedReviewers returns their individual identities. Supports $select. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_schedule_definition_id` (String.t): The unique identifier of accessReviewScheduleDefinition
  - `access_review_instance_id` (String.t): The unique identifier of accessReviewInstance
  - `access_review_reviewer_id` (String.t): The unique identifier of accessReviewReviewer
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewReviewer.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_definitions_instances_get_contacted_reviewers(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewReviewer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_definitions_instances_get_contacted_reviewers(
        connection,
        access_review_schedule_definition_id,
        access_review_instance_id,
        access_review_reviewer_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/identityGovernance/accessReviews/definitions/#{access_review_schedule_definition_id}/instances/#{access_review_instance_id}/contactedReviewers/#{access_review_reviewer_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessReviewReviewer},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_schedule_definition_id` (String.t): The unique identifier of accessReviewScheduleDefinition
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_definitions_instances_get_count_b022(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_definitions_instances_get_count_b022(
        connection,
        access_review_schedule_definition_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/identityGovernance/accessReviews/definitions/#{access_review_schedule_definition_id}/instances/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get accessReviewInstanceDecisionItem
  Read the properties and relationships of an accessReviewInstanceDecisionItem object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_schedule_definition_id` (String.t): The unique identifier of accessReviewScheduleDefinition
  - `access_review_instance_id` (String.t): The unique identifier of accessReviewInstance
  - `access_review_instance_decision_item_id` (String.t): The unique identifier of accessReviewInstanceDecisionItem
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewInstanceDecisionItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_definitions_instances_get_decisions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewInstanceDecisionItem.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_definitions_instances_get_decisions(
        connection,
        access_review_schedule_definition_id,
        access_review_instance_id,
        access_review_instance_decision_item_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/identityGovernance/accessReviews/definitions/#{access_review_schedule_definition_id}/instances/#{access_review_instance_id}/decisions/#{access_review_instance_decision_item_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessReviewInstanceDecisionItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get accessReviewStage
  Retrieve the properties and relationships of an accessReviewStage object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_schedule_definition_id` (String.t): The unique identifier of accessReviewScheduleDefinition
  - `access_review_instance_id` (String.t): The unique identifier of accessReviewInstance
  - `access_review_stage_id` (String.t): The unique identifier of accessReviewStage
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewStage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_definitions_instances_get_stages(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewStage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_definitions_instances_get_stages(
        connection,
        access_review_schedule_definition_id,
        access_review_instance_id,
        access_review_stage_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/identityGovernance/accessReviews/definitions/#{access_review_schedule_definition_id}/instances/#{access_review_instance_id}/stages/#{access_review_stage_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessReviewStage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List contactedReviewers
  Get the reviewers for an access review instance, irrespective of whether or not they have received a notification. The reviewers are represented by an accessReviewReviewer object. A list of zero or more objects are returned, including all of their nested properties. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_schedule_definition_id` (String.t): The unique identifier of accessReviewScheduleDefinition
  - `access_review_instance_id` (String.t): The unique identifier of accessReviewInstance
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewReviewerCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_definitions_instances_list_contacted_reviewers(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewReviewerCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_definitions_instances_list_contacted_reviewers(
        connection,
        access_review_schedule_definition_id,
        access_review_instance_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/identityGovernance/accessReviews/definitions/#{access_review_schedule_definition_id}/instances/#{access_review_instance_id}/contactedReviewers"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessReviewReviewerCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List decisions
  Retrieve the accessReviewInstanceDecisionItem objects for a specific accessReviewInstance. A list of zero or more accessReviewInstanceDecisionItem objects are returned, including all of their nested properties. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_schedule_definition_id` (String.t): The unique identifier of accessReviewScheduleDefinition
  - `access_review_instance_id` (String.t): The unique identifier of accessReviewInstance
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewInstanceDecisionItemCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_definitions_instances_list_decisions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MicrosoftGraphAccessReviewInstanceDecisionItemCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_definitions_instances_list_decisions(
        connection,
        access_review_schedule_definition_id,
        access_review_instance_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/identityGovernance/accessReviews/definitions/#{access_review_schedule_definition_id}/instances/#{access_review_instance_id}/decisions"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MicrosoftGraphAccessReviewInstanceDecisionItemCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List stages (of an access review)
  Retrieve the stages in a multi-stage access review instance. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_schedule_definition_id` (String.t): The unique identifier of accessReviewScheduleDefinition
  - `access_review_instance_id` (String.t): The unique identifier of accessReviewInstance
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewStageCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_definitions_instances_list_stages(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewStageCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_definitions_instances_list_stages(
        connection,
        access_review_schedule_definition_id,
        access_review_instance_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/identityGovernance/accessReviews/definitions/#{access_review_schedule_definition_id}/instances/#{access_review_instance_id}/stages"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessReviewStageCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to decisions for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_schedule_definition_id` (String.t): The unique identifier of accessReviewScheduleDefinition
  - `access_review_instance_id` (String.t): The unique identifier of accessReviewInstance
  - `access_review_stage_id` (String.t): The unique identifier of accessReviewStage
  - `microsoft_graph_access_review_instance_decision_item` (MicrosoftGraphAccessReviewInstanceDecisionItem): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewInstanceDecisionItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_definitions_instances_stages_create_decisions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphAccessReviewInstanceDecisionItem.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewInstanceDecisionItem.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_definitions_instances_stages_create_decisions(
        connection,
        access_review_schedule_definition_id,
        access_review_instance_id,
        access_review_stage_id,
        microsoft_graph_access_review_instance_decision_item,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/identityGovernance/accessReviews/definitions/#{access_review_schedule_definition_id}/instances/#{access_review_instance_id}/stages/#{access_review_stage_id}/decisions"
      )
      |> add_param(:body, :body, microsoft_graph_access_review_instance_decision_item)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessReviewInstanceDecisionItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to insights for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_schedule_definition_id` (String.t): The unique identifier of accessReviewScheduleDefinition
  - `access_review_instance_id` (String.t): The unique identifier of accessReviewInstance
  - `access_review_stage_id` (String.t): The unique identifier of accessReviewStage
  - `access_review_instance_decision_item_id` (String.t): The unique identifier of accessReviewInstanceDecisionItem
  - `microsoft_graph_governance_insight` (MicrosoftGraphGovernanceInsight): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphGovernanceInsight.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_definitions_instances_stages_decisions_create_insights(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphGovernanceInsight.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphGovernanceInsight.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_definitions_instances_stages_decisions_create_insights(
        connection,
        access_review_schedule_definition_id,
        access_review_instance_id,
        access_review_stage_id,
        access_review_instance_decision_item_id,
        microsoft_graph_governance_insight,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/identityGovernance/accessReviews/definitions/#{access_review_schedule_definition_id}/instances/#{access_review_instance_id}/stages/#{access_review_stage_id}/decisions/#{access_review_instance_decision_item_id}/insights"
      )
      |> add_param(:body, :body, microsoft_graph_governance_insight)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphGovernanceInsight},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property insights for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_schedule_definition_id` (String.t): The unique identifier of accessReviewScheduleDefinition
  - `access_review_instance_id` (String.t): The unique identifier of accessReviewInstance
  - `access_review_stage_id` (String.t): The unique identifier of accessReviewStage
  - `access_review_instance_decision_item_id` (String.t): The unique identifier of accessReviewInstanceDecisionItem
  - `governance_insight_id` (String.t): The unique identifier of governanceInsight
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_definitions_instances_stages_decisions_delete_insights(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_definitions_instances_stages_decisions_delete_insights(
        connection,
        access_review_schedule_definition_id,
        access_review_instance_id,
        access_review_stage_id,
        access_review_instance_decision_item_id,
        governance_insight_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/identityGovernance/accessReviews/definitions/#{access_review_schedule_definition_id}/instances/#{access_review_instance_id}/stages/#{access_review_stage_id}/decisions/#{access_review_instance_decision_item_id}/insights/#{governance_insight_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_schedule_definition_id` (String.t): The unique identifier of accessReviewScheduleDefinition
  - `access_review_instance_id` (String.t): The unique identifier of accessReviewInstance
  - `access_review_stage_id` (String.t): The unique identifier of accessReviewStage
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_definitions_instances_stages_decisions_get_count35e1(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_definitions_instances_stages_decisions_get_count35e1(
        connection,
        access_review_schedule_definition_id,
        access_review_instance_id,
        access_review_stage_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/identityGovernance/accessReviews/definitions/#{access_review_schedule_definition_id}/instances/#{access_review_instance_id}/stages/#{access_review_stage_id}/decisions/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get insights from identityGovernance
  Insights are recommendations to reviewers on whether to approve or deny a decision. There can be multiple insights associated with an accessReviewInstanceDecisionItem.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_schedule_definition_id` (String.t): The unique identifier of accessReviewScheduleDefinition
  - `access_review_instance_id` (String.t): The unique identifier of accessReviewInstance
  - `access_review_stage_id` (String.t): The unique identifier of accessReviewStage
  - `access_review_instance_decision_item_id` (String.t): The unique identifier of accessReviewInstanceDecisionItem
  - `governance_insight_id` (String.t): The unique identifier of governanceInsight
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphGovernanceInsight.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_definitions_instances_stages_decisions_get_insights(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphGovernanceInsight.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_definitions_instances_stages_decisions_get_insights(
        connection,
        access_review_schedule_definition_id,
        access_review_instance_id,
        access_review_stage_id,
        access_review_instance_decision_item_id,
        governance_insight_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/identityGovernance/accessReviews/definitions/#{access_review_schedule_definition_id}/instances/#{access_review_instance_id}/stages/#{access_review_stage_id}/decisions/#{access_review_instance_decision_item_id}/insights/#{governance_insight_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphGovernanceInsight},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_schedule_definition_id` (String.t): The unique identifier of accessReviewScheduleDefinition
  - `access_review_instance_id` (String.t): The unique identifier of accessReviewInstance
  - `access_review_stage_id` (String.t): The unique identifier of accessReviewStage
  - `access_review_instance_decision_item_id` (String.t): The unique identifier of accessReviewInstanceDecisionItem
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_definitions_instances_stages_decisions_insights_get_count_fabb(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_definitions_instances_stages_decisions_insights_get_count_fabb(
        connection,
        access_review_schedule_definition_id,
        access_review_instance_id,
        access_review_stage_id,
        access_review_instance_decision_item_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/identityGovernance/accessReviews/definitions/#{access_review_schedule_definition_id}/instances/#{access_review_instance_id}/stages/#{access_review_stage_id}/decisions/#{access_review_instance_decision_item_id}/insights/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get insights from identityGovernance
  Insights are recommendations to reviewers on whether to approve or deny a decision. There can be multiple insights associated with an accessReviewInstanceDecisionItem.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_schedule_definition_id` (String.t): The unique identifier of accessReviewScheduleDefinition
  - `access_review_instance_id` (String.t): The unique identifier of accessReviewInstance
  - `access_review_stage_id` (String.t): The unique identifier of accessReviewStage
  - `access_review_instance_decision_item_id` (String.t): The unique identifier of accessReviewInstanceDecisionItem
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphGovernanceInsightCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_definitions_instances_stages_decisions_list_insights(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphGovernanceInsightCollectionResponse.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_definitions_instances_stages_decisions_list_insights(
        connection,
        access_review_schedule_definition_id,
        access_review_instance_id,
        access_review_stage_id,
        access_review_instance_decision_item_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/identityGovernance/accessReviews/definitions/#{access_review_schedule_definition_id}/instances/#{access_review_instance_id}/stages/#{access_review_stage_id}/decisions/#{access_review_instance_decision_item_id}/insights"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphGovernanceInsightCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property insights in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_schedule_definition_id` (String.t): The unique identifier of accessReviewScheduleDefinition
  - `access_review_instance_id` (String.t): The unique identifier of accessReviewInstance
  - `access_review_stage_id` (String.t): The unique identifier of accessReviewStage
  - `access_review_instance_decision_item_id` (String.t): The unique identifier of accessReviewInstanceDecisionItem
  - `governance_insight_id` (String.t): The unique identifier of governanceInsight
  - `microsoft_graph_governance_insight` (MicrosoftGraphGovernanceInsight): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphGovernanceInsight.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_definitions_instances_stages_decisions_update_insights(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphGovernanceInsight.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphGovernanceInsight.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_definitions_instances_stages_decisions_update_insights(
        connection,
        access_review_schedule_definition_id,
        access_review_instance_id,
        access_review_stage_id,
        access_review_instance_decision_item_id,
        governance_insight_id,
        microsoft_graph_governance_insight,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/identityGovernance/accessReviews/definitions/#{access_review_schedule_definition_id}/instances/#{access_review_instance_id}/stages/#{access_review_stage_id}/decisions/#{access_review_instance_decision_item_id}/insights/#{governance_insight_id}"
      )
      |> add_param(:body, :body, microsoft_graph_governance_insight)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphGovernanceInsight},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property decisions for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_schedule_definition_id` (String.t): The unique identifier of accessReviewScheduleDefinition
  - `access_review_instance_id` (String.t): The unique identifier of accessReviewInstance
  - `access_review_stage_id` (String.t): The unique identifier of accessReviewStage
  - `access_review_instance_decision_item_id` (String.t): The unique identifier of accessReviewInstanceDecisionItem
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_definitions_instances_stages_delete_decisions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_definitions_instances_stages_delete_decisions(
        connection,
        access_review_schedule_definition_id,
        access_review_instance_id,
        access_review_stage_id,
        access_review_instance_decision_item_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/identityGovernance/accessReviews/definitions/#{access_review_schedule_definition_id}/instances/#{access_review_instance_id}/stages/#{access_review_stage_id}/decisions/#{access_review_instance_decision_item_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_schedule_definition_id` (String.t): The unique identifier of accessReviewScheduleDefinition
  - `access_review_instance_id` (String.t): The unique identifier of accessReviewInstance
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_definitions_instances_stages_get_count_f2c5(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_definitions_instances_stages_get_count_f2c5(
        connection,
        access_review_schedule_definition_id,
        access_review_instance_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/identityGovernance/accessReviews/definitions/#{access_review_schedule_definition_id}/instances/#{access_review_instance_id}/stages/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get accessReviewInstanceDecisionItem
  Read the properties and relationships of an accessReviewInstanceDecisionItem object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_schedule_definition_id` (String.t): The unique identifier of accessReviewScheduleDefinition
  - `access_review_instance_id` (String.t): The unique identifier of accessReviewInstance
  - `access_review_stage_id` (String.t): The unique identifier of accessReviewStage
  - `access_review_instance_decision_item_id` (String.t): The unique identifier of accessReviewInstanceDecisionItem
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewInstanceDecisionItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_definitions_instances_stages_get_decisions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewInstanceDecisionItem.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_definitions_instances_stages_get_decisions(
        connection,
        access_review_schedule_definition_id,
        access_review_instance_id,
        access_review_stage_id,
        access_review_instance_decision_item_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/identityGovernance/accessReviews/definitions/#{access_review_schedule_definition_id}/instances/#{access_review_instance_id}/stages/#{access_review_stage_id}/decisions/#{access_review_instance_decision_item_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessReviewInstanceDecisionItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List decisions (from a multi-stage access review)
  Get the decisions from a stage in a multi-stage access review. The decisions in an accessReviewStage object are represented by an accessReviewInstanceDecisionItem object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_schedule_definition_id` (String.t): The unique identifier of accessReviewScheduleDefinition
  - `access_review_instance_id` (String.t): The unique identifier of accessReviewInstance
  - `access_review_stage_id` (String.t): The unique identifier of accessReviewStage
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewInstanceDecisionItemCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_definitions_instances_stages_list_decisions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MicrosoftGraphAccessReviewInstanceDecisionItemCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_definitions_instances_stages_list_decisions(
        connection,
        access_review_schedule_definition_id,
        access_review_instance_id,
        access_review_stage_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/identityGovernance/accessReviews/definitions/#{access_review_schedule_definition_id}/instances/#{access_review_instance_id}/stages/#{access_review_stage_id}/decisions"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MicrosoftGraphAccessReviewInstanceDecisionItemCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update accessReviewInstanceDecisionItem
  Update access decisions, known as accessReviewInstanceDecisionItems, for which the user is the reviewer. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_schedule_definition_id` (String.t): The unique identifier of accessReviewScheduleDefinition
  - `access_review_instance_id` (String.t): The unique identifier of accessReviewInstance
  - `access_review_stage_id` (String.t): The unique identifier of accessReviewStage
  - `access_review_instance_decision_item_id` (String.t): The unique identifier of accessReviewInstanceDecisionItem
  - `microsoft_graph_access_review_instance_decision_item` (MicrosoftGraphAccessReviewInstanceDecisionItem): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewInstanceDecisionItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_definitions_instances_stages_update_decisions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphAccessReviewInstanceDecisionItem.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewInstanceDecisionItem.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_definitions_instances_stages_update_decisions(
        connection,
        access_review_schedule_definition_id,
        access_review_instance_id,
        access_review_stage_id,
        access_review_instance_decision_item_id,
        microsoft_graph_access_review_instance_decision_item,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/identityGovernance/accessReviews/definitions/#{access_review_schedule_definition_id}/instances/#{access_review_instance_id}/stages/#{access_review_stage_id}/decisions/#{access_review_instance_decision_item_id}"
      )
      |> add_param(:body, :body, microsoft_graph_access_review_instance_decision_item)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessReviewInstanceDecisionItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property contactedReviewers in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_schedule_definition_id` (String.t): The unique identifier of accessReviewScheduleDefinition
  - `access_review_instance_id` (String.t): The unique identifier of accessReviewInstance
  - `access_review_reviewer_id` (String.t): The unique identifier of accessReviewReviewer
  - `microsoft_graph_access_review_reviewer` (MicrosoftGraphAccessReviewReviewer): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewReviewer.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_definitions_instances_update_contacted_reviewers(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphAccessReviewReviewer.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewReviewer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_definitions_instances_update_contacted_reviewers(
        connection,
        access_review_schedule_definition_id,
        access_review_instance_id,
        access_review_reviewer_id,
        microsoft_graph_access_review_reviewer,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/identityGovernance/accessReviews/definitions/#{access_review_schedule_definition_id}/instances/#{access_review_instance_id}/contactedReviewers/#{access_review_reviewer_id}"
      )
      |> add_param(:body, :body, microsoft_graph_access_review_reviewer)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessReviewReviewer},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property decisions in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_schedule_definition_id` (String.t): The unique identifier of accessReviewScheduleDefinition
  - `access_review_instance_id` (String.t): The unique identifier of accessReviewInstance
  - `access_review_instance_decision_item_id` (String.t): The unique identifier of accessReviewInstanceDecisionItem
  - `microsoft_graph_access_review_instance_decision_item` (MicrosoftGraphAccessReviewInstanceDecisionItem): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewInstanceDecisionItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_definitions_instances_update_decisions(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphAccessReviewInstanceDecisionItem.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewInstanceDecisionItem.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_definitions_instances_update_decisions(
        connection,
        access_review_schedule_definition_id,
        access_review_instance_id,
        access_review_instance_decision_item_id,
        microsoft_graph_access_review_instance_decision_item,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/identityGovernance/accessReviews/definitions/#{access_review_schedule_definition_id}/instances/#{access_review_instance_id}/decisions/#{access_review_instance_decision_item_id}"
      )
      |> add_param(:body, :body, microsoft_graph_access_review_instance_decision_item)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessReviewInstanceDecisionItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update accessReviewStage
  Update the properties of an accessReviewStage object. Only the reviewers and fallbackReviewers properties can be updated. You can only add reviewers to the fallbackReviewers property but can't remove existing fallbackReviewers. To update an accessReviewStage, its status must be NotStarted, Initializing, or InProgress. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_schedule_definition_id` (String.t): The unique identifier of accessReviewScheduleDefinition
  - `access_review_instance_id` (String.t): The unique identifier of accessReviewInstance
  - `access_review_stage_id` (String.t): The unique identifier of accessReviewStage
  - `microsoft_graph_access_review_stage` (MicrosoftGraphAccessReviewStage): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewStage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_definitions_instances_update_stages(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphAccessReviewStage.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewStage.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_definitions_instances_update_stages(
        connection,
        access_review_schedule_definition_id,
        access_review_instance_id,
        access_review_stage_id,
        microsoft_graph_access_review_stage,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/identityGovernance/accessReviews/definitions/#{access_review_schedule_definition_id}/instances/#{access_review_instance_id}/stages/#{access_review_stage_id}"
      )
      |> add_param(:body, :body, microsoft_graph_access_review_stage)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessReviewStage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List instances
  Get a list of the accessReviewInstance objects and their properties. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_schedule_definition_id` (String.t): The unique identifier of accessReviewScheduleDefinition
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewInstanceCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_definitions_list_instances(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewInstanceCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_definitions_list_instances(
        connection,
        access_review_schedule_definition_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/identityGovernance/accessReviews/definitions/#{access_review_schedule_definition_id}/instances"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessReviewInstanceCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update accessReviewInstance
  Update the properties of an accessReviewInstance object. Only the reviewers and fallbackReviewers properties can be updated but the scope property is also required in the request body. You can only add reviewers to the fallbackReviewers property but can't remove existing fallbackReviewers. To update an accessReviewInstance, it's status must be InProgress.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_schedule_definition_id` (String.t): The unique identifier of accessReviewScheduleDefinition
  - `access_review_instance_id` (String.t): The unique identifier of accessReviewInstance
  - `microsoft_graph_access_review_instance` (MicrosoftGraphAccessReviewInstance): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewInstance.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_definitions_update_instances(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphAccessReviewInstance.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewInstance.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_definitions_update_instances(
        connection,
        access_review_schedule_definition_id,
        access_review_instance_id,
        microsoft_graph_access_review_instance,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/identityGovernance/accessReviews/definitions/#{access_review_schedule_definition_id}/instances/#{access_review_instance_id}"
      )
      |> add_param(:body, :body, microsoft_graph_access_review_instance)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessReviewInstance},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete accessReviewScheduleDefinition
  Deletes an accessReviewScheduleDefinition object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_schedule_definition_id` (String.t): The unique identifier of accessReviewScheduleDefinition
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_delete_definitions(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_delete_definitions(
        connection,
        access_review_schedule_definition_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/identityGovernance/accessReviews/definitions/#{access_review_schedule_definition_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property historyDefinitions for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_history_definition_id` (String.t): The unique identifier of accessReviewHistoryDefinition
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_delete_history_definitions(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_delete_history_definitions(
        connection,
        access_review_history_definition_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/identityGovernance/accessReviews/historyDefinitions/#{access_review_history_definition_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get accessReviewScheduleDefinition
  Read the properties and relationships of an accessReviewScheduleDefinition object. To retrieve the instances of the access review series, use the list accessReviewInstance API. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_schedule_definition_id` (String.t): The unique identifier of accessReviewScheduleDefinition
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewScheduleDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_get_definitions(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewScheduleDefinition.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_get_definitions(
        connection,
        access_review_schedule_definition_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/identityGovernance/accessReviews/definitions/#{access_review_schedule_definition_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessReviewScheduleDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get accessReviewHistoryDefinition
  Retrieve an accessReviewHistoryDefinition object by its identifier. All the properties of the access review history definition object are returned. If the definition is 30 days or older, a 404 Not Found error is returned. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_history_definition_id` (String.t): The unique identifier of accessReviewHistoryDefinition
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewHistoryDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_get_history_definitions(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewHistoryDefinition.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_get_history_definitions(
        connection,
        access_review_history_definition_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/identityGovernance/accessReviews/historyDefinitions/#{access_review_history_definition_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessReviewHistoryDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to instances for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_history_definition_id` (String.t): The unique identifier of accessReviewHistoryDefinition
  - `microsoft_graph_access_review_history_instance` (MicrosoftGraphAccessReviewHistoryInstance): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewHistoryInstance.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_history_definitions_create_instances(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphAccessReviewHistoryInstance.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewHistoryInstance.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_history_definitions_create_instances(
        connection,
        access_review_history_definition_id,
        microsoft_graph_access_review_history_instance,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/identityGovernance/accessReviews/historyDefinitions/#{access_review_history_definition_id}/instances"
      )
      |> add_param(:body, :body, microsoft_graph_access_review_history_instance)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessReviewHistoryInstance},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property instances for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_history_definition_id` (String.t): The unique identifier of accessReviewHistoryDefinition
  - `access_review_history_instance_id` (String.t): The unique identifier of accessReviewHistoryInstance
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_history_definitions_delete_instances(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_history_definitions_delete_instances(
        connection,
        access_review_history_definition_id,
        access_review_history_instance_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/identityGovernance/accessReviews/historyDefinitions/#{access_review_history_definition_id}/instances/#{access_review_history_instance_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_history_definitions_get_count6aff(
          Tesla.Env.client(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_history_definitions_get_count6aff(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/accessReviews/historyDefinitions/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get instances from identityGovernance
  If the accessReviewHistoryDefinition is a recurring definition, instances represent each recurrence. A definition that doesn't recur will have exactly one instance.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_history_definition_id` (String.t): The unique identifier of accessReviewHistoryDefinition
  - `access_review_history_instance_id` (String.t): The unique identifier of accessReviewHistoryInstance
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewHistoryInstance.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_history_definitions_get_instances(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewHistoryInstance.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_history_definitions_get_instances(
        connection,
        access_review_history_definition_id,
        access_review_history_instance_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/identityGovernance/accessReviews/historyDefinitions/#{access_review_history_definition_id}/instances/#{access_review_history_instance_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessReviewHistoryInstance},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_history_definition_id` (String.t): The unique identifier of accessReviewHistoryDefinition
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_history_definitions_instances_get_count_cbe7(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_history_definitions_instances_get_count_cbe7(
        connection,
        access_review_history_definition_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/identityGovernance/accessReviews/historyDefinitions/#{access_review_history_definition_id}/instances/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List instances (of an accessReviewHistoryDefinition)
  Retrieve the instances of an access review history definition created in the last 30 days. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_history_definition_id` (String.t): The unique identifier of accessReviewHistoryDefinition
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewHistoryInstanceCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_history_definitions_list_instances(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MicrosoftGraphAccessReviewHistoryInstanceCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_history_definitions_list_instances(
        connection,
        access_review_history_definition_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/identityGovernance/accessReviews/historyDefinitions/#{access_review_history_definition_id}/instances"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessReviewHistoryInstanceCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property instances in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_history_definition_id` (String.t): The unique identifier of accessReviewHistoryDefinition
  - `access_review_history_instance_id` (String.t): The unique identifier of accessReviewHistoryInstance
  - `microsoft_graph_access_review_history_instance` (MicrosoftGraphAccessReviewHistoryInstance): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewHistoryInstance.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_history_definitions_update_instances(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphAccessReviewHistoryInstance.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewHistoryInstance.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_history_definitions_update_instances(
        connection,
        access_review_history_definition_id,
        access_review_history_instance_id,
        microsoft_graph_access_review_history_instance,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/identityGovernance/accessReviews/historyDefinitions/#{access_review_history_definition_id}/instances/#{access_review_history_instance_id}"
      )
      |> add_param(:body, :body, microsoft_graph_access_review_history_instance)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessReviewHistoryInstance},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List definitions
  Get a list of the accessReviewScheduleDefinition objects and their properties. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewScheduleDefinitionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_list_definitions(Tesla.Env.client(), keyword()) ::
          {:ok,
           MicrosoftGraph.Model.MicrosoftGraphAccessReviewScheduleDefinitionCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_list_definitions(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/accessReviews/definitions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MicrosoftGraphAccessReviewScheduleDefinitionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List historyDefinitions
  Retrieve the accessReviewHistoryDefinition objects created in the last 30 days, including all nested properties. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewHistoryDefinitionCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_list_history_definitions(Tesla.Env.client(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok,
             MicrosoftGraph.Model.MicrosoftGraphAccessReviewHistoryDefinitionCollectionResponse.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_list_history_definitions(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/accessReviews/historyDefinitions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessReviewHistoryDefinitionCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update accessReviewScheduleDefinition
  Update an existing accessReviewScheduleDefinition object to change one or more of its properties.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_schedule_definition_id` (String.t): The unique identifier of accessReviewScheduleDefinition
  - `microsoft_graph_access_review_schedule_definition` (MicrosoftGraphAccessReviewScheduleDefinition): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewScheduleDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_update_definitions(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphAccessReviewScheduleDefinition.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewScheduleDefinition.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_update_definitions(
        connection,
        access_review_schedule_definition_id,
        microsoft_graph_access_review_schedule_definition,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/identityGovernance/accessReviews/definitions/#{access_review_schedule_definition_id}"
      )
      |> add_param(:body, :body, microsoft_graph_access_review_schedule_definition)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessReviewScheduleDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property historyDefinitions in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `access_review_history_definition_id` (String.t): The unique identifier of accessReviewHistoryDefinition
  - `microsoft_graph_access_review_history_definition` (MicrosoftGraphAccessReviewHistoryDefinition): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewHistoryDefinition.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_access_reviews_update_history_definitions(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphAccessReviewHistoryDefinition.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewHistoryDefinition.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_access_reviews_update_history_definitions(
        connection,
        access_review_history_definition_id,
        microsoft_graph_access_review_history_definition,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/identityGovernance/accessReviews/historyDefinitions/#{access_review_history_definition_id}"
      )
      |> add_param(:body, :body, microsoft_graph_access_review_history_definition)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessReviewHistoryDefinition},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property accessReviews for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_delete_access_reviews(Tesla.Env.client(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_delete_access_reviews(connection, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/accessReviews")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get accessReviews from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_get_access_reviews(Tesla.Env.client(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewSet.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_get_access_reviews(connection, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/accessReviews")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessReviewSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property accessReviews in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_access_review_set` (MicrosoftGraphAccessReviewSet): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_update_access_reviews(
          Tesla.Env.client(),
          MicrosoftGraph.Model.MicrosoftGraphAccessReviewSet.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphAccessReviewSet.t()}
          | {:error, Tesla.Env.t()}
  def identity_governance_update_access_reviews(
        connection,
        microsoft_graph_access_review_set,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/accessReviews")
      |> add_param(:body, :body, microsoft_graph_access_review_set)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphAccessReviewSet},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
