# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.IdentityGovernancePrivilegedAccessRoot do
  @moduledoc """
  API calls for all endpoints tagged `IdentityGovernancePrivilegedAccessRoot`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Delete navigation property privilegedAccess for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_delete_privileged_access(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_delete_privileged_access(connection, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/privilegedAccess")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get privilegedAccess from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessRoot.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_get_privileged_access(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessRoot.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_get_privileged_access(connection, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessRoot},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property group for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_delete_group(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_delete_group(connection, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/privilegedAccess/group")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get group from identityGovernance
  A group that's governed through Privileged Identity Management (PIM).

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_get_group(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroup.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_get_group(connection, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to stages for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `approval_id` (String.t): The unique identifier of approval
  - `microsoft_graph_approval_stage` (MicrosoftGraphApprovalStage): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphApprovalStage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_assignment_approvals_create_stages(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphApprovalStage.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphApprovalStage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_assignment_approvals_create_stages(connection, approval_id, microsoft_graph_approval_stage, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/privilegedAccess/group/assignmentApprovals/#{approval_id}/stages")
      |> add_param(:body, :body, microsoft_graph_approval_stage)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphApprovalStage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property stages for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `approval_id` (String.t): The unique identifier of approval
  - `approval_stage_id` (String.t): The unique identifier of approvalStage
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_assignment_approvals_delete_stages(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_assignment_approvals_delete_stages(connection, approval_id, approval_stage_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/privilegedAccess/group/assignmentApprovals/#{approval_id}/stages/#{approval_stage_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_assignment_approvals_get_count612b(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_assignment_approvals_get_count612b(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/assignmentApprovals/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get approvalStage
  Retrieve the properties of an approvalStage object. An approval stage is contained within an approval object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `approval_id` (String.t): The unique identifier of approval
  - `approval_stage_id` (String.t): The unique identifier of approvalStage
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphApprovalStage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_assignment_approvals_get_stages(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphApprovalStage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_assignment_approvals_get_stages(connection, approval_id, approval_stage_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/assignmentApprovals/#{approval_id}/stages/#{approval_stage_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphApprovalStage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List approval stages
  List the approvalStage objects associated with an approval. This API request is made by an approver in the following scenarios: In Microsoft Entra entitlement management, providing the identifier of the access package assignment request. In PIM for groups, providing the identifier of the assignment schedule request. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `approval_id` (String.t): The unique identifier of approval
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphApprovalStageCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_assignment_approvals_list_stages(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphApprovalStageCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_assignment_approvals_list_stages(connection, approval_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/assignmentApprovals/#{approval_id}/stages")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphApprovalStageCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `approval_id` (String.t): The unique identifier of approval
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_assignment_approvals_stages_get_count8fe8(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_assignment_approvals_stages_get_count8fe8(connection, approval_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/assignmentApprovals/#{approval_id}/stages/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update approvalStage
  Approve or deny an approvalStage object in an approval. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `approval_id` (String.t): The unique identifier of approval
  - `approval_stage_id` (String.t): The unique identifier of approvalStage
  - `microsoft_graph_approval_stage` (MicrosoftGraphApprovalStage): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphApprovalStage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_assignment_approvals_update_stages(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphApprovalStage.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphApprovalStage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_assignment_approvals_update_stages(connection, approval_id, approval_stage_id, microsoft_graph_approval_stage, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/privilegedAccess/group/assignmentApprovals/#{approval_id}/stages/#{approval_stage_id}")
      |> add_param(:body, :body, microsoft_graph_approval_stage)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphApprovalStage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get activatedUsing from identityGovernance
  When the request activates a membership or ownership in PIM for groups, this object represents the eligibility request for the group. Otherwise, it is null.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `privileged_access_group_assignment_schedule_instance_id` (String.t): The unique identifier of privilegedAccessGroupAssignmentScheduleInstance
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupEligibilityScheduleInstance.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_assignment_schedule_instances_get_activated_using(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupEligibilityScheduleInstance.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_assignment_schedule_instances_get_activated_using(connection, privileged_access_group_assignment_schedule_instance_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/assignmentScheduleInstances/#{privileged_access_group_assignment_schedule_instance_id}/activatedUsing")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupEligibilityScheduleInstance},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_assignment_schedule_instances_get_count8aba(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_assignment_schedule_instances_get_count8aba(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/assignmentScheduleInstances/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get group from identityGovernance
  References the group that is the scope of the membership or ownership assignment through PIM for groups. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `privileged_access_group_assignment_schedule_instance_id` (String.t): The unique identifier of privilegedAccessGroupAssignmentScheduleInstance
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_assignment_schedule_instances_get_group(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphGroup.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_assignment_schedule_instances_get_group(connection, privileged_access_group_assignment_schedule_instance_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/assignmentScheduleInstances/#{privileged_access_group_assignment_schedule_instance_id}/group")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get principal from identityGovernance
  References the principal that's in the scope of the membership or ownership assignment request through the group that's governed by PIM. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `privileged_access_group_assignment_schedule_instance_id` (String.t): The unique identifier of privilegedAccessGroupAssignmentScheduleInstance
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_assignment_schedule_instances_get_principal(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_assignment_schedule_instances_get_principal(connection, privileged_access_group_assignment_schedule_instance_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/assignmentScheduleInstances/#{privileged_access_group_assignment_schedule_instance_id}/principal")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDirectoryObject},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get serviceProvisioningErrors property value

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `privileged_access_group_assignment_schedule_instance_id` (String.t): The unique identifier of privilegedAccessGroupAssignmentScheduleInstance
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_assignment_schedule_instances_group_list_service_provisioning_errors(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_assignment_schedule_instances_group_list_service_provisioning_errors(connection, privileged_access_group_assignment_schedule_instance_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/assignmentScheduleInstances/#{privileged_access_group_assignment_schedule_instance_id}/group/serviceProvisioningErrors")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `privileged_access_group_assignment_schedule_instance_id` (String.t): The unique identifier of privilegedAccessGroupAssignmentScheduleInstance
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_assignment_schedule_instances_group_service_provisioning_errors_get_count5e16(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_assignment_schedule_instances_group_service_provisioning_errors_get_count5e16(connection, privileged_access_group_assignment_schedule_instance_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/assignmentScheduleInstances/#{privileged_access_group_assignment_schedule_instance_id}/group/serviceProvisioningErrors/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get activatedUsing from identityGovernance
  When the request activates a membership or ownership assignment in PIM for groups, this object represents the eligibility policy for the group. Otherwise, it is null. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `privileged_access_group_assignment_schedule_request_id` (String.t): The unique identifier of privilegedAccessGroupAssignmentScheduleRequest
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupEligibilitySchedule.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_assignment_schedule_requests_get_activated_using(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupEligibilitySchedule.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_assignment_schedule_requests_get_activated_using(connection, privileged_access_group_assignment_schedule_request_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/assignmentScheduleRequests/#{privileged_access_group_assignment_schedule_request_id}/activatedUsing")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupEligibilitySchedule},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_assignment_schedule_requests_get_count_cd4f(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_assignment_schedule_requests_get_count_cd4f(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/assignmentScheduleRequests/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get group from identityGovernance
  References the group that is the scope of the membership or ownership assignment request through PIM for groups. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `privileged_access_group_assignment_schedule_request_id` (String.t): The unique identifier of privilegedAccessGroupAssignmentScheduleRequest
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_assignment_schedule_requests_get_group(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphGroup.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_assignment_schedule_requests_get_group(connection, privileged_access_group_assignment_schedule_request_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/assignmentScheduleRequests/#{privileged_access_group_assignment_schedule_request_id}/group")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get principal from identityGovernance
  References the principal that's in the scope of this membership or ownership assignment request through the group that's governed by PIM. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `privileged_access_group_assignment_schedule_request_id` (String.t): The unique identifier of privilegedAccessGroupAssignmentScheduleRequest
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_assignment_schedule_requests_get_principal(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_assignment_schedule_requests_get_principal(connection, privileged_access_group_assignment_schedule_request_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/assignmentScheduleRequests/#{privileged_access_group_assignment_schedule_request_id}/principal")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDirectoryObject},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get targetSchedule from identityGovernance
  Schedule created by this request. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `privileged_access_group_assignment_schedule_request_id` (String.t): The unique identifier of privilegedAccessGroupAssignmentScheduleRequest
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupEligibilitySchedule.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_assignment_schedule_requests_get_target_schedule(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupEligibilitySchedule.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_assignment_schedule_requests_get_target_schedule(connection, privileged_access_group_assignment_schedule_request_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/assignmentScheduleRequests/#{privileged_access_group_assignment_schedule_request_id}/targetSchedule")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupEligibilitySchedule},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get serviceProvisioningErrors property value

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `privileged_access_group_assignment_schedule_request_id` (String.t): The unique identifier of privilegedAccessGroupAssignmentScheduleRequest
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_assignment_schedule_requests_group_list_service_provisioning_errors(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_assignment_schedule_requests_group_list_service_provisioning_errors(connection, privileged_access_group_assignment_schedule_request_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/assignmentScheduleRequests/#{privileged_access_group_assignment_schedule_request_id}/group/serviceProvisioningErrors")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `privileged_access_group_assignment_schedule_request_id` (String.t): The unique identifier of privilegedAccessGroupAssignmentScheduleRequest
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_assignment_schedule_requests_group_service_provisioning_errors_get_count60a7(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_assignment_schedule_requests_group_service_provisioning_errors_get_count60a7(connection, privileged_access_group_assignment_schedule_request_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/assignmentScheduleRequests/#{privileged_access_group_assignment_schedule_request_id}/group/serviceProvisioningErrors/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get activatedUsing from identityGovernance
  When the request activates an ownership or membership assignment in PIM for groups, this object represents the eligibility relationship. Otherwise, it is null. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `privileged_access_group_assignment_schedule_id` (String.t): The unique identifier of privilegedAccessGroupAssignmentSchedule
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupEligibilitySchedule.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_assignment_schedules_get_activated_using(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupEligibilitySchedule.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_assignment_schedules_get_activated_using(connection, privileged_access_group_assignment_schedule_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/assignmentSchedules/#{privileged_access_group_assignment_schedule_id}/activatedUsing")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupEligibilitySchedule},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_assignment_schedules_get_count_c3b5(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_assignment_schedules_get_count_c3b5(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/assignmentSchedules/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get group from identityGovernance
  References the group that is the scope of the membership or ownership assignment through PIM for groups. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `privileged_access_group_assignment_schedule_id` (String.t): The unique identifier of privilegedAccessGroupAssignmentSchedule
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_assignment_schedules_get_group(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphGroup.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_assignment_schedules_get_group(connection, privileged_access_group_assignment_schedule_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/assignmentSchedules/#{privileged_access_group_assignment_schedule_id}/group")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get principal from identityGovernance
  References the principal that's in the scope of this membership or ownership assignment request to the group that's governed by PIM. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `privileged_access_group_assignment_schedule_id` (String.t): The unique identifier of privilegedAccessGroupAssignmentSchedule
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_assignment_schedules_get_principal(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_assignment_schedules_get_principal(connection, privileged_access_group_assignment_schedule_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/assignmentSchedules/#{privileged_access_group_assignment_schedule_id}/principal")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDirectoryObject},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get serviceProvisioningErrors property value

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `privileged_access_group_assignment_schedule_id` (String.t): The unique identifier of privilegedAccessGroupAssignmentSchedule
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_assignment_schedules_group_list_service_provisioning_errors(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_assignment_schedules_group_list_service_provisioning_errors(connection, privileged_access_group_assignment_schedule_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/assignmentSchedules/#{privileged_access_group_assignment_schedule_id}/group/serviceProvisioningErrors")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `privileged_access_group_assignment_schedule_id` (String.t): The unique identifier of privilegedAccessGroupAssignmentSchedule
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_assignment_schedules_group_service_provisioning_errors_get_count_f144(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_assignment_schedules_group_service_provisioning_errors_get_count_f144(connection, privileged_access_group_assignment_schedule_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/assignmentSchedules/#{privileged_access_group_assignment_schedule_id}/group/serviceProvisioningErrors/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to assignmentApprovals for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_approval` (MicrosoftGraphApproval): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphApproval.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_create_assignment_approvals(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphApproval.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphApproval.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_create_assignment_approvals(connection, microsoft_graph_approval, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/privilegedAccess/group/assignmentApprovals")
      |> add_param(:body, :body, microsoft_graph_approval)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphApproval},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to assignmentScheduleInstances for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_privileged_access_group_assignment_schedule_instance` (MicrosoftGraphPrivilegedAccessGroupAssignmentScheduleInstance): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupAssignmentScheduleInstance.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_create_assignment_schedule_instances(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupAssignmentScheduleInstance.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupAssignmentScheduleInstance.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_create_assignment_schedule_instances(connection, microsoft_graph_privileged_access_group_assignment_schedule_instance, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/privilegedAccess/group/assignmentScheduleInstances")
      |> add_param(:body, :body, microsoft_graph_privileged_access_group_assignment_schedule_instance)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupAssignmentScheduleInstance},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create assignmentScheduleRequest
  Create a new privilegedAccessGroupAssignmentScheduleRequest object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_privileged_access_group_assignment_schedule_request` (MicrosoftGraphPrivilegedAccessGroupAssignmentScheduleRequest): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupAssignmentScheduleRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_create_assignment_schedule_requests(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupAssignmentScheduleRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupAssignmentScheduleRequest.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_create_assignment_schedule_requests(connection, microsoft_graph_privileged_access_group_assignment_schedule_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/privilegedAccess/group/assignmentScheduleRequests")
      |> add_param(:body, :body, microsoft_graph_privileged_access_group_assignment_schedule_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupAssignmentScheduleRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to assignmentSchedules for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_privileged_access_group_assignment_schedule` (MicrosoftGraphPrivilegedAccessGroupAssignmentSchedule): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupAssignmentSchedule.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_create_assignment_schedules(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupAssignmentSchedule.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupAssignmentSchedule.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_create_assignment_schedules(connection, microsoft_graph_privileged_access_group_assignment_schedule, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/privilegedAccess/group/assignmentSchedules")
      |> add_param(:body, :body, microsoft_graph_privileged_access_group_assignment_schedule)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupAssignmentSchedule},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to eligibilityScheduleInstances for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_privileged_access_group_eligibility_schedule_instance` (MicrosoftGraphPrivilegedAccessGroupEligibilityScheduleInstance): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupEligibilityScheduleInstance.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_create_eligibility_schedule_instances(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupEligibilityScheduleInstance.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupEligibilityScheduleInstance.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_create_eligibility_schedule_instances(connection, microsoft_graph_privileged_access_group_eligibility_schedule_instance, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/privilegedAccess/group/eligibilityScheduleInstances")
      |> add_param(:body, :body, microsoft_graph_privileged_access_group_eligibility_schedule_instance)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupEligibilityScheduleInstance},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create eligibilityScheduleRequest
  Create a new privilegedAccessGroupEligibilityScheduleRequest object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_privileged_access_group_eligibility_schedule_request` (MicrosoftGraphPrivilegedAccessGroupEligibilityScheduleRequest): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupEligibilityScheduleRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_create_eligibility_schedule_requests(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupEligibilityScheduleRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupEligibilityScheduleRequest.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_create_eligibility_schedule_requests(connection, microsoft_graph_privileged_access_group_eligibility_schedule_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/privilegedAccess/group/eligibilityScheduleRequests")
      |> add_param(:body, :body, microsoft_graph_privileged_access_group_eligibility_schedule_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupEligibilityScheduleRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to eligibilitySchedules for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_privileged_access_group_eligibility_schedule` (MicrosoftGraphPrivilegedAccessGroupEligibilitySchedule): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupEligibilitySchedule.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_create_eligibility_schedules(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupEligibilitySchedule.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupEligibilitySchedule.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_create_eligibility_schedules(connection, microsoft_graph_privileged_access_group_eligibility_schedule, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/identityGovernance/privilegedAccess/group/eligibilitySchedules")
      |> add_param(:body, :body, microsoft_graph_privileged_access_group_eligibility_schedule)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupEligibilitySchedule},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property assignmentApprovals for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `approval_id` (String.t): The unique identifier of approval
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_delete_assignment_approvals(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_delete_assignment_approvals(connection, approval_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/privilegedAccess/group/assignmentApprovals/#{approval_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property assignmentScheduleInstances for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `privileged_access_group_assignment_schedule_instance_id` (String.t): The unique identifier of privilegedAccessGroupAssignmentScheduleInstance
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_delete_assignment_schedule_instances(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_delete_assignment_schedule_instances(connection, privileged_access_group_assignment_schedule_instance_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/privilegedAccess/group/assignmentScheduleInstances/#{privileged_access_group_assignment_schedule_instance_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property assignmentScheduleRequests for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `privileged_access_group_assignment_schedule_request_id` (String.t): The unique identifier of privilegedAccessGroupAssignmentScheduleRequest
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_delete_assignment_schedule_requests(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_delete_assignment_schedule_requests(connection, privileged_access_group_assignment_schedule_request_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/privilegedAccess/group/assignmentScheduleRequests/#{privileged_access_group_assignment_schedule_request_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property assignmentSchedules for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `privileged_access_group_assignment_schedule_id` (String.t): The unique identifier of privilegedAccessGroupAssignmentSchedule
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_delete_assignment_schedules(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_delete_assignment_schedules(connection, privileged_access_group_assignment_schedule_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/privilegedAccess/group/assignmentSchedules/#{privileged_access_group_assignment_schedule_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property eligibilityScheduleInstances for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `privileged_access_group_eligibility_schedule_instance_id` (String.t): The unique identifier of privilegedAccessGroupEligibilityScheduleInstance
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_delete_eligibility_schedule_instances(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_delete_eligibility_schedule_instances(connection, privileged_access_group_eligibility_schedule_instance_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/privilegedAccess/group/eligibilityScheduleInstances/#{privileged_access_group_eligibility_schedule_instance_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property eligibilityScheduleRequests for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `privileged_access_group_eligibility_schedule_request_id` (String.t): The unique identifier of privilegedAccessGroupEligibilityScheduleRequest
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_delete_eligibility_schedule_requests(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_delete_eligibility_schedule_requests(connection, privileged_access_group_eligibility_schedule_request_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/privilegedAccess/group/eligibilityScheduleRequests/#{privileged_access_group_eligibility_schedule_request_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property eligibilitySchedules for identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `privileged_access_group_eligibility_schedule_id` (String.t): The unique identifier of privilegedAccessGroupEligibilitySchedule
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_delete_eligibility_schedules(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_delete_eligibility_schedules(connection, privileged_access_group_eligibility_schedule_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/identityGovernance/privilegedAccess/group/eligibilitySchedules/#{privileged_access_group_eligibility_schedule_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_eligibility_schedule_instances_get_count_d5bc(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_eligibility_schedule_instances_get_count_d5bc(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/eligibilityScheduleInstances/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get group from identityGovernance
  References the group that is the scope of the membership or ownership eligibility through PIM for groups. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `privileged_access_group_eligibility_schedule_instance_id` (String.t): The unique identifier of privilegedAccessGroupEligibilityScheduleInstance
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_eligibility_schedule_instances_get_group(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphGroup.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_eligibility_schedule_instances_get_group(connection, privileged_access_group_eligibility_schedule_instance_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/eligibilityScheduleInstances/#{privileged_access_group_eligibility_schedule_instance_id}/group")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get principal from identityGovernance
  References the principal that's in the scope of the membership or ownership eligibility request through the group that's governed by PIM. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `privileged_access_group_eligibility_schedule_instance_id` (String.t): The unique identifier of privilegedAccessGroupEligibilityScheduleInstance
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_eligibility_schedule_instances_get_principal(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_eligibility_schedule_instances_get_principal(connection, privileged_access_group_eligibility_schedule_instance_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/eligibilityScheduleInstances/#{privileged_access_group_eligibility_schedule_instance_id}/principal")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDirectoryObject},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get serviceProvisioningErrors property value

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `privileged_access_group_eligibility_schedule_instance_id` (String.t): The unique identifier of privilegedAccessGroupEligibilityScheduleInstance
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_eligibility_schedule_instances_group_list_service_provisioning_errors(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_eligibility_schedule_instances_group_list_service_provisioning_errors(connection, privileged_access_group_eligibility_schedule_instance_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/eligibilityScheduleInstances/#{privileged_access_group_eligibility_schedule_instance_id}/group/serviceProvisioningErrors")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `privileged_access_group_eligibility_schedule_instance_id` (String.t): The unique identifier of privilegedAccessGroupEligibilityScheduleInstance
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_eligibility_schedule_instances_group_service_provisioning_errors_get_count_ce50(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_eligibility_schedule_instances_group_service_provisioning_errors_get_count_ce50(connection, privileged_access_group_eligibility_schedule_instance_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/eligibilityScheduleInstances/#{privileged_access_group_eligibility_schedule_instance_id}/group/serviceProvisioningErrors/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_eligibility_schedule_requests_get_count_e631(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_eligibility_schedule_requests_get_count_e631(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/eligibilityScheduleRequests/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get group from identityGovernance
  References the group that is the scope of the membership or ownership eligibility request through PIM for groups. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `privileged_access_group_eligibility_schedule_request_id` (String.t): The unique identifier of privilegedAccessGroupEligibilityScheduleRequest
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_eligibility_schedule_requests_get_group(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphGroup.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_eligibility_schedule_requests_get_group(connection, privileged_access_group_eligibility_schedule_request_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/eligibilityScheduleRequests/#{privileged_access_group_eligibility_schedule_request_id}/group")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get principal from identityGovernance
  References the principal that's in the scope of the membership or ownership eligibility request through the group that's governed by PIM. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `privileged_access_group_eligibility_schedule_request_id` (String.t): The unique identifier of privilegedAccessGroupEligibilityScheduleRequest
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_eligibility_schedule_requests_get_principal(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_eligibility_schedule_requests_get_principal(connection, privileged_access_group_eligibility_schedule_request_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/eligibilityScheduleRequests/#{privileged_access_group_eligibility_schedule_request_id}/principal")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDirectoryObject},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get targetSchedule from identityGovernance
  Schedule created by this request.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `privileged_access_group_eligibility_schedule_request_id` (String.t): The unique identifier of privilegedAccessGroupEligibilityScheduleRequest
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupEligibilitySchedule.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_eligibility_schedule_requests_get_target_schedule(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupEligibilitySchedule.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_eligibility_schedule_requests_get_target_schedule(connection, privileged_access_group_eligibility_schedule_request_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/eligibilityScheduleRequests/#{privileged_access_group_eligibility_schedule_request_id}/targetSchedule")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupEligibilitySchedule},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get serviceProvisioningErrors property value

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `privileged_access_group_eligibility_schedule_request_id` (String.t): The unique identifier of privilegedAccessGroupEligibilityScheduleRequest
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_eligibility_schedule_requests_group_list_service_provisioning_errors(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_eligibility_schedule_requests_group_list_service_provisioning_errors(connection, privileged_access_group_eligibility_schedule_request_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/eligibilityScheduleRequests/#{privileged_access_group_eligibility_schedule_request_id}/group/serviceProvisioningErrors")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `privileged_access_group_eligibility_schedule_request_id` (String.t): The unique identifier of privilegedAccessGroupEligibilityScheduleRequest
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_eligibility_schedule_requests_group_service_provisioning_errors_get_count_c344(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_eligibility_schedule_requests_group_service_provisioning_errors_get_count_c344(connection, privileged_access_group_eligibility_schedule_request_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/eligibilityScheduleRequests/#{privileged_access_group_eligibility_schedule_request_id}/group/serviceProvisioningErrors/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_eligibility_schedules_get_count_dc2d(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_eligibility_schedules_get_count_dc2d(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/eligibilitySchedules/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get group from identityGovernance
  References the group that is the scope of the membership or ownership eligibility through PIM for groups. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `privileged_access_group_eligibility_schedule_id` (String.t): The unique identifier of privilegedAccessGroupEligibilitySchedule
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_eligibility_schedules_get_group(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphGroup.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_eligibility_schedules_get_group(connection, privileged_access_group_eligibility_schedule_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/eligibilitySchedules/#{privileged_access_group_eligibility_schedule_id}/group")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get principal from identityGovernance
  References the principal that's in the scope of this membership or ownership eligibility request to the group that's governed by PIM. Supports $expand.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `privileged_access_group_eligibility_schedule_id` (String.t): The unique identifier of privilegedAccessGroupEligibilitySchedule
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_eligibility_schedules_get_principal(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_eligibility_schedules_get_principal(connection, privileged_access_group_eligibility_schedule_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/eligibilitySchedules/#{privileged_access_group_eligibility_schedule_id}/principal")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDirectoryObject},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get serviceProvisioningErrors property value

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `privileged_access_group_eligibility_schedule_id` (String.t): The unique identifier of privilegedAccessGroupEligibilitySchedule
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_eligibility_schedules_group_list_service_provisioning_errors(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_eligibility_schedules_group_list_service_provisioning_errors(connection, privileged_access_group_eligibility_schedule_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/eligibilitySchedules/#{privileged_access_group_eligibility_schedule_id}/group/serviceProvisioningErrors")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceProvisioningErrorCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `privileged_access_group_eligibility_schedule_id` (String.t): The unique identifier of privilegedAccessGroupEligibilitySchedule
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_eligibility_schedules_group_service_provisioning_errors_get_count_b2c5(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_eligibility_schedules_group_service_provisioning_errors_get_count_b2c5(connection, privileged_access_group_eligibility_schedule_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/eligibilitySchedules/#{privileged_access_group_eligibility_schedule_id}/group/serviceProvisioningErrors/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get assignmentApprovals from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `approval_id` (String.t): The unique identifier of approval
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphApproval.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_get_assignment_approvals(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphApproval.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_get_assignment_approvals(connection, approval_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/assignmentApprovals/#{approval_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphApproval},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get privilegedAccessGroupAssignmentScheduleInstance
  Read the properties and relationships of a privilegedAccessGroupAssignmentScheduleInstance object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `privileged_access_group_assignment_schedule_instance_id` (String.t): The unique identifier of privilegedAccessGroupAssignmentScheduleInstance
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupAssignmentScheduleInstance.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_get_assignment_schedule_instances(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupAssignmentScheduleInstance.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_get_assignment_schedule_instances(connection, privileged_access_group_assignment_schedule_instance_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/assignmentScheduleInstances/#{privileged_access_group_assignment_schedule_instance_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupAssignmentScheduleInstance},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get privilegedAccessGroupAssignmentScheduleRequest
  Read the properties and relationships of a privilegedAccessGroupAssignmentScheduleRequest object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `privileged_access_group_assignment_schedule_request_id` (String.t): The unique identifier of privilegedAccessGroupAssignmentScheduleRequest
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupAssignmentScheduleRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_get_assignment_schedule_requests(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupAssignmentScheduleRequest.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_get_assignment_schedule_requests(connection, privileged_access_group_assignment_schedule_request_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/assignmentScheduleRequests/#{privileged_access_group_assignment_schedule_request_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupAssignmentScheduleRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get privilegedAccessGroupAssignmentSchedule
  Read the properties and relationships of a privilegedAccessGroupAssignmentSchedule object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `privileged_access_group_assignment_schedule_id` (String.t): The unique identifier of privilegedAccessGroupAssignmentSchedule
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupAssignmentSchedule.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_get_assignment_schedules(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupAssignmentSchedule.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_get_assignment_schedules(connection, privileged_access_group_assignment_schedule_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/assignmentSchedules/#{privileged_access_group_assignment_schedule_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupAssignmentSchedule},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get privilegedAccessGroupEligibilityScheduleInstance
  Read the properties and relationships of a privilegedAccessGroupEligibilityScheduleInstance object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `privileged_access_group_eligibility_schedule_instance_id` (String.t): The unique identifier of privilegedAccessGroupEligibilityScheduleInstance
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupEligibilityScheduleInstance.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_get_eligibility_schedule_instances(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupEligibilityScheduleInstance.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_get_eligibility_schedule_instances(connection, privileged_access_group_eligibility_schedule_instance_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/eligibilityScheduleInstances/#{privileged_access_group_eligibility_schedule_instance_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupEligibilityScheduleInstance},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get privilegedAccessGroupEligibilityScheduleRequest
  Read the properties and relationships of a privilegedAccessGroupEligibilityScheduleRequest object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `privileged_access_group_eligibility_schedule_request_id` (String.t): The unique identifier of privilegedAccessGroupEligibilityScheduleRequest
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupEligibilityScheduleRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_get_eligibility_schedule_requests(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupEligibilityScheduleRequest.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_get_eligibility_schedule_requests(connection, privileged_access_group_eligibility_schedule_request_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/eligibilityScheduleRequests/#{privileged_access_group_eligibility_schedule_request_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupEligibilityScheduleRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get privilegedAccessGroupEligibilitySchedule
  Read the properties and relationships of a privilegedAccessGroupEligibilitySchedule object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `privileged_access_group_eligibility_schedule_id` (String.t): The unique identifier of privilegedAccessGroupEligibilitySchedule
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupEligibilitySchedule.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_get_eligibility_schedules(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupEligibilitySchedule.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_get_eligibility_schedules(connection, privileged_access_group_eligibility_schedule_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/eligibilitySchedules/#{privileged_access_group_eligibility_schedule_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupEligibilitySchedule},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get assignmentApprovals from identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphApprovalCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_list_assignment_approvals(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphApprovalCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_list_assignment_approvals(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/assignmentApprovals")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphApprovalCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List assignmentScheduleInstances
  Get a list of the privilegedAccessGroupAssignmentScheduleInstance objects and their properties. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupAssignmentScheduleInstanceCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_list_assignment_schedule_instances(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupAssignmentScheduleInstanceCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_list_assignment_schedule_instances(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/assignmentScheduleInstances")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupAssignmentScheduleInstanceCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List assignmentScheduleRequests
  Get a list of the privilegedAccessGroupAssignmentScheduleRequest objects and their properties. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupAssignmentScheduleRequestCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_list_assignment_schedule_requests(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupAssignmentScheduleRequestCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_list_assignment_schedule_requests(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/assignmentScheduleRequests")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupAssignmentScheduleRequestCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List assignmentSchedules
  Get a list of the privilegedAccessGroupAssignmentSchedule objects and their properties. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupAssignmentScheduleCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_list_assignment_schedules(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupAssignmentScheduleCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_list_assignment_schedules(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/assignmentSchedules")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupAssignmentScheduleCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List eligibilityScheduleInstances
  Get a list of the privilegedAccessGroupEligibilityScheduleInstance objects and their properties. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupEligibilityScheduleInstanceCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_list_eligibility_schedule_instances(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupEligibilityScheduleInstanceCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_list_eligibility_schedule_instances(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/eligibilityScheduleInstances")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupEligibilityScheduleInstanceCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List eligibilityScheduleRequests
  Get a list of the privilegedAccessGroupEligibilityScheduleRequest objects and their properties. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupEligibilityScheduleRequestCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_list_eligibility_schedule_requests(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupEligibilityScheduleRequestCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_list_eligibility_schedule_requests(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/eligibilityScheduleRequests")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupEligibilityScheduleRequestCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List eligibilitySchedules
  Get a list of the privilegedAccessGroupEligibilitySchedule objects and their properties. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupEligibilityScheduleCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_list_eligibility_schedules(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupEligibilityScheduleCollectionResponse.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_list_eligibility_schedules(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/identityGovernance/privilegedAccess/group/eligibilitySchedules")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupEligibilityScheduleCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property assignmentApprovals in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `approval_id` (String.t): The unique identifier of approval
  - `microsoft_graph_approval` (MicrosoftGraphApproval): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphApproval.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_update_assignment_approvals(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphApproval.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphApproval.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_update_assignment_approvals(connection, approval_id, microsoft_graph_approval, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/privilegedAccess/group/assignmentApprovals/#{approval_id}")
      |> add_param(:body, :body, microsoft_graph_approval)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphApproval},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property assignmentScheduleInstances in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `privileged_access_group_assignment_schedule_instance_id` (String.t): The unique identifier of privilegedAccessGroupAssignmentScheduleInstance
  - `microsoft_graph_privileged_access_group_assignment_schedule_instance` (MicrosoftGraphPrivilegedAccessGroupAssignmentScheduleInstance): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupAssignmentScheduleInstance.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_update_assignment_schedule_instances(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupAssignmentScheduleInstance.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupAssignmentScheduleInstance.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_update_assignment_schedule_instances(connection, privileged_access_group_assignment_schedule_instance_id, microsoft_graph_privileged_access_group_assignment_schedule_instance, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/privilegedAccess/group/assignmentScheduleInstances/#{privileged_access_group_assignment_schedule_instance_id}")
      |> add_param(:body, :body, microsoft_graph_privileged_access_group_assignment_schedule_instance)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupAssignmentScheduleInstance},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property assignmentScheduleRequests in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `privileged_access_group_assignment_schedule_request_id` (String.t): The unique identifier of privilegedAccessGroupAssignmentScheduleRequest
  - `microsoft_graph_privileged_access_group_assignment_schedule_request` (MicrosoftGraphPrivilegedAccessGroupAssignmentScheduleRequest): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupAssignmentScheduleRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_update_assignment_schedule_requests(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupAssignmentScheduleRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupAssignmentScheduleRequest.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_update_assignment_schedule_requests(connection, privileged_access_group_assignment_schedule_request_id, microsoft_graph_privileged_access_group_assignment_schedule_request, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/privilegedAccess/group/assignmentScheduleRequests/#{privileged_access_group_assignment_schedule_request_id}")
      |> add_param(:body, :body, microsoft_graph_privileged_access_group_assignment_schedule_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupAssignmentScheduleRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property assignmentSchedules in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `privileged_access_group_assignment_schedule_id` (String.t): The unique identifier of privilegedAccessGroupAssignmentSchedule
  - `microsoft_graph_privileged_access_group_assignment_schedule` (MicrosoftGraphPrivilegedAccessGroupAssignmentSchedule): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupAssignmentSchedule.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_update_assignment_schedules(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupAssignmentSchedule.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupAssignmentSchedule.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_update_assignment_schedules(connection, privileged_access_group_assignment_schedule_id, microsoft_graph_privileged_access_group_assignment_schedule, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/privilegedAccess/group/assignmentSchedules/#{privileged_access_group_assignment_schedule_id}")
      |> add_param(:body, :body, microsoft_graph_privileged_access_group_assignment_schedule)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupAssignmentSchedule},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property eligibilityScheduleInstances in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `privileged_access_group_eligibility_schedule_instance_id` (String.t): The unique identifier of privilegedAccessGroupEligibilityScheduleInstance
  - `microsoft_graph_privileged_access_group_eligibility_schedule_instance` (MicrosoftGraphPrivilegedAccessGroupEligibilityScheduleInstance): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupEligibilityScheduleInstance.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_update_eligibility_schedule_instances(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupEligibilityScheduleInstance.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupEligibilityScheduleInstance.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_update_eligibility_schedule_instances(connection, privileged_access_group_eligibility_schedule_instance_id, microsoft_graph_privileged_access_group_eligibility_schedule_instance, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/privilegedAccess/group/eligibilityScheduleInstances/#{privileged_access_group_eligibility_schedule_instance_id}")
      |> add_param(:body, :body, microsoft_graph_privileged_access_group_eligibility_schedule_instance)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupEligibilityScheduleInstance},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property eligibilityScheduleRequests in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `privileged_access_group_eligibility_schedule_request_id` (String.t): The unique identifier of privilegedAccessGroupEligibilityScheduleRequest
  - `microsoft_graph_privileged_access_group_eligibility_schedule_request` (MicrosoftGraphPrivilegedAccessGroupEligibilityScheduleRequest): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupEligibilityScheduleRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_update_eligibility_schedule_requests(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupEligibilityScheduleRequest.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupEligibilityScheduleRequest.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_update_eligibility_schedule_requests(connection, privileged_access_group_eligibility_schedule_request_id, microsoft_graph_privileged_access_group_eligibility_schedule_request, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/privilegedAccess/group/eligibilityScheduleRequests/#{privileged_access_group_eligibility_schedule_request_id}")
      |> add_param(:body, :body, microsoft_graph_privileged_access_group_eligibility_schedule_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupEligibilityScheduleRequest},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property eligibilitySchedules in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `privileged_access_group_eligibility_schedule_id` (String.t): The unique identifier of privilegedAccessGroupEligibilitySchedule
  - `microsoft_graph_privileged_access_group_eligibility_schedule` (MicrosoftGraphPrivilegedAccessGroupEligibilitySchedule): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupEligibilitySchedule.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_group_update_eligibility_schedules(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupEligibilitySchedule.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupEligibilitySchedule.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_group_update_eligibility_schedules(connection, privileged_access_group_eligibility_schedule_id, microsoft_graph_privileged_access_group_eligibility_schedule, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/privilegedAccess/group/eligibilitySchedules/#{privileged_access_group_eligibility_schedule_id}")
      |> add_param(:body, :body, microsoft_graph_privileged_access_group_eligibility_schedule)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroupEligibilitySchedule},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property group in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_privileged_access_group` (MicrosoftGraphPrivilegedAccessGroup): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_privileged_access_update_group(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroup.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroup.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_privileged_access_update_group(connection, microsoft_graph_privileged_access_group, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/privilegedAccess/group")
      |> add_param(:body, :body, microsoft_graph_privileged_access_group)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessGroup},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property privilegedAccess in identityGovernance

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_privileged_access_root` (MicrosoftGraphPrivilegedAccessRoot): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessRoot.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec identity_governance_update_privileged_access(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessRoot.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessRoot.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def identity_governance_update_privileged_access(connection, microsoft_graph_privileged_access_root, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/identityGovernance/privilegedAccess")
      |> add_param(:body, :body, microsoft_graph_privileged_access_root)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphPrivilegedAccessRoot},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
