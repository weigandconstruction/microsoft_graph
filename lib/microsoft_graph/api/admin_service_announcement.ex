# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.AdminServiceAnnouncement do
  @moduledoc """
  API calls for all endpoints tagged `AdminServiceAnnouncement`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Delete navigation property serviceAnnouncement for admin

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_delete_service_announcement(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def admin_delete_service_announcement(connection, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/admin/serviceAnnouncement")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get serviceAnnouncement from admin
  A container for service communications resources. Read-only.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceAnnouncement.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_get_service_announcement(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceAnnouncement.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def admin_get_service_announcement(connection, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/admin/serviceAnnouncement")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceAnnouncement},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to healthOverviews for admin

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_service_health` (MicrosoftGraphServiceHealth): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceHealth.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_service_announcement_create_health_overviews(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphServiceHealth.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceHealth.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def admin_service_announcement_create_health_overviews(connection, microsoft_graph_service_health, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/admin/serviceAnnouncement/healthOverviews")
      |> add_param(:body, :body, microsoft_graph_service_health)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceHealth},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to issues for admin

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_service_health_issue` (MicrosoftGraphServiceHealthIssue): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceHealthIssue.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_service_announcement_create_issues(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphServiceHealthIssue.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceHealthIssue.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def admin_service_announcement_create_issues(connection, microsoft_graph_service_health_issue, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/admin/serviceAnnouncement/issues")
      |> add_param(:body, :body, microsoft_graph_service_health_issue)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceHealthIssue},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to messages for admin

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_service_update_message` (MicrosoftGraphServiceUpdateMessage): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceUpdateMessage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_service_announcement_create_messages(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphServiceUpdateMessage.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceUpdateMessage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def admin_service_announcement_create_messages(connection, microsoft_graph_service_update_message, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/admin/serviceAnnouncement/messages")
      |> add_param(:body, :body, microsoft_graph_service_update_message)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceUpdateMessage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property healthOverviews for admin

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_health_id` (String.t): The unique identifier of serviceHealth
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_service_announcement_delete_health_overviews(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def admin_service_announcement_delete_health_overviews(connection, service_health_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/admin/serviceAnnouncement/healthOverviews/#{service_health_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property issues for admin

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_health_issue_id` (String.t): The unique identifier of serviceHealthIssue
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_service_announcement_delete_issues(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def admin_service_announcement_delete_issues(connection, service_health_issue_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/admin/serviceAnnouncement/issues/#{service_health_issue_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property messages for admin

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_update_message_id` (String.t): The unique identifier of serviceUpdateMessage
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_service_announcement_delete_messages(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def admin_service_announcement_delete_messages(connection, service_update_message_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/admin/serviceAnnouncement/messages/#{service_update_message_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get serviceHealth
  Retrieve the properties and relationships of a serviceHealth object. This operation provides the health information of a specified service for a tenant. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_health_id` (String.t): The unique identifier of serviceHealth
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceHealth.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_service_announcement_get_health_overviews(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceHealth.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def admin_service_announcement_get_health_overviews(connection, service_health_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/admin/serviceAnnouncement/healthOverviews/#{service_health_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceHealth},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get serviceHealthIssue
  Retrieve the properties and relationships of a serviceHealthIssue object. This operation retrieves a specified service health issue for tenant. The operation returns an error if the issue does not exist for the tenant. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_health_issue_id` (String.t): The unique identifier of serviceHealthIssue
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceHealthIssue.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_service_announcement_get_issues(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceHealthIssue.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def admin_service_announcement_get_issues(connection, service_health_issue_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/admin/serviceAnnouncement/issues/#{service_health_issue_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceHealthIssue},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get serviceUpdateMessage
  Retrieve the properties and relationships of a serviceUpdateMessage object. This operation retrieves a specified service update message for the tenant. The operation returns an error if the message does not exist for the tenant. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_update_message_id` (String.t): The unique identifier of serviceUpdateMessage
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceUpdateMessage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_service_announcement_get_messages(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceUpdateMessage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def admin_service_announcement_get_messages(connection, service_update_message_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/admin/serviceAnnouncement/messages/#{service_update_message_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceUpdateMessage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get attachmentsArchive for the navigation property messages from admin
  The zip file that contains all attachments for a message.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_update_message_id` (String.t): The unique identifier of serviceUpdateMessage
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_service_announcement_get_messages_attachments_archive(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def admin_service_announcement_get_messages_attachments_archive(connection, service_update_message_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/admin/serviceAnnouncement/messages/#{service_update_message_id}/attachmentsArchive")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to issues for admin

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_health_id` (String.t): The unique identifier of serviceHealth
  - `microsoft_graph_service_health_issue` (MicrosoftGraphServiceHealthIssue): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceHealthIssue.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_service_announcement_health_overviews_create_issues(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphServiceHealthIssue.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceHealthIssue.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def admin_service_announcement_health_overviews_create_issues(connection, service_health_id, microsoft_graph_service_health_issue, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/admin/serviceAnnouncement/healthOverviews/#{service_health_id}/issues")
      |> add_param(:body, :body, microsoft_graph_service_health_issue)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceHealthIssue},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property issues for admin

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_health_id` (String.t): The unique identifier of serviceHealth
  - `service_health_issue_id` (String.t): The unique identifier of serviceHealthIssue
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_service_announcement_health_overviews_delete_issues(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def admin_service_announcement_health_overviews_delete_issues(connection, service_health_id, service_health_issue_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/admin/serviceAnnouncement/healthOverviews/#{service_health_id}/issues/#{service_health_issue_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_service_announcement_health_overviews_get_count51c2(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def admin_service_announcement_health_overviews_get_count51c2(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/admin/serviceAnnouncement/healthOverviews/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get issues from admin
  A collection of issues that happened on the service, with detailed information for each issue.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_health_id` (String.t): The unique identifier of serviceHealth
  - `service_health_issue_id` (String.t): The unique identifier of serviceHealthIssue
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceHealthIssue.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_service_announcement_health_overviews_get_issues(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceHealthIssue.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def admin_service_announcement_health_overviews_get_issues(connection, service_health_id, service_health_issue_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/admin/serviceAnnouncement/healthOverviews/#{service_health_id}/issues/#{service_health_issue_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceHealthIssue},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_health_id` (String.t): The unique identifier of serviceHealth
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_service_announcement_health_overviews_issues_get_count_fd80(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def admin_service_announcement_health_overviews_issues_get_count_fd80(connection, service_health_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/admin/serviceAnnouncement/healthOverviews/#{service_health_id}/issues/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get issues from admin
  A collection of issues that happened on the service, with detailed information for each issue.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_health_id` (String.t): The unique identifier of serviceHealth
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceHealthIssueCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_service_announcement_health_overviews_list_issues(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceHealthIssueCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def admin_service_announcement_health_overviews_list_issues(connection, service_health_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/admin/serviceAnnouncement/healthOverviews/#{service_health_id}/issues")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceHealthIssueCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property issues in admin

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_health_id` (String.t): The unique identifier of serviceHealth
  - `service_health_issue_id` (String.t): The unique identifier of serviceHealthIssue
  - `microsoft_graph_service_health_issue` (MicrosoftGraphServiceHealthIssue): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceHealthIssue.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_service_announcement_health_overviews_update_issues(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphServiceHealthIssue.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceHealthIssue.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def admin_service_announcement_health_overviews_update_issues(connection, service_health_id, service_health_issue_id, microsoft_graph_service_health_issue, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/admin/serviceAnnouncement/healthOverviews/#{service_health_id}/issues/#{service_health_issue_id}")
      |> add_param(:body, :body, microsoft_graph_service_health_issue)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceHealthIssue},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_service_announcement_issues_get_count_e140(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def admin_service_announcement_issues_get_count_e140(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/admin/serviceAnnouncement/issues/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List healthOverviews
  Retrieve the serviceHealth resources from the healthOverviews navigation property. This operation provides the health report of all subscribed services for a tenant. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceHealthCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_service_announcement_list_health_overviews(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceHealthCollectionResponse.t} | {:error, Tesla.Env.t}
  def admin_service_announcement_list_health_overviews(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/admin/serviceAnnouncement/healthOverviews")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceHealthCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List issues
  Retrieve serviceHealthIssue resources from the issues navigation property. This operation retrieves information about all service health issues that exist for the tenant. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceHealthIssueCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_service_announcement_list_issues(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceHealthIssueCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def admin_service_announcement_list_issues(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/admin/serviceAnnouncement/issues")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceHealthIssueCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List serviceAnnouncement messages
  Retrieve the serviceUpdateMessage resources from the messages navigation property. This operation retrieves all service update messages that exist for the tenant. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceUpdateMessageCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_service_announcement_list_messages(Tesla.Env.client, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceUpdateMessageCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def admin_service_announcement_list_messages(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/admin/serviceAnnouncement/messages")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceUpdateMessageCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_update_message_id` (String.t): The unique identifier of serviceUpdateMessage
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_service_announcement_messages_attachments_get_count_e0ef(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def admin_service_announcement_messages_attachments_get_count_e0ef(connection, service_update_message_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/admin/serviceAnnouncement/messages/#{service_update_message_id}/attachments/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to attachments for admin

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_update_message_id` (String.t): The unique identifier of serviceUpdateMessage
  - `microsoft_graph_service_announcement_attachment` (MicrosoftGraphServiceAnnouncementAttachment): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceAnnouncementAttachment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_service_announcement_messages_create_attachments(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphServiceAnnouncementAttachment.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceAnnouncementAttachment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def admin_service_announcement_messages_create_attachments(connection, service_update_message_id, microsoft_graph_service_announcement_attachment, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/admin/serviceAnnouncement/messages/#{service_update_message_id}/attachments")
      |> add_param(:body, :body, microsoft_graph_service_announcement_attachment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceAnnouncementAttachment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property attachments for admin

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_update_message_id` (String.t): The unique identifier of serviceUpdateMessage
  - `service_announcement_attachment_id` (String.t): The unique identifier of serviceAnnouncementAttachment
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_service_announcement_messages_delete_attachments(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def admin_service_announcement_messages_delete_attachments(connection, service_update_message_id, service_announcement_attachment_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/admin/serviceAnnouncement/messages/#{service_update_message_id}/attachments/#{service_announcement_attachment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get serviceAnnouncementAttachment
  Read the properties and relationships of a serviceAnnouncementAttachment object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_update_message_id` (String.t): The unique identifier of serviceUpdateMessage
  - `service_announcement_attachment_id` (String.t): The unique identifier of serviceAnnouncementAttachment
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceAnnouncementAttachment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_service_announcement_messages_get_attachments(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceAnnouncementAttachment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def admin_service_announcement_messages_get_attachments(connection, service_update_message_id, service_announcement_attachment_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/admin/serviceAnnouncement/messages/#{service_update_message_id}/attachments/#{service_announcement_attachment_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceAnnouncementAttachment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get content for the navigation property attachments from admin
  The attachment content.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_update_message_id` (String.t): The unique identifier of serviceUpdateMessage
  - `service_announcement_attachment_id` (String.t): The unique identifier of serviceAnnouncementAttachment
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_service_announcement_messages_get_attachments_content(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def admin_service_announcement_messages_get_attachments_content(connection, service_update_message_id, service_announcement_attachment_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/admin/serviceAnnouncement/messages/#{service_update_message_id}/attachments/#{service_announcement_attachment_id}/content")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_service_announcement_messages_get_count0cc9(Tesla.Env.client, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def admin_service_announcement_messages_get_count0cc9(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/admin/serviceAnnouncement/messages/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List attachments
  Get the list of attachments associated with a service message. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_update_message_id` (String.t): The unique identifier of serviceUpdateMessage
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceAnnouncementAttachmentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_service_announcement_messages_list_attachments(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceAnnouncementAttachmentCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def admin_service_announcement_messages_list_attachments(connection, service_update_message_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/admin/serviceAnnouncement/messages/#{service_update_message_id}/attachments")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceAnnouncementAttachmentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property attachments in admin

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_update_message_id` (String.t): The unique identifier of serviceUpdateMessage
  - `service_announcement_attachment_id` (String.t): The unique identifier of serviceAnnouncementAttachment
  - `microsoft_graph_service_announcement_attachment` (MicrosoftGraphServiceAnnouncementAttachment): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceAnnouncementAttachment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_service_announcement_messages_update_attachments(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphServiceAnnouncementAttachment.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceAnnouncementAttachment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def admin_service_announcement_messages_update_attachments(connection, service_update_message_id, service_announcement_attachment_id, microsoft_graph_service_announcement_attachment, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/admin/serviceAnnouncement/messages/#{service_update_message_id}/attachments/#{service_announcement_attachment_id}")
      |> add_param(:body, :body, microsoft_graph_service_announcement_attachment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceAnnouncementAttachment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update content for the navigation property attachments in admin
  The attachment content.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_update_message_id` (String.t): The unique identifier of serviceUpdateMessage
  - `service_announcement_attachment_id` (String.t): The unique identifier of serviceAnnouncementAttachment
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceAnnouncementAttachment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_service_announcement_messages_update_attachments_content(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceAnnouncementAttachment.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def admin_service_announcement_messages_update_attachments_content(connection, service_update_message_id, service_announcement_attachment_id, body, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/admin/serviceAnnouncement/messages/#{service_update_message_id}/attachments/#{service_announcement_attachment_id}/content")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceAnnouncementAttachment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property healthOverviews in admin

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_health_id` (String.t): The unique identifier of serviceHealth
  - `microsoft_graph_service_health` (MicrosoftGraphServiceHealth): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceHealth.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_service_announcement_update_health_overviews(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphServiceHealth.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceHealth.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def admin_service_announcement_update_health_overviews(connection, service_health_id, microsoft_graph_service_health, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/admin/serviceAnnouncement/healthOverviews/#{service_health_id}")
      |> add_param(:body, :body, microsoft_graph_service_health)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceHealth},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property issues in admin

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_health_issue_id` (String.t): The unique identifier of serviceHealthIssue
  - `microsoft_graph_service_health_issue` (MicrosoftGraphServiceHealthIssue): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceHealthIssue.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_service_announcement_update_issues(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphServiceHealthIssue.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceHealthIssue.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def admin_service_announcement_update_issues(connection, service_health_issue_id, microsoft_graph_service_health_issue, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/admin/serviceAnnouncement/issues/#{service_health_issue_id}")
      |> add_param(:body, :body, microsoft_graph_service_health_issue)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceHealthIssue},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property messages in admin

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_update_message_id` (String.t): The unique identifier of serviceUpdateMessage
  - `microsoft_graph_service_update_message` (MicrosoftGraphServiceUpdateMessage): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceUpdateMessage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_service_announcement_update_messages(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphServiceUpdateMessage.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceUpdateMessage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def admin_service_announcement_update_messages(connection, service_update_message_id, microsoft_graph_service_update_message, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/admin/serviceAnnouncement/messages/#{service_update_message_id}")
      |> add_param(:body, :body, microsoft_graph_service_update_message)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceUpdateMessage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update attachmentsArchive for the navigation property messages in admin
  The zip file that contains all attachments for a message.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `service_update_message_id` (String.t): The unique identifier of serviceUpdateMessage
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_service_announcement_update_messages_attachments_archive(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def admin_service_announcement_update_messages_attachments_archive(connection, service_update_message_id, body, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/admin/serviceAnnouncement/messages/#{service_update_message_id}/attachmentsArchive")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property serviceAnnouncement in admin

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_service_announcement` (MicrosoftGraphServiceAnnouncement): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphServiceAnnouncement.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec admin_update_service_announcement(Tesla.Env.client, MicrosoftGraph.Model.MicrosoftGraphServiceAnnouncement.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphServiceAnnouncement.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def admin_update_service_announcement(connection, microsoft_graph_service_announcement, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/admin/serviceAnnouncement")
      |> add_param(:body, :body, microsoft_graph_service_announcement)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphServiceAnnouncement},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
