# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.DeviceManagementDeviceConfiguration do
  @moduledoc """
  API calls for all endpoints tagged `DeviceManagementDeviceConfiguration`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Create androidWorkProfileCustomConfiguration
  Create a new androidWorkProfileCustomConfiguration object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `microsoft_graph_device_configuration` (MicrosoftGraphDeviceConfiguration): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceConfiguration.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_create_device_configurations(
          Tesla.Env.client(),
          MicrosoftGraph.Model.MicrosoftGraphDeviceConfiguration.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceConfiguration.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_management_create_device_configurations(
        connection,
        microsoft_graph_device_configuration,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/deviceConfigurations")
      |> add_param(:body, :body, microsoft_graph_device_configuration)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceConfiguration},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete windows10TeamGeneralConfiguration
  Deletes a windows10TeamGeneralConfiguration.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_configuration_id` (String.t): The unique identifier of deviceConfiguration
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_delete_device_configurations(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_management_delete_device_configurations(
        connection,
        device_configuration_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/deviceManagement/deviceConfigurations/#{device_configuration_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_configuration_id` (String.t): The unique identifier of deviceConfiguration
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_configurations_assignments_get_count170b(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_management_device_configurations_assignments_get_count170b(
        connection,
        device_configuration_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/deviceManagement/deviceConfigurations/#{device_configuration_id}/assignments/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create deviceConfigurationAssignment
  Create a new deviceConfigurationAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_configuration_id` (String.t): The unique identifier of deviceConfiguration
  - `microsoft_graph_device_configuration_assignment` (MicrosoftGraphDeviceConfigurationAssignment): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_configurations_create_assignments(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationAssignment.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationAssignment.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_management_device_configurations_create_assignments(
        connection,
        device_configuration_id,
        microsoft_graph_device_configuration_assignment,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/deviceConfigurations/#{device_configuration_id}/assignments")
      |> add_param(:body, :body, microsoft_graph_device_configuration_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create settingStateDeviceSummary
  Create a new settingStateDeviceSummary object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_configuration_id` (String.t): The unique identifier of deviceConfiguration
  - `microsoft_graph_setting_state_device_summary` (MicrosoftGraphSettingStateDeviceSummary): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSettingStateDeviceSummary.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_configurations_create_device_setting_state_summaries(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphSettingStateDeviceSummary.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphSettingStateDeviceSummary.t()}
          | {:error, Tesla.Env.t()}
  def device_management_device_configurations_create_device_setting_state_summaries(
        connection,
        device_configuration_id,
        microsoft_graph_setting_state_device_summary,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/deviceManagement/deviceConfigurations/#{device_configuration_id}/deviceSettingStateSummaries"
      )
      |> add_param(:body, :body, microsoft_graph_setting_state_device_summary)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSettingStateDeviceSummary},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create deviceConfigurationDeviceStatus
  Create a new deviceConfigurationDeviceStatus object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_configuration_id` (String.t): The unique identifier of deviceConfiguration
  - `microsoft_graph_device_configuration_device_status` (MicrosoftGraphDeviceConfigurationDeviceStatus): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationDeviceStatus.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_configurations_create_device_statuses(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationDeviceStatus.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationDeviceStatus.t()}
          | {:error, Tesla.Env.t()}
  def device_management_device_configurations_create_device_statuses(
        connection,
        device_configuration_id,
        microsoft_graph_device_configuration_device_status,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/deviceConfigurations/#{device_configuration_id}/deviceStatuses")
      |> add_param(:body, :body, microsoft_graph_device_configuration_device_status)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationDeviceStatus},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create deviceConfigurationUserStatus
  Create a new deviceConfigurationUserStatus object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_configuration_id` (String.t): The unique identifier of deviceConfiguration
  - `microsoft_graph_device_configuration_user_status` (MicrosoftGraphDeviceConfigurationUserStatus): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationUserStatus.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_configurations_create_user_statuses(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationUserStatus.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationUserStatus.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_management_device_configurations_create_user_statuses(
        connection,
        device_configuration_id,
        microsoft_graph_device_configuration_user_status,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/deviceManagement/deviceConfigurations/#{device_configuration_id}/userStatuses")
      |> add_param(:body, :body, microsoft_graph_device_configuration_user_status)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationUserStatus},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete deviceConfigurationAssignment
  Deletes a deviceConfigurationAssignment.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_configuration_id` (String.t): The unique identifier of deviceConfiguration
  - `device_configuration_assignment_id` (String.t): The unique identifier of deviceConfigurationAssignment
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_configurations_delete_assignments(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_management_device_configurations_delete_assignments(
        connection,
        device_configuration_id,
        device_configuration_assignment_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/deviceManagement/deviceConfigurations/#{device_configuration_id}/assignments/#{device_configuration_assignment_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete settingStateDeviceSummary
  Deletes a settingStateDeviceSummary.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_configuration_id` (String.t): The unique identifier of deviceConfiguration
  - `setting_state_device_summary_id` (String.t): The unique identifier of settingStateDeviceSummary
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_configurations_delete_device_setting_state_summaries(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_management_device_configurations_delete_device_setting_state_summaries(
        connection,
        device_configuration_id,
        setting_state_device_summary_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/deviceManagement/deviceConfigurations/#{device_configuration_id}/deviceSettingStateSummaries/#{setting_state_device_summary_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property deviceStatusOverview for deviceManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_configuration_id` (String.t): The unique identifier of deviceConfiguration
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_configurations_delete_device_status_overview(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_management_device_configurations_delete_device_status_overview(
        connection,
        device_configuration_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/deviceManagement/deviceConfigurations/#{device_configuration_id}/deviceStatusOverview"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete deviceConfigurationDeviceStatus
  Deletes a deviceConfigurationDeviceStatus.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_configuration_id` (String.t): The unique identifier of deviceConfiguration
  - `device_configuration_device_status_id` (String.t): The unique identifier of deviceConfigurationDeviceStatus
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_configurations_delete_device_statuses(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_management_device_configurations_delete_device_statuses(
        connection,
        device_configuration_id,
        device_configuration_device_status_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/deviceManagement/deviceConfigurations/#{device_configuration_id}/deviceStatuses/#{device_configuration_device_status_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property userStatusOverview for deviceManagement

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_configuration_id` (String.t): The unique identifier of deviceConfiguration
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_configurations_delete_user_status_overview(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_management_device_configurations_delete_user_status_overview(
        connection,
        device_configuration_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/deviceManagement/deviceConfigurations/#{device_configuration_id}/userStatusOverview"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete deviceConfigurationUserStatus
  Deletes a deviceConfigurationUserStatus.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_configuration_id` (String.t): The unique identifier of deviceConfiguration
  - `device_configuration_user_status_id` (String.t): The unique identifier of deviceConfigurationUserStatus
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_configurations_delete_user_statuses(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_management_device_configurations_delete_user_statuses(
        connection,
        device_configuration_id,
        device_configuration_user_status_id,
        opts \\ []
      ) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/deviceManagement/deviceConfigurations/#{device_configuration_id}/userStatuses/#{device_configuration_user_status_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_configuration_id` (String.t): The unique identifier of deviceConfiguration
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_configurations_device_setting_state_summaries_get_count921c(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_management_device_configurations_device_setting_state_summaries_get_count921c(
        connection,
        device_configuration_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/deviceManagement/deviceConfigurations/#{device_configuration_id}/deviceSettingStateSummaries/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_configuration_id` (String.t): The unique identifier of deviceConfiguration
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_configurations_device_statuses_get_count_ce20(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_management_device_configurations_device_statuses_get_count_ce20(
        connection,
        device_configuration_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/deviceManagement/deviceConfigurations/#{device_configuration_id}/deviceStatuses/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get deviceConfigurationAssignment
  Read properties and relationships of the deviceConfigurationAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_configuration_id` (String.t): The unique identifier of deviceConfiguration
  - `device_configuration_assignment_id` (String.t): The unique identifier of deviceConfigurationAssignment
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_configurations_get_assignments(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationAssignment.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_management_device_configurations_get_assignments(
        connection,
        device_configuration_id,
        device_configuration_assignment_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/deviceManagement/deviceConfigurations/#{device_configuration_id}/assignments/#{device_configuration_assignment_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_configurations_get_count2013(Tesla.Env.client(), keyword()) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_management_device_configurations_get_count2013(connection, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/deviceConfigurations/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get settingStateDeviceSummary
  Read properties and relationships of the settingStateDeviceSummary object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_configuration_id` (String.t): The unique identifier of deviceConfiguration
  - `setting_state_device_summary_id` (String.t): The unique identifier of settingStateDeviceSummary
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSettingStateDeviceSummary.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_configurations_get_device_setting_state_summaries(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphSettingStateDeviceSummary.t()}
          | {:error, Tesla.Env.t()}
  def device_management_device_configurations_get_device_setting_state_summaries(
        connection,
        device_configuration_id,
        setting_state_device_summary_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/deviceManagement/deviceConfigurations/#{device_configuration_id}/deviceSettingStateSummaries/#{setting_state_device_summary_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSettingStateDeviceSummary},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get deviceConfigurationDeviceOverview
  Read properties and relationships of the deviceConfigurationDeviceOverview object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_configuration_id` (String.t): The unique identifier of deviceConfiguration
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationDeviceOverview.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_configurations_get_device_status_overview(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationDeviceOverview.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_management_device_configurations_get_device_status_overview(
        connection,
        device_configuration_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/deviceManagement/deviceConfigurations/#{device_configuration_id}/deviceStatusOverview"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationDeviceOverview},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get deviceConfigurationDeviceStatus
  Read properties and relationships of the deviceConfigurationDeviceStatus object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_configuration_id` (String.t): The unique identifier of deviceConfiguration
  - `device_configuration_device_status_id` (String.t): The unique identifier of deviceConfigurationDeviceStatus
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationDeviceStatus.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_configurations_get_device_statuses(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationDeviceStatus.t()}
          | {:error, Tesla.Env.t()}
  def device_management_device_configurations_get_device_statuses(
        connection,
        device_configuration_id,
        device_configuration_device_status_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/deviceManagement/deviceConfigurations/#{device_configuration_id}/deviceStatuses/#{device_configuration_device_status_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationDeviceStatus},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get deviceConfigurationUserOverview
  Read properties and relationships of the deviceConfigurationUserOverview object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_configuration_id` (String.t): The unique identifier of deviceConfiguration
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationUserOverview.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_configurations_get_user_status_overview(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationUserOverview.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_management_device_configurations_get_user_status_overview(
        connection,
        device_configuration_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/deviceManagement/deviceConfigurations/#{device_configuration_id}/userStatusOverview"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationUserOverview},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get deviceConfigurationUserStatus
  Read properties and relationships of the deviceConfigurationUserStatus object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_configuration_id` (String.t): The unique identifier of deviceConfiguration
  - `device_configuration_user_status_id` (String.t): The unique identifier of deviceConfigurationUserStatus
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationUserStatus.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_configurations_get_user_statuses(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationUserStatus.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_management_device_configurations_get_user_statuses(
        connection,
        device_configuration_id,
        device_configuration_user_status_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/deviceManagement/deviceConfigurations/#{device_configuration_id}/userStatuses/#{device_configuration_user_status_id}"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationUserStatus},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List deviceConfigurationAssignments
  List properties and relationships of the deviceConfigurationAssignment objects.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_configuration_id` (String.t): The unique identifier of deviceConfiguration
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationAssignmentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_configurations_list_assignments(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationAssignmentCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_management_device_configurations_list_assignments(
        connection,
        device_configuration_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/deviceConfigurations/#{device_configuration_id}/assignments")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationAssignmentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List settingStateDeviceSummaries
  List properties and relationships of the settingStateDeviceSummary objects.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_configuration_id` (String.t): The unique identifier of deviceConfiguration
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSettingStateDeviceSummaryCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_configurations_list_device_setting_state_summaries(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok,
             MicrosoftGraph.Model.MicrosoftGraphSettingStateDeviceSummaryCollectionResponse.t()}
          | {:error, Tesla.Env.t()}
  def device_management_device_configurations_list_device_setting_state_summaries(
        connection,
        device_configuration_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/deviceManagement/deviceConfigurations/#{device_configuration_id}/deviceSettingStateSummaries"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSettingStateDeviceSummaryCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List deviceConfigurationDeviceStatuses
  List properties and relationships of the deviceConfigurationDeviceStatus objects.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_configuration_id` (String.t): The unique identifier of deviceConfiguration
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationDeviceStatusCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_configurations_list_device_statuses(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationDeviceStatusCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_management_device_configurations_list_device_statuses(
        connection,
        device_configuration_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/deviceConfigurations/#{device_configuration_id}/deviceStatuses")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX",
       MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationDeviceStatusCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List deviceConfigurationUserStatuses
  List properties and relationships of the deviceConfigurationUserStatus objects.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_configuration_id` (String.t): The unique identifier of deviceConfiguration
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationUserStatusCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_configurations_list_user_statuses(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok,
           MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationUserStatusCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_management_device_configurations_list_user_statuses(
        connection,
        device_configuration_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/deviceConfigurations/#{device_configuration_id}/userStatuses")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationUserStatusCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update deviceConfigurationAssignment
  Update the properties of a deviceConfigurationAssignment object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_configuration_id` (String.t): The unique identifier of deviceConfiguration
  - `device_configuration_assignment_id` (String.t): The unique identifier of deviceConfigurationAssignment
  - `microsoft_graph_device_configuration_assignment` (MicrosoftGraphDeviceConfigurationAssignment): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationAssignment.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_configurations_update_assignments(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationAssignment.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationAssignment.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_management_device_configurations_update_assignments(
        connection,
        device_configuration_id,
        device_configuration_assignment_id,
        microsoft_graph_device_configuration_assignment,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/deviceManagement/deviceConfigurations/#{device_configuration_id}/assignments/#{device_configuration_assignment_id}"
      )
      |> add_param(:body, :body, microsoft_graph_device_configuration_assignment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationAssignment},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update settingStateDeviceSummary
  Update the properties of a settingStateDeviceSummary object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_configuration_id` (String.t): The unique identifier of deviceConfiguration
  - `setting_state_device_summary_id` (String.t): The unique identifier of settingStateDeviceSummary
  - `microsoft_graph_setting_state_device_summary` (MicrosoftGraphSettingStateDeviceSummary): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSettingStateDeviceSummary.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_configurations_update_device_setting_state_summaries(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphSettingStateDeviceSummary.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphSettingStateDeviceSummary.t()}
          | {:error, Tesla.Env.t()}
  def device_management_device_configurations_update_device_setting_state_summaries(
        connection,
        device_configuration_id,
        setting_state_device_summary_id,
        microsoft_graph_setting_state_device_summary,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/deviceManagement/deviceConfigurations/#{device_configuration_id}/deviceSettingStateSummaries/#{setting_state_device_summary_id}"
      )
      |> add_param(:body, :body, microsoft_graph_setting_state_device_summary)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSettingStateDeviceSummary},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update deviceConfigurationDeviceOverview
  Update the properties of a deviceConfigurationDeviceOverview object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_configuration_id` (String.t): The unique identifier of deviceConfiguration
  - `microsoft_graph_device_configuration_device_overview` (MicrosoftGraphDeviceConfigurationDeviceOverview): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationDeviceOverview.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_configurations_update_device_status_overview(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationDeviceOverview.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationDeviceOverview.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_management_device_configurations_update_device_status_overview(
        connection,
        device_configuration_id,
        microsoft_graph_device_configuration_device_overview,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/deviceManagement/deviceConfigurations/#{device_configuration_id}/deviceStatusOverview"
      )
      |> add_param(:body, :body, microsoft_graph_device_configuration_device_overview)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationDeviceOverview},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update deviceConfigurationDeviceStatus
  Update the properties of a deviceConfigurationDeviceStatus object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_configuration_id` (String.t): The unique identifier of deviceConfiguration
  - `device_configuration_device_status_id` (String.t): The unique identifier of deviceConfigurationDeviceStatus
  - `microsoft_graph_device_configuration_device_status` (MicrosoftGraphDeviceConfigurationDeviceStatus): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationDeviceStatus.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_configurations_update_device_statuses(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationDeviceStatus.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationDeviceStatus.t()}
          | {:error, Tesla.Env.t()}
  def device_management_device_configurations_update_device_statuses(
        connection,
        device_configuration_id,
        device_configuration_device_status_id,
        microsoft_graph_device_configuration_device_status,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/deviceManagement/deviceConfigurations/#{device_configuration_id}/deviceStatuses/#{device_configuration_device_status_id}"
      )
      |> add_param(:body, :body, microsoft_graph_device_configuration_device_status)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationDeviceStatus},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update deviceConfigurationUserOverview
  Update the properties of a deviceConfigurationUserOverview object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_configuration_id` (String.t): The unique identifier of deviceConfiguration
  - `microsoft_graph_device_configuration_user_overview` (MicrosoftGraphDeviceConfigurationUserOverview): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationUserOverview.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_configurations_update_user_status_overview(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationUserOverview.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationUserOverview.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_management_device_configurations_update_user_status_overview(
        connection,
        device_configuration_id,
        microsoft_graph_device_configuration_user_overview,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/deviceManagement/deviceConfigurations/#{device_configuration_id}/userStatusOverview"
      )
      |> add_param(:body, :body, microsoft_graph_device_configuration_user_overview)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationUserOverview},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update deviceConfigurationUserStatus
  Update the properties of a deviceConfigurationUserStatus object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_configuration_id` (String.t): The unique identifier of deviceConfiguration
  - `device_configuration_user_status_id` (String.t): The unique identifier of deviceConfigurationUserStatus
  - `microsoft_graph_device_configuration_user_status` (MicrosoftGraphDeviceConfigurationUserStatus): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationUserStatus.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_configurations_update_user_statuses(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationUserStatus.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationUserStatus.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_management_device_configurations_update_user_statuses(
        connection,
        device_configuration_id,
        device_configuration_user_status_id,
        microsoft_graph_device_configuration_user_status,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/deviceManagement/deviceConfigurations/#{device_configuration_id}/userStatuses/#{device_configuration_user_status_id}"
      )
      |> add_param(:body, :body, microsoft_graph_device_configuration_user_status)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationUserStatus},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_configuration_id` (String.t): The unique identifier of deviceConfiguration
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_device_configurations_user_statuses_get_count_a3f6(
          Tesla.Env.client(),
          String.t(),
          keyword()
        ) ::
          {:ok, Integer.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_management_device_configurations_user_statuses_get_count_a3f6(
        connection,
        device_configuration_id,
        opts \\ []
      ) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/deviceManagement/deviceConfigurations/#{device_configuration_id}/userStatuses/$count"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get deviceConfiguration
  Read properties and relationships of the deviceConfiguration object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_configuration_id` (String.t): The unique identifier of deviceConfiguration
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceConfiguration.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_get_device_configurations(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceConfiguration.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_management_get_device_configurations(connection, device_configuration_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/deviceConfigurations/#{device_configuration_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceConfiguration},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List sharedPCConfigurations
  List properties and relationships of the sharedPCConfiguration objects.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_list_device_configurations(Tesla.Env.client(), keyword()) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationCollectionResponse.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_management_list_device_configurations(connection, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/deviceManagement/deviceConfigurations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceConfigurationCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update iosGeneralDeviceConfiguration
  Update the properties of a iosGeneralDeviceConfiguration object.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `device_configuration_id` (String.t): The unique identifier of deviceConfiguration
  - `microsoft_graph_device_configuration` (MicrosoftGraphDeviceConfiguration): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceConfiguration.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec device_management_update_device_configurations(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.MicrosoftGraphDeviceConfiguration.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphDeviceConfiguration.t()}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def device_management_update_device_configurations(
        connection,
        device_configuration_id,
        microsoft_graph_device_configuration,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/deviceManagement/deviceConfigurations/#{device_configuration_id}")
      |> add_param(:body, :body, microsoft_graph_device_configuration)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDeviceConfiguration},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
