# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.SharesActions do
  @moduledoc """
  API calls for all endpoints tagged `SharesActions`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Invoke action addCopy
  Add a copy of a content type][contentType] from a [site][site] to a [list][list]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `sites_site_content_types_add_copy_request` (SitesSiteContentTypesAddCopyRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.SitesSiteContentTypesAddCopyFromContentTypeHub2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_shared_drive_item_list_content_types_add_copy(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.SitesSiteContentTypesAddCopyRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok,
             MicrosoftGraph.Model.SitesSiteContentTypesAddCopyFromContentTypeHub2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def shares_shared_drive_item_list_content_types_add_copy(
        connection,
        shared_drive_item_id,
        sites_site_content_types_add_copy_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/shares/#{shared_drive_item_id}/list/contentTypes/addCopy")
      |> add_param(:body, :body, sites_site_content_types_add_copy_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.SitesSiteContentTypesAddCopyFromContentTypeHub2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action addCopyFromContentTypeHub
  Add or sync a copy of a published content type from the content type hub to a target site or a list. This method is part of the content type publishing changes to optimize the syncing of published content types to sites and lists, effectively switching from a 'push everywhere' to 'pull as needed' approach. The method allows users to pull content types directly from the content type hub to a site or list. For more information, see contentType: getCompatibleHubContentTypes and the blog post Syntex Product Updates â€“ August 2021. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `sites_site_content_types_add_copy_from_content_type_hub_request` (SitesSiteContentTypesAddCopyFromContentTypeHubRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.SitesSiteContentTypesAddCopyFromContentTypeHub2XxResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_shared_drive_item_list_content_types_add_copy_from_content_type_hub(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.SitesSiteContentTypesAddCopyFromContentTypeHubRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok,
             MicrosoftGraph.Model.SitesSiteContentTypesAddCopyFromContentTypeHub2XxResponse.t()}
          | {:error, Tesla.Env.t()}
  def shares_shared_drive_item_list_content_types_add_copy_from_content_type_hub(
        connection,
        shared_drive_item_id,
        sites_site_content_types_add_copy_from_content_type_hub_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/shares/#{shared_drive_item_id}/list/contentTypes/addCopyFromContentTypeHub")
      |> add_param(:body, :body, sites_site_content_types_add_copy_from_content_type_hub_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.SitesSiteContentTypesAddCopyFromContentTypeHub2XxResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action associateWithHubSites
  Associate a published content type][contentType] present in a content type hub with a list of hub sites. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `content_type_id` (String.t): The unique identifier of contentType
  - `sites_site_lists_list_content_types_content_type_associate_with_hub_sites_request` (SitesSiteListsListContentTypesContentTypeAssociateWithHubSitesRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_shared_drive_item_list_content_types_content_type_associate_with_hub_sites(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.SitesSiteListsListContentTypesContentTypeAssociateWithHubSitesRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def shares_shared_drive_item_list_content_types_content_type_associate_with_hub_sites(
        connection,
        shared_drive_item_id,
        content_type_id,
        sites_site_lists_list_content_types_content_type_associate_with_hub_sites_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/shares/#{shared_drive_item_id}/list/contentTypes/#{content_type_id}/associateWithHubSites"
      )
      |> add_param(
        :body,
        :body,
        sites_site_lists_list_content_types_content_type_associate_with_hub_sites_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action copyToDefaultContentLocation
  Copy a file to a default content location in a content type][contentType]. The file can then be added as a default file or template via a POST operation. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `content_type_id` (String.t): The unique identifier of contentType
  - `groups_group_sites_site_content_types_content_type_copy_to_default_content_location_request` (GroupsGroupSitesSiteContentTypesContentTypeCopyToDefaultContentLocationRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_shared_drive_item_list_content_types_content_type_copy_to_default_content_location(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          MicrosoftGraph.Model.GroupsGroupSitesSiteContentTypesContentTypeCopyToDefaultContentLocationRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def shares_shared_drive_item_list_content_types_content_type_copy_to_default_content_location(
        connection,
        shared_drive_item_id,
        content_type_id,
        groups_group_sites_site_content_types_content_type_copy_to_default_content_location_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/shares/#{shared_drive_item_id}/list/contentTypes/#{content_type_id}/copyToDefaultContentLocation"
      )
      |> add_param(
        :body,
        :body,
        groups_group_sites_site_content_types_content_type_copy_to_default_content_location_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action publish
  Publishes a contentType][] present in the content type hub site. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `content_type_id` (String.t): The unique identifier of contentType
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_shared_drive_item_list_content_types_content_type_publish(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def shares_shared_drive_item_list_content_types_content_type_publish(
        connection,
        shared_drive_item_id,
        content_type_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/shares/#{shared_drive_item_id}/list/contentTypes/#{content_type_id}/publish")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action unpublish
  Unpublish a contentType][] from a content type hub site. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `content_type_id` (String.t): The unique identifier of contentType
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_shared_drive_item_list_content_types_content_type_unpublish(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def shares_shared_drive_item_list_content_types_content_type_unpublish(
        connection,
        shared_drive_item_id,
        content_type_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/shares/#{shared_drive_item_id}/list/contentTypes/#{content_type_id}/unpublish")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action restore
  Restore a document set version. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `list_item_id` (String.t): The unique identifier of listItem
  - `document_set_version_id` (String.t): The unique identifier of documentSetVersion
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_shared_drive_item_list_items_list_item_document_set_versions_document_set_version_restore(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def shares_shared_drive_item_list_items_list_item_document_set_versions_document_set_version_restore(
        connection,
        shared_drive_item_id,
        list_item_id,
        document_set_version_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/shares/#{shared_drive_item_id}/list/items/#{list_item_id}/documentSetVersions/#{document_set_version_id}/restore"
      )
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action restoreVersion
  Restore a previous version of a ListItem to be the current version. This will create a new version with the contents of the previous version, but preserves all existing versions of the item. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `list_item_id` (String.t): The unique identifier of listItem
  - `list_item_version_id` (String.t): The unique identifier of listItemVersion
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_shared_drive_item_list_items_list_item_versions_list_item_version_restore_version(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def shares_shared_drive_item_list_items_list_item_versions_list_item_version_restore_version(
        connection,
        shared_drive_item_id,
        list_item_id,
        list_item_version_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/shares/#{shared_drive_item_id}/list/items/#{list_item_id}/versions/#{list_item_version_id}/restoreVersion"
      )
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action reauthorize
  Reauthorize a subscription when you receive a reauthorizationRequired challenge. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `subscription_id` (String.t): The unique identifier of subscription
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_shared_drive_item_list_subscriptions_subscription_reauthorize(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:error, Tesla.Env.t()}
  def shares_shared_drive_item_list_subscriptions_subscription_reauthorize(
        connection,
        shared_drive_item_id,
        subscription_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/shares/#{shared_drive_item_id}/list/subscriptions/#{subscription_id}/reauthorize")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Invoke action grant
  Grant users access to a link represented by a permission][]. This API is available in the following [national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `shared_drive_item_id` (String.t): The unique identifier of sharedDriveItem
  - `sites_site_permissions_permission_grant_request` (SitesSitePermissionsPermissionGrantRequest): Action parameters
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.CollectionOfPermission.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec shares_shared_drive_item_permission_grant(
          Tesla.Env.client(),
          String.t(),
          MicrosoftGraph.Model.SitesSitePermissionsPermissionGrantRequest.t(),
          keyword()
        ) ::
          {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t()}
          | {:ok, MicrosoftGraph.Model.CollectionOfPermission.t()}
          | {:error, Tesla.Env.t()}
  def shares_shared_drive_item_permission_grant(
        connection,
        shared_drive_item_id,
        sites_site_permissions_permission_grant_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/shares/#{shared_drive_item_id}/permission/grant")
      |> add_param(:body, :body, sites_site_permissions_permission_grant_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.CollectionOfPermission},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
