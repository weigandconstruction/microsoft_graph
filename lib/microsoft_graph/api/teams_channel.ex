# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Api.TeamsChannel do
  @moduledoc """
  API calls for all endpoints tagged `TeamsChannel`.
  """

  alias MicrosoftGraph.Connection
  import MicrosoftGraph.RequestBuilder

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_all_channels_get_count_f86a(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_all_channels_get_count_f86a(connection, team_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/allChannels/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Add member to channel
  Add a conversationMember to a channel. This operation is allowed only for channels with a membershipType value of private or shared. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `microsoft_graph_conversation_member` (MicrosoftGraphConversationMember): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMember.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_channels_create_members(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphConversationMember.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMember.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_channels_create_members(connection, team_id, channel_id, microsoft_graph_conversation_member, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/teams/#{team_id}/channels/#{channel_id}/members")
      |> add_param(:body, :body, microsoft_graph_conversation_member)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphConversationMember},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Send chatMessage in a channel or a chat
  Send a new chatMessage in the specified channel or a chat. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `microsoft_graph_chat_message` (MicrosoftGraphChatMessage): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_channels_create_messages(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_channels_create_messages(connection, team_id, channel_id, microsoft_graph_chat_message, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/teams/#{team_id}/channels/#{channel_id}/messages")
      |> add_param(:body, :body, microsoft_graph_chat_message)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to sharedWithTeams for teams

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `microsoft_graph_shared_with_channel_team_info` (MicrosoftGraphSharedWithChannelTeamInfo): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSharedWithChannelTeamInfo.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_channels_create_shared_with_teams(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphSharedWithChannelTeamInfo.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSharedWithChannelTeamInfo.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_channels_create_shared_with_teams(connection, team_id, channel_id, microsoft_graph_shared_with_channel_team_info, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/teams/#{team_id}/channels/#{channel_id}/sharedWithTeams")
      |> add_param(:body, :body, microsoft_graph_shared_with_channel_team_info)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSharedWithChannelTeamInfo},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Add tab to channel
  Adds (pins) a tab to the specified channel within a team.  The corresponding app must already be installed in the team. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `microsoft_graph_teams_tab` (MicrosoftGraphTeamsTab): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsTab.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_channels_create_tabs(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTeamsTab.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsTab.t} | {:error, Tesla.Env.t}
  def teams_channels_create_tabs(connection, team_id, channel_id, microsoft_graph_teams_tab, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/teams/#{team_id}/channels/#{channel_id}/tabs")
      |> add_param(:body, :body, microsoft_graph_teams_tab)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamsTab},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete conversationMember
  Delete a conversationMember from a channel. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `conversation_member_id` (String.t): The unique identifier of conversationMember
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_channels_delete_members(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_channels_delete_members(connection, team_id, channel_id, conversation_member_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/teams/#{team_id}/channels/#{channel_id}/members/#{conversation_member_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property messages for teams

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_channels_delete_messages(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_channels_delete_messages(connection, team_id, channel_id, chat_message_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/teams/#{team_id}/channels/#{channel_id}/messages/#{chat_message_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete sharedWithChannelTeamInfo
  Unshare a channel with a team by deleting the corresponding sharedWithChannelTeamInfo resource. This operation is allowed only for channels with a membershipType value of shared. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `shared_with_channel_team_info_id` (String.t): The unique identifier of sharedWithChannelTeamInfo
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_channels_delete_shared_with_teams(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_channels_delete_shared_with_teams(connection, team_id, channel_id, shared_with_channel_team_info_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/teams/#{team_id}/channels/#{channel_id}/sharedWithTeams/#{shared_with_channel_team_info_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete tab from channel
  Removes (unpins) a tab from the specified channel within a team.  This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `teams_tab_id` (String.t): The unique identifier of teamsTab
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_channels_delete_tabs(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_channels_delete_tabs(connection, team_id, channel_id, teams_tab_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/teams/#{team_id}/channels/#{channel_id}/tabs/#{teams_tab_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_channels_get_count1a82(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_channels_get_count1a82(connection, team_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/channels/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get filesFolder
  Get the metadata for the location where the files of a channel are stored.  This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_channels_get_files_folder(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_channels_get_files_folder(connection, team_id, channel_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/channels/#{channel_id}/filesFolder")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDriveItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get content for the navigation property filesFolder from teams
  The content stream, if the item represents a file.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_channels_get_files_folder_content(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def teams_channels_get_files_folder_content(connection, team_id, channel_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/channels/#{channel_id}/filesFolder/content")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get member of channel
  Get a conversationMember from a channel. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `conversation_member_id` (String.t): The unique identifier of conversationMember
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMember.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_channels_get_members(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMember.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_channels_get_members(connection, team_id, channel_id, conversation_member_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/channels/#{channel_id}/members/#{conversation_member_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphConversationMember},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get chatMessage in a channel or chat
  Retrieve a single message or a message reply in a channel or a chat. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_channels_get_messages(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_channels_get_messages(connection, team_id, channel_id, chat_message_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/channels/#{channel_id}/messages/#{chat_message_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get sharedWithChannelTeamInfo
  Get a team that has been shared with a specified channel. This operation is allowed only for channels with a membershipType value of shared. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `shared_with_channel_team_info_id` (String.t): The unique identifier of sharedWithChannelTeamInfo
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSharedWithChannelTeamInfo.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_channels_get_shared_with_teams(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSharedWithChannelTeamInfo.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_channels_get_shared_with_teams(connection, team_id, channel_id, shared_with_channel_team_info_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/channels/#{channel_id}/sharedWithTeams/#{shared_with_channel_team_info_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSharedWithChannelTeamInfo},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get tab
  Retrieve the properties and relationships of the specified tab in a channel within a team.  This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `teams_tab_id` (String.t): The unique identifier of teamsTab
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsTab.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_channels_get_tabs(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsTab.t} | {:error, Tesla.Env.t}
  def teams_channels_get_tabs(connection, team_id, channel_id, teams_tab_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/channels/#{channel_id}/tabs/#{teams_tab_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamsTab},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List members of a channel
  Retrieve a list of conversationMembers from a channel. This method supports federation. Only a user who is a member of the shared channel can retrieve the channel member list. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMemberCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_channels_list_members(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMemberCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_channels_list_members(connection, team_id, channel_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/channels/#{channel_id}/members")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphConversationMemberCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List channel messages
  Retrieve the list of messages (without the replies) in a channel of a team.  To get the replies for a message, call the list message replies or the get message reply API.  This method supports federation. To list channel messages in application context, the request must be made from the tenant that the channel owner belongs to (represented by the tenantId property on the channel). This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_channels_list_messages(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_channels_list_messages(connection, team_id, channel_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/channels/#{channel_id}/messages")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessageCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List sharedWithChannelTeamInfo
  Get the list of teams that has been shared a specified channel. This operation is allowed only for channels with a membershipType value of shared. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSharedWithChannelTeamInfoCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_channels_list_shared_with_teams(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSharedWithChannelTeamInfoCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_channels_list_shared_with_teams(connection, team_id, channel_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/channels/#{channel_id}/sharedWithTeams")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSharedWithChannelTeamInfoCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List tabs in channel
  Retrieve the list of tabs in the specified channel within a team.  This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsTabCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_channels_list_tabs(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsTabCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_channels_list_tabs(connection, team_id, channel_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/channels/#{channel_id}/tabs")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamsTabCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_channels_members_get_count8e98(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_channels_members_get_count8e98(connection, team_id, channel_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/channels/#{channel_id}/members/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to hostedContents for teams

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `microsoft_graph_chat_message_hosted_content` (MicrosoftGraphChatMessageHostedContent): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_channels_messages_create_hosted_contents(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_channels_messages_create_hosted_contents(connection, team_id, channel_id, chat_message_id, microsoft_graph_chat_message_hosted_content, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/teams/#{team_id}/channels/#{channel_id}/messages/#{chat_message_id}/hostedContents")
      |> add_param(:body, :body, microsoft_graph_chat_message_hosted_content)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Send replies to a message in a channel
  Send a new reply to a chatMessage in a specified channel. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `microsoft_graph_chat_message` (MicrosoftGraphChatMessage): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_channels_messages_create_replies(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_channels_messages_create_replies(connection, team_id, channel_id, chat_message_id, microsoft_graph_chat_message, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/teams/#{team_id}/channels/#{channel_id}/messages/#{chat_message_id}/replies")
      |> add_param(:body, :body, microsoft_graph_chat_message)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property hostedContents for teams

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_hosted_content_id` (String.t): The unique identifier of chatMessageHostedContent
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_channels_messages_delete_hosted_contents(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_channels_messages_delete_hosted_contents(connection, team_id, channel_id, chat_message_id, chat_message_hosted_content_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/teams/#{team_id}/channels/#{channel_id}/messages/#{chat_message_id}/hostedContents/#{chat_message_hosted_content_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property replies for teams

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_channels_messages_delete_replies(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_channels_messages_delete_replies(connection, team_id, channel_id, chat_message_id, chat_message_id1, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/teams/#{team_id}/channels/#{channel_id}/messages/#{chat_message_id}/replies/#{chat_message_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_channels_messages_get_count6767(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_channels_messages_get_count6767(connection, team_id, channel_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/channels/#{channel_id}/messages/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get chatMessageHostedContent
  Retrieve the properties and relationships of chatMessageHostedContent object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_hosted_content_id` (String.t): The unique identifier of chatMessageHostedContent
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_channels_messages_get_hosted_contents(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_channels_messages_get_hosted_contents(connection, team_id, channel_id, chat_message_id, chat_message_hosted_content_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/channels/#{channel_id}/messages/#{chat_message_id}/hostedContents/#{chat_message_hosted_content_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get media content for the navigation property hostedContents from teams

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_hosted_content_id` (String.t): The unique identifier of chatMessageHostedContent
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_channels_messages_get_hosted_contents_content(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def teams_channels_messages_get_hosted_contents_content(connection, team_id, channel_id, chat_message_id, chat_message_hosted_content_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/channels/#{channel_id}/messages/#{chat_message_id}/hostedContents/#{chat_message_hosted_content_id}/$value")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get chatMessage in a channel or chat
  Retrieve a single message or a message reply in a channel or a chat. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_channels_messages_get_replies(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_channels_messages_get_replies(connection, team_id, channel_id, chat_message_id, chat_message_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/channels/#{channel_id}/messages/#{chat_message_id}/replies/#{chat_message_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_channels_messages_hosted_contents_get_count80f2(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_channels_messages_hosted_contents_get_count80f2(connection, team_id, channel_id, chat_message_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/channels/#{channel_id}/messages/#{chat_message_id}/hostedContents/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List hostedContents
  Retrieve the list of chatMessageHostedContent objects from a message. This API only lists the hosted content objects. To get the content bytes, see get chatmessage hosted content This API is available in the following national cloud deployments. The following tables show the least privileged permission or permissions required to call this API on each supported resource type. Follow best practices to request least privileged permissions. For details about delegated and application permissions, see Permission types. To learn more about these permissions, see the permissions reference.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_channels_messages_list_hosted_contents(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContentCollectionResponse.t} | {:error, Tesla.Env.t}
  def teams_channels_messages_list_hosted_contents(connection, team_id, channel_id, chat_message_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/channels/#{channel_id}/messages/#{chat_message_id}/hostedContents")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List replies
  List all the replies to a message in a channel of a team. This method lists only the replies of the specified message, if any. To get the message itself, simply call get channel message. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_channels_messages_list_replies(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_channels_messages_list_replies(connection, team_id, channel_id, chat_message_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/channels/#{channel_id}/messages/#{chat_message_id}/replies")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessageCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to hostedContents for teams

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `microsoft_graph_chat_message_hosted_content` (MicrosoftGraphChatMessageHostedContent): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_channels_messages_replies_create_hosted_contents(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_channels_messages_replies_create_hosted_contents(connection, team_id, channel_id, chat_message_id, chat_message_id1, microsoft_graph_chat_message_hosted_content, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/teams/#{team_id}/channels/#{channel_id}/messages/#{chat_message_id}/replies/#{chat_message_id1}/hostedContents")
      |> add_param(:body, :body, microsoft_graph_chat_message_hosted_content)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property hostedContents for teams

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `chat_message_hosted_content_id` (String.t): The unique identifier of chatMessageHostedContent
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_channels_messages_replies_delete_hosted_contents(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_channels_messages_replies_delete_hosted_contents(connection, team_id, channel_id, chat_message_id, chat_message_id1, chat_message_hosted_content_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/teams/#{team_id}/channels/#{channel_id}/messages/#{chat_message_id}/replies/#{chat_message_id1}/hostedContents/#{chat_message_hosted_content_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_channels_messages_replies_get_count_bdfc(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_channels_messages_replies_get_count_bdfc(connection, team_id, channel_id, chat_message_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/channels/#{channel_id}/messages/#{chat_message_id}/replies/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get chatMessageHostedContent
  Retrieve the properties and relationships of chatMessageHostedContent object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `chat_message_hosted_content_id` (String.t): The unique identifier of chatMessageHostedContent
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_channels_messages_replies_get_hosted_contents(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_channels_messages_replies_get_hosted_contents(connection, team_id, channel_id, chat_message_id, chat_message_id1, chat_message_hosted_content_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/channels/#{channel_id}/messages/#{chat_message_id}/replies/#{chat_message_id1}/hostedContents/#{chat_message_hosted_content_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get media content for the navigation property hostedContents from teams

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `chat_message_hosted_content_id` (String.t): The unique identifier of chatMessageHostedContent
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_channels_messages_replies_get_hosted_contents_content(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def teams_channels_messages_replies_get_hosted_contents_content(connection, team_id, channel_id, chat_message_id, chat_message_id1, chat_message_hosted_content_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/channels/#{channel_id}/messages/#{chat_message_id}/replies/#{chat_message_id1}/hostedContents/#{chat_message_hosted_content_id}/$value")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_channels_messages_replies_hosted_contents_get_count3bb6(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_channels_messages_replies_hosted_contents_get_count3bb6(connection, team_id, channel_id, chat_message_id, chat_message_id1, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/channels/#{channel_id}/messages/#{chat_message_id}/replies/#{chat_message_id1}/hostedContents/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List hostedContents
  Retrieve the list of chatMessageHostedContent objects from a message. This API only lists the hosted content objects. To get the content bytes, see get chatmessage hosted content This API is available in the following national cloud deployments. The following tables show the least privileged permission or permissions required to call this API on each supported resource type. Follow best practices to request least privileged permissions. For details about delegated and application permissions, see Permission types. To learn more about these permissions, see the permissions reference.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_channels_messages_replies_list_hosted_contents(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContentCollectionResponse.t} | {:error, Tesla.Env.t}
  def teams_channels_messages_replies_list_hosted_contents(connection, team_id, channel_id, chat_message_id, chat_message_id1, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/channels/#{channel_id}/messages/#{chat_message_id}/replies/#{chat_message_id1}/hostedContents")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property hostedContents in teams

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `chat_message_hosted_content_id` (String.t): The unique identifier of chatMessageHostedContent
  - `microsoft_graph_chat_message_hosted_content` (MicrosoftGraphChatMessageHostedContent): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_channels_messages_replies_update_hosted_contents(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_channels_messages_replies_update_hosted_contents(connection, team_id, channel_id, chat_message_id, chat_message_id1, chat_message_hosted_content_id, microsoft_graph_chat_message_hosted_content, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/teams/#{team_id}/channels/#{channel_id}/messages/#{chat_message_id}/replies/#{chat_message_id1}/hostedContents/#{chat_message_hosted_content_id}")
      |> add_param(:body, :body, microsoft_graph_chat_message_hosted_content)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update media content for the navigation property hostedContents in teams

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `chat_message_hosted_content_id` (String.t): The unique identifier of chatMessageHostedContent
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_channels_messages_replies_update_hosted_contents_content(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_channels_messages_replies_update_hosted_contents_content(connection, team_id, channel_id, chat_message_id, chat_message_id1, chat_message_hosted_content_id, body, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/teams/#{team_id}/channels/#{channel_id}/messages/#{chat_message_id}/replies/#{chat_message_id1}/hostedContents/#{chat_message_hosted_content_id}/$value")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property hostedContents in teams

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_hosted_content_id` (String.t): The unique identifier of chatMessageHostedContent
  - `microsoft_graph_chat_message_hosted_content` (MicrosoftGraphChatMessageHostedContent): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_channels_messages_update_hosted_contents(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_channels_messages_update_hosted_contents(connection, team_id, channel_id, chat_message_id, chat_message_hosted_content_id, microsoft_graph_chat_message_hosted_content, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/teams/#{team_id}/channels/#{channel_id}/messages/#{chat_message_id}/hostedContents/#{chat_message_hosted_content_id}")
      |> add_param(:body, :body, microsoft_graph_chat_message_hosted_content)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update media content for the navigation property hostedContents in teams

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_hosted_content_id` (String.t): The unique identifier of chatMessageHostedContent
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_channels_messages_update_hosted_contents_content(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_channels_messages_update_hosted_contents_content(connection, team_id, channel_id, chat_message_id, chat_message_hosted_content_id, body, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/teams/#{team_id}/channels/#{channel_id}/messages/#{chat_message_id}/hostedContents/#{chat_message_hosted_content_id}/$value")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property replies in teams

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `microsoft_graph_chat_message` (MicrosoftGraphChatMessage): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_channels_messages_update_replies(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_channels_messages_update_replies(connection, team_id, channel_id, chat_message_id, chat_message_id1, microsoft_graph_chat_message, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/teams/#{team_id}/channels/#{channel_id}/messages/#{chat_message_id}/replies/#{chat_message_id1}")
      |> add_param(:body, :body, microsoft_graph_chat_message)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `shared_with_channel_team_info_id` (String.t): The unique identifier of sharedWithChannelTeamInfo
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_channels_shared_with_teams_allowed_members_get_count5a86(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_channels_shared_with_teams_allowed_members_get_count5a86(connection, team_id, channel_id, shared_with_channel_team_info_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/channels/#{channel_id}/sharedWithTeams/#{shared_with_channel_team_info_id}/allowedMembers/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get allowedMembers from teams
  A collection of team members who have access to the shared channel.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `shared_with_channel_team_info_id` (String.t): The unique identifier of sharedWithChannelTeamInfo
  - `conversation_member_id` (String.t): The unique identifier of conversationMember
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMember.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_channels_shared_with_teams_get_allowed_members(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMember.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_channels_shared_with_teams_get_allowed_members(connection, team_id, channel_id, shared_with_channel_team_info_id, conversation_member_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/channels/#{channel_id}/sharedWithTeams/#{shared_with_channel_team_info_id}/allowedMembers/#{conversation_member_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphConversationMember},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_channels_shared_with_teams_get_count11a3(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_channels_shared_with_teams_get_count11a3(connection, team_id, channel_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/channels/#{channel_id}/sharedWithTeams/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get team from teams

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `shared_with_channel_team_info_id` (String.t): The unique identifier of sharedWithChannelTeamInfo
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeam.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_channels_shared_with_teams_get_team(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTeam.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_channels_shared_with_teams_get_team(connection, team_id, channel_id, shared_with_channel_team_info_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/channels/#{channel_id}/sharedWithTeams/#{shared_with_channel_team_info_id}/team")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeam},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List allowedMembers
  Get the list of conversationMembers who can access a shared channel. This method does not return the following conversationMembers from the team: - Users with Guest role - Users who are externally authenticated in the tenant This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `shared_with_channel_team_info_id` (String.t): The unique identifier of sharedWithChannelTeamInfo
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMemberCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_channels_shared_with_teams_list_allowed_members(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMemberCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_channels_shared_with_teams_list_allowed_members(connection, team_id, channel_id, shared_with_channel_team_info_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/channels/#{channel_id}/sharedWithTeams/#{shared_with_channel_team_info_id}/allowedMembers")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphConversationMemberCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_channels_tabs_get_count_f94d(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_channels_tabs_get_count_f94d(connection, team_id, channel_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/channels/#{channel_id}/tabs/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get teamsApp from teams
  The application that is linked to the tab. This can't be changed after tab creation.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `teams_tab_id` (String.t): The unique identifier of teamsTab
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_channels_tabs_get_teams_app(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsApp.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_channels_tabs_get_teams_app(connection, team_id, channel_id, teams_tab_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/channels/#{channel_id}/tabs/#{teams_tab_id}/teamsApp")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamsApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update content for the navigation property filesFolder in teams
  The content stream, if the item represents a file.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_channels_update_files_folder_content(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_channels_update_files_folder_content(connection, team_id, channel_id, body, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/teams/#{team_id}/channels/#{channel_id}/filesFolder/content")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDriveItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update member in channel
  Update the role of a conversationMember in a channel. This operation is allowed only for channels with a membershipType value of private or shared. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `conversation_member_id` (String.t): The unique identifier of conversationMember
  - `microsoft_graph_conversation_member` (MicrosoftGraphConversationMember): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMember.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_channels_update_members(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphConversationMember.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMember.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_channels_update_members(connection, team_id, channel_id, conversation_member_id, microsoft_graph_conversation_member, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/teams/#{team_id}/channels/#{channel_id}/members/#{conversation_member_id}")
      |> add_param(:body, :body, microsoft_graph_conversation_member)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphConversationMember},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update chatMessage
  Update a chatMessage object.  With the exception of the policyViolation property, all properties of a chatMessage can be updated in delegated permissions scenarios. Only the policyViolation property of a chatMessage can be updated in application permissions scenarios. The update only works for chats where members are Microsoft Teams users. If one of the participants is using Skype, the operation will fail. This method does not support federation. Only the user in the tenant who sent the message can perform data loss prevention (DLP) updates on the specified chat message. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `microsoft_graph_chat_message` (MicrosoftGraphChatMessage): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_channels_update_messages(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_channels_update_messages(connection, team_id, channel_id, chat_message_id, microsoft_graph_chat_message, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/teams/#{team_id}/channels/#{channel_id}/messages/#{chat_message_id}")
      |> add_param(:body, :body, microsoft_graph_chat_message)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property sharedWithTeams in teams

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `shared_with_channel_team_info_id` (String.t): The unique identifier of sharedWithChannelTeamInfo
  - `microsoft_graph_shared_with_channel_team_info` (MicrosoftGraphSharedWithChannelTeamInfo): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSharedWithChannelTeamInfo.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_channels_update_shared_with_teams(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphSharedWithChannelTeamInfo.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSharedWithChannelTeamInfo.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_channels_update_shared_with_teams(connection, team_id, channel_id, shared_with_channel_team_info_id, microsoft_graph_shared_with_channel_team_info, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/teams/#{team_id}/channels/#{channel_id}/sharedWithTeams/#{shared_with_channel_team_info_id}")
      |> add_param(:body, :body, microsoft_graph_shared_with_channel_team_info)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSharedWithChannelTeamInfo},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update tab
  Update the properties of the specified tab. This can be used to configure the content of the tab. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `teams_tab_id` (String.t): The unique identifier of teamsTab
  - `microsoft_graph_teams_tab` (MicrosoftGraphTeamsTab): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsTab.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_channels_update_tabs(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTeamsTab.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsTab.t} | {:error, Tesla.Env.t}
  def teams_channels_update_tabs(connection, team_id, channel_id, teams_tab_id, microsoft_graph_teams_tab, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/teams/#{team_id}/channels/#{channel_id}/tabs/#{teams_tab_id}")
      |> add_param(:body, :body, microsoft_graph_teams_tab)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamsTab},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create channel
  Create a new channel in a team, as specified in the request body.  When you create a channel, the maximum length of the channel's displayName is 50 characters. This is the name that appears to the user in Microsoft Teams. If you're creating a private channel, you can add a maximum of 200 members. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `microsoft_graph_channel` (MicrosoftGraphChannel): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChannel.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_create_channels(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphChannel.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphChannel.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_create_channels(connection, team_id, microsoft_graph_channel, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/teams/#{team_id}/channels")
      |> add_param(:body, :body, microsoft_graph_channel)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChannel},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete channel
  Delete the channel. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_delete_channels(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_delete_channels(connection, team_id, channel_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/teams/#{team_id}/channels/#{channel_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Remove channel
  Remove an incoming channel (a channel shared with a team) from a team.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_delete_incoming_channels(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_delete_incoming_channels(connection, team_id, channel_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/teams/#{team_id}/incomingChannels/#{channel_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property primaryChannel for teams

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_delete_primary_channel(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_delete_primary_channel(connection, team_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/teams/#{team_id}/primaryChannel")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get allChannels from teams
  List of channels either hosted in or shared with the team (incoming channels).

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChannel.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_get_all_channels(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphChannel.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_get_all_channels(connection, team_id, channel_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/allChannels/#{channel_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChannel},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get channel
  Retrieve the properties and relationships of a channel. This method supports federation. Only a user who is a member of the shared channel can retrieve channel information. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChannel.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_get_channels(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphChannel.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_get_channels(connection, team_id, channel_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/channels/#{channel_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChannel},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get incomingChannels from teams
  List of channels shared with the team.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChannel.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_get_incoming_channels(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphChannel.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_get_incoming_channels(connection, team_id, channel_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/incomingChannels/#{channel_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChannel},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get primaryChannel
  Get the default channel, General, of a team. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChannel.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_get_primary_channel(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphChannel.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_get_primary_channel(connection, team_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/primaryChannel")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChannel},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_incoming_channels_get_count728b(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_incoming_channels_get_count728b(connection, team_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/incomingChannels/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List allChannels
  Get the list of channels either in this team or shared with this team (incoming channels). This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChannelCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_list_all_channels(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphChannelCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_list_all_channels(connection, team_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/allChannels")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChannelCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List channels
  Retrieve the list of channels in this team. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChannelCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_list_channels(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphChannelCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_list_channels(connection, team_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/channels")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChannelCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List incomingChannels
  Get the list of incoming channels (channels shared with a team). This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChannelCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_list_incoming_channels(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphChannelCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_list_incoming_channels(connection, team_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/incomingChannels")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChannelCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Add member to channel
  Add a conversationMember to a channel. This operation is allowed only for channels with a membershipType value of private or shared. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `microsoft_graph_conversation_member` (MicrosoftGraphConversationMember): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMember.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_primary_channel_create_members(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphConversationMember.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMember.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_primary_channel_create_members(connection, team_id, microsoft_graph_conversation_member, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/teams/#{team_id}/primaryChannel/members")
      |> add_param(:body, :body, microsoft_graph_conversation_member)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphConversationMember},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Send chatMessage in a channel or a chat
  Send a new chatMessage in the specified channel or a chat. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `microsoft_graph_chat_message` (MicrosoftGraphChatMessage): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_primary_channel_create_messages(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_primary_channel_create_messages(connection, team_id, microsoft_graph_chat_message, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/teams/#{team_id}/primaryChannel/messages")
      |> add_param(:body, :body, microsoft_graph_chat_message)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to sharedWithTeams for teams

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `microsoft_graph_shared_with_channel_team_info` (MicrosoftGraphSharedWithChannelTeamInfo): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSharedWithChannelTeamInfo.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_primary_channel_create_shared_with_teams(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphSharedWithChannelTeamInfo.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSharedWithChannelTeamInfo.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_primary_channel_create_shared_with_teams(connection, team_id, microsoft_graph_shared_with_channel_team_info, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/teams/#{team_id}/primaryChannel/sharedWithTeams")
      |> add_param(:body, :body, microsoft_graph_shared_with_channel_team_info)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSharedWithChannelTeamInfo},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Add tab to channel
  Adds (pins) a tab to the specified channel within a team.  The corresponding app must already be installed in the team. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `microsoft_graph_teams_tab` (MicrosoftGraphTeamsTab): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsTab.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_primary_channel_create_tabs(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphTeamsTab.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsTab.t} | {:error, Tesla.Env.t}
  def teams_primary_channel_create_tabs(connection, team_id, microsoft_graph_teams_tab, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/teams/#{team_id}/primaryChannel/tabs")
      |> add_param(:body, :body, microsoft_graph_teams_tab)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamsTab},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete conversationMember
  Delete a conversationMember from a channel. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `conversation_member_id` (String.t): The unique identifier of conversationMember
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_primary_channel_delete_members(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_primary_channel_delete_members(connection, team_id, conversation_member_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/teams/#{team_id}/primaryChannel/members/#{conversation_member_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property messages for teams

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_primary_channel_delete_messages(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_primary_channel_delete_messages(connection, team_id, chat_message_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/teams/#{team_id}/primaryChannel/messages/#{chat_message_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete sharedWithChannelTeamInfo
  Unshare a channel with a team by deleting the corresponding sharedWithChannelTeamInfo resource. This operation is allowed only for channels with a membershipType value of shared. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `shared_with_channel_team_info_id` (String.t): The unique identifier of sharedWithChannelTeamInfo
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_primary_channel_delete_shared_with_teams(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_primary_channel_delete_shared_with_teams(connection, team_id, shared_with_channel_team_info_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/teams/#{team_id}/primaryChannel/sharedWithTeams/#{shared_with_channel_team_info_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete tab from channel
  Removes (unpins) a tab from the specified channel within a team.  This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `teams_tab_id` (String.t): The unique identifier of teamsTab
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_primary_channel_delete_tabs(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_primary_channel_delete_tabs(connection, team_id, teams_tab_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/teams/#{team_id}/primaryChannel/tabs/#{teams_tab_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get filesFolder
  Get the metadata for the location where the files of a channel are stored.  This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_primary_channel_get_files_folder(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_primary_channel_get_files_folder(connection, team_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/primaryChannel/filesFolder")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDriveItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get content for the navigation property filesFolder from teams
  The content stream, if the item represents a file.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_primary_channel_get_files_folder_content(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def teams_primary_channel_get_files_folder_content(connection, team_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/primaryChannel/filesFolder/content")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get member of channel
  Get a conversationMember from a channel. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `conversation_member_id` (String.t): The unique identifier of conversationMember
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMember.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_primary_channel_get_members(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMember.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_primary_channel_get_members(connection, team_id, conversation_member_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/primaryChannel/members/#{conversation_member_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphConversationMember},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get chatMessage in a channel or chat
  Retrieve a single message or a message reply in a channel or a chat. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_primary_channel_get_messages(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_primary_channel_get_messages(connection, team_id, chat_message_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/primaryChannel/messages/#{chat_message_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get sharedWithChannelTeamInfo
  Get a team that has been shared with a specified channel. This operation is allowed only for channels with a membershipType value of shared. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `shared_with_channel_team_info_id` (String.t): The unique identifier of sharedWithChannelTeamInfo
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSharedWithChannelTeamInfo.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_primary_channel_get_shared_with_teams(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSharedWithChannelTeamInfo.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_primary_channel_get_shared_with_teams(connection, team_id, shared_with_channel_team_info_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/primaryChannel/sharedWithTeams/#{shared_with_channel_team_info_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSharedWithChannelTeamInfo},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get tab
  Retrieve the properties and relationships of the specified tab in a channel within a team.  This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `teams_tab_id` (String.t): The unique identifier of teamsTab
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsTab.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_primary_channel_get_tabs(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsTab.t} | {:error, Tesla.Env.t}
  def teams_primary_channel_get_tabs(connection, team_id, teams_tab_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/primaryChannel/tabs/#{teams_tab_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamsTab},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List members of a channel
  Retrieve a list of conversationMembers from a channel. This method supports federation. Only a user who is a member of the shared channel can retrieve the channel member list. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMemberCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_primary_channel_list_members(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMemberCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_primary_channel_list_members(connection, team_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/primaryChannel/members")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphConversationMemberCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List channel messages
  Retrieve the list of messages (without the replies) in a channel of a team.  To get the replies for a message, call the list message replies or the get message reply API.  This method supports federation. To list channel messages in application context, the request must be made from the tenant that the channel owner belongs to (represented by the tenantId property on the channel). This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_primary_channel_list_messages(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_primary_channel_list_messages(connection, team_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/primaryChannel/messages")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessageCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List sharedWithChannelTeamInfo
  Get the list of teams that has been shared a specified channel. This operation is allowed only for channels with a membershipType value of shared. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSharedWithChannelTeamInfoCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_primary_channel_list_shared_with_teams(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSharedWithChannelTeamInfoCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_primary_channel_list_shared_with_teams(connection, team_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/primaryChannel/sharedWithTeams")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSharedWithChannelTeamInfoCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List tabs in channel
  Retrieve the list of tabs in the specified channel within a team.  This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsTabCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_primary_channel_list_tabs(Tesla.Env.client, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsTabCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_primary_channel_list_tabs(connection, team_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/primaryChannel/tabs")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamsTabCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_primary_channel_members_get_count8411(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_primary_channel_members_get_count8411(connection, team_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/primaryChannel/members/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to hostedContents for teams

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `microsoft_graph_chat_message_hosted_content` (MicrosoftGraphChatMessageHostedContent): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_primary_channel_messages_create_hosted_contents(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_primary_channel_messages_create_hosted_contents(connection, team_id, chat_message_id, microsoft_graph_chat_message_hosted_content, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/teams/#{team_id}/primaryChannel/messages/#{chat_message_id}/hostedContents")
      |> add_param(:body, :body, microsoft_graph_chat_message_hosted_content)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Send replies to a message in a channel
  Send a new reply to a chatMessage in a specified channel. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `microsoft_graph_chat_message` (MicrosoftGraphChatMessage): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_primary_channel_messages_create_replies(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_primary_channel_messages_create_replies(connection, team_id, chat_message_id, microsoft_graph_chat_message, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/teams/#{team_id}/primaryChannel/messages/#{chat_message_id}/replies")
      |> add_param(:body, :body, microsoft_graph_chat_message)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property hostedContents for teams

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_hosted_content_id` (String.t): The unique identifier of chatMessageHostedContent
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_primary_channel_messages_delete_hosted_contents(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_primary_channel_messages_delete_hosted_contents(connection, team_id, chat_message_id, chat_message_hosted_content_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/teams/#{team_id}/primaryChannel/messages/#{chat_message_id}/hostedContents/#{chat_message_hosted_content_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property replies for teams

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_primary_channel_messages_delete_replies(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_primary_channel_messages_delete_replies(connection, team_id, chat_message_id, chat_message_id1, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/teams/#{team_id}/primaryChannel/messages/#{chat_message_id}/replies/#{chat_message_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_primary_channel_messages_get_count_d90b(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_primary_channel_messages_get_count_d90b(connection, team_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/primaryChannel/messages/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get chatMessageHostedContent
  Retrieve the properties and relationships of chatMessageHostedContent object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_hosted_content_id` (String.t): The unique identifier of chatMessageHostedContent
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_primary_channel_messages_get_hosted_contents(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_primary_channel_messages_get_hosted_contents(connection, team_id, chat_message_id, chat_message_hosted_content_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/primaryChannel/messages/#{chat_message_id}/hostedContents/#{chat_message_hosted_content_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get media content for the navigation property hostedContents from teams

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_hosted_content_id` (String.t): The unique identifier of chatMessageHostedContent
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_primary_channel_messages_get_hosted_contents_content(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def teams_primary_channel_messages_get_hosted_contents_content(connection, team_id, chat_message_id, chat_message_hosted_content_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/primaryChannel/messages/#{chat_message_id}/hostedContents/#{chat_message_hosted_content_id}/$value")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get chatMessage in a channel or chat
  Retrieve a single message or a message reply in a channel or a chat. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_primary_channel_messages_get_replies(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_primary_channel_messages_get_replies(connection, team_id, chat_message_id, chat_message_id1, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/primaryChannel/messages/#{chat_message_id}/replies/#{chat_message_id1}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_primary_channel_messages_hosted_contents_get_count_ed0a(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_primary_channel_messages_hosted_contents_get_count_ed0a(connection, team_id, chat_message_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/primaryChannel/messages/#{chat_message_id}/hostedContents/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List hostedContents
  Retrieve the list of chatMessageHostedContent objects from a message. This API only lists the hosted content objects. To get the content bytes, see get chatmessage hosted content This API is available in the following national cloud deployments. The following tables show the least privileged permission or permissions required to call this API on each supported resource type. Follow best practices to request least privileged permissions. For details about delegated and application permissions, see Permission types. To learn more about these permissions, see the permissions reference.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_primary_channel_messages_list_hosted_contents(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContentCollectionResponse.t} | {:error, Tesla.Env.t}
  def teams_primary_channel_messages_list_hosted_contents(connection, team_id, chat_message_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/primaryChannel/messages/#{chat_message_id}/hostedContents")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List replies
  List all the replies to a message in a channel of a team. This method lists only the replies of the specified message, if any. To get the message itself, simply call get channel message. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_primary_channel_messages_list_replies(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_primary_channel_messages_list_replies(connection, team_id, chat_message_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/primaryChannel/messages/#{chat_message_id}/replies")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessageCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Create new navigation property to hostedContents for teams

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `microsoft_graph_chat_message_hosted_content` (MicrosoftGraphChatMessageHostedContent): New navigation property
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_primary_channel_messages_replies_create_hosted_contents(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_primary_channel_messages_replies_create_hosted_contents(connection, team_id, chat_message_id, chat_message_id1, microsoft_graph_chat_message_hosted_content, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/teams/#{team_id}/primaryChannel/messages/#{chat_message_id}/replies/#{chat_message_id1}/hostedContents")
      |> add_param(:body, :body, microsoft_graph_chat_message_hosted_content)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Delete navigation property hostedContents for teams

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `chat_message_hosted_content_id` (String.t): The unique identifier of chatMessageHostedContent
  - `opts` (keyword): Optional parameters
    - `:"If-Match"` (String.t): ETag

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_primary_channel_messages_replies_delete_hosted_contents(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_primary_channel_messages_replies_delete_hosted_contents(connection, team_id, chat_message_id, chat_message_id1, chat_message_hosted_content_id, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }

    request =
      %{}
      |> method(:delete)
      |> url("/teams/#{team_id}/primaryChannel/messages/#{chat_message_id}/replies/#{chat_message_id1}/hostedContents/#{chat_message_hosted_content_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_primary_channel_messages_replies_get_count_eb7a(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_primary_channel_messages_replies_get_count_eb7a(connection, team_id, chat_message_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/primaryChannel/messages/#{chat_message_id}/replies/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get chatMessageHostedContent
  Retrieve the properties and relationships of chatMessageHostedContent object. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `chat_message_hosted_content_id` (String.t): The unique identifier of chatMessageHostedContent
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_primary_channel_messages_replies_get_hosted_contents(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_primary_channel_messages_replies_get_hosted_contents(connection, team_id, chat_message_id, chat_message_id1, chat_message_hosted_content_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/primaryChannel/messages/#{chat_message_id}/replies/#{chat_message_id1}/hostedContents/#{chat_message_hosted_content_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get media content for the navigation property hostedContents from teams

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `chat_message_hosted_content_id` (String.t): The unique identifier of chatMessageHostedContent
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_primary_channel_messages_replies_get_hosted_contents_content(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def teams_primary_channel_messages_replies_get_hosted_contents_content(connection, team_id, chat_message_id, chat_message_id1, chat_message_hosted_content_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/primaryChannel/messages/#{chat_message_id}/replies/#{chat_message_id1}/hostedContents/#{chat_message_hosted_content_id}/$value")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_primary_channel_messages_replies_hosted_contents_get_count1d3a(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_primary_channel_messages_replies_hosted_contents_get_count1d3a(connection, team_id, chat_message_id, chat_message_id1, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/primaryChannel/messages/#{chat_message_id}/replies/#{chat_message_id1}/hostedContents/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List hostedContents
  Retrieve the list of chatMessageHostedContent objects from a message. This API only lists the hosted content objects. To get the content bytes, see get chatmessage hosted content This API is available in the following national cloud deployments. The following tables show the least privileged permission or permissions required to call this API on each supported resource type. Follow best practices to request least privileged permissions. For details about delegated and application permissions, see Permission types. To learn more about these permissions, see the permissions reference.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContentCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_primary_channel_messages_replies_list_hosted_contents(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContentCollectionResponse.t} | {:error, Tesla.Env.t}
  def teams_primary_channel_messages_replies_list_hosted_contents(connection, team_id, chat_message_id, chat_message_id1, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/primaryChannel/messages/#{chat_message_id}/replies/#{chat_message_id1}/hostedContents")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContentCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property hostedContents in teams

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `chat_message_hosted_content_id` (String.t): The unique identifier of chatMessageHostedContent
  - `microsoft_graph_chat_message_hosted_content` (MicrosoftGraphChatMessageHostedContent): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_primary_channel_messages_replies_update_hosted_contents(Tesla.Env.client, String.t, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_primary_channel_messages_replies_update_hosted_contents(connection, team_id, chat_message_id, chat_message_id1, chat_message_hosted_content_id, microsoft_graph_chat_message_hosted_content, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/teams/#{team_id}/primaryChannel/messages/#{chat_message_id}/replies/#{chat_message_id1}/hostedContents/#{chat_message_hosted_content_id}")
      |> add_param(:body, :body, microsoft_graph_chat_message_hosted_content)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update media content for the navigation property hostedContents in teams

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `chat_message_hosted_content_id` (String.t): The unique identifier of chatMessageHostedContent
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_primary_channel_messages_replies_update_hosted_contents_content(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_primary_channel_messages_replies_update_hosted_contents_content(connection, team_id, chat_message_id, chat_message_id1, chat_message_hosted_content_id, body, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/teams/#{team_id}/primaryChannel/messages/#{chat_message_id}/replies/#{chat_message_id1}/hostedContents/#{chat_message_hosted_content_id}/$value")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property hostedContents in teams

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_hosted_content_id` (String.t): The unique identifier of chatMessageHostedContent
  - `microsoft_graph_chat_message_hosted_content` (MicrosoftGraphChatMessageHostedContent): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_primary_channel_messages_update_hosted_contents(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_primary_channel_messages_update_hosted_contents(connection, team_id, chat_message_id, chat_message_hosted_content_id, microsoft_graph_chat_message_hosted_content, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/teams/#{team_id}/primaryChannel/messages/#{chat_message_id}/hostedContents/#{chat_message_hosted_content_id}")
      |> add_param(:body, :body, microsoft_graph_chat_message_hosted_content)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessageHostedContent},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update media content for the navigation property hostedContents in teams

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_hosted_content_id` (String.t): The unique identifier of chatMessageHostedContent
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_primary_channel_messages_update_hosted_contents_content(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_primary_channel_messages_update_hosted_contents_content(connection, team_id, chat_message_id, chat_message_hosted_content_id, body, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/teams/#{team_id}/primaryChannel/messages/#{chat_message_id}/hostedContents/#{chat_message_hosted_content_id}/$value")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property replies in teams

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `chat_message_id1` (String.t): The unique identifier of chatMessage
  - `microsoft_graph_chat_message` (MicrosoftGraphChatMessage): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_primary_channel_messages_update_replies(Tesla.Env.client, String.t, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_primary_channel_messages_update_replies(connection, team_id, chat_message_id, chat_message_id1, microsoft_graph_chat_message, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/teams/#{team_id}/primaryChannel/messages/#{chat_message_id}/replies/#{chat_message_id1}")
      |> add_param(:body, :body, microsoft_graph_chat_message)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `shared_with_channel_team_info_id` (String.t): The unique identifier of sharedWithChannelTeamInfo
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_primary_channel_shared_with_teams_allowed_members_get_count2d1d(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_primary_channel_shared_with_teams_allowed_members_get_count2d1d(connection, team_id, shared_with_channel_team_info_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/primaryChannel/sharedWithTeams/#{shared_with_channel_team_info_id}/allowedMembers/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get allowedMembers from teams
  A collection of team members who have access to the shared channel.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `shared_with_channel_team_info_id` (String.t): The unique identifier of sharedWithChannelTeamInfo
  - `conversation_member_id` (String.t): The unique identifier of conversationMember
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMember.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_primary_channel_shared_with_teams_get_allowed_members(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMember.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_primary_channel_shared_with_teams_get_allowed_members(connection, team_id, shared_with_channel_team_info_id, conversation_member_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/primaryChannel/sharedWithTeams/#{shared_with_channel_team_info_id}/allowedMembers/#{conversation_member_id}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphConversationMember},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_primary_channel_shared_with_teams_get_count9fea(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_primary_channel_shared_with_teams_get_count9fea(connection, team_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/primaryChannel/sharedWithTeams/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get team from teams

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `shared_with_channel_team_info_id` (String.t): The unique identifier of sharedWithChannelTeamInfo
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeam.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_primary_channel_shared_with_teams_get_team(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTeam.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_primary_channel_shared_with_teams_get_team(connection, team_id, shared_with_channel_team_info_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/primaryChannel/sharedWithTeams/#{shared_with_channel_team_info_id}/team")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeam},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  List allowedMembers
  Get the list of conversationMembers who can access a shared channel. This method does not return the following conversationMembers from the team: - Users with Guest role - Users who are externally authenticated in the tenant This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `shared_with_channel_team_info_id` (String.t): The unique identifier of sharedWithChannelTeamInfo
  - `opts` (keyword): Optional parameters
    - `:"$top"` (integer()): Show only the first n items
    - `:"$skip"` (integer()): Skip the first n items
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values
    - `:"$count"` (boolean()): Include count of items
    - `:"$orderby"` ([String.t]): Order items by property values
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMemberCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_primary_channel_shared_with_teams_list_allowed_members(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMemberCollectionResponse.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_primary_channel_shared_with_teams_list_allowed_members(connection, team_id, shared_with_channel_team_info_id, opts \\ []) do
    optional_params = %{
      :"$top" => :query,
      :"$skip" => :query,
      :"$search" => :query,
      :"$filter" => :query,
      :"$count" => :query,
      :"$orderby" => :query,
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/primaryChannel/sharedWithTeams/#{shared_with_channel_team_info_id}/allowedMembers")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphConversationMemberCollectionResponse},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get the number of the resource

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `opts` (keyword): Optional parameters
    - `:"$search"` (String.t): Search items by search phrases
    - `:"$filter"` (String.t): Filter items by property values

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_primary_channel_tabs_get_count8cf3(Tesla.Env.client, String.t, keyword()) :: {:ok, Integer.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_primary_channel_tabs_get_count8cf3(connection, team_id, opts \\ []) do
    optional_params = %{
      :"$search" => :query,
      :"$filter" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/primaryChannel/tabs/$count")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", false},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Get teamsApp from teams
  The application that is linked to the tab. This can't be changed after tab creation.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `teams_tab_id` (String.t): The unique identifier of teamsTab
  - `opts` (keyword): Optional parameters
    - `:"$select"` ([String.t]): Select properties to be returned
    - `:"$expand"` ([String.t]): Expand related entities

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsApp.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_primary_channel_tabs_get_teams_app(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsApp.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_primary_channel_tabs_get_teams_app(connection, team_id, teams_tab_id, opts \\ []) do
    optional_params = %{
      :"$select" => :query,
      :"$expand" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/teams/#{team_id}/primaryChannel/tabs/#{teams_tab_id}/teamsApp")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamsApp},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update content for the navigation property filesFolder in teams
  The content stream, if the item represents a file.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `body` (String.t): New media content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_primary_channel_update_files_folder_content(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphDriveItem.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_primary_channel_update_files_folder_content(connection, team_id, body, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/teams/#{team_id}/primaryChannel/filesFolder/content")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphDriveItem},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update member in channel
  Update the role of a conversationMember in a channel. This operation is allowed only for channels with a membershipType value of private or shared. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `conversation_member_id` (String.t): The unique identifier of conversationMember
  - `microsoft_graph_conversation_member` (MicrosoftGraphConversationMember): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMember.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_primary_channel_update_members(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphConversationMember.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphConversationMember.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_primary_channel_update_members(connection, team_id, conversation_member_id, microsoft_graph_conversation_member, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/teams/#{team_id}/primaryChannel/members/#{conversation_member_id}")
      |> add_param(:body, :body, microsoft_graph_conversation_member)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphConversationMember},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update chatMessage
  Update a chatMessage object.  With the exception of the policyViolation property, all properties of a chatMessage can be updated in delegated permissions scenarios. Only the policyViolation property of a chatMessage can be updated in application permissions scenarios. The update only works for chats where members are Microsoft Teams users. If one of the participants is using Skype, the operation will fail. This method does not support federation. Only the user in the tenant who sent the message can perform data loss prevention (DLP) updates on the specified chat message. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `chat_message_id` (String.t): The unique identifier of chatMessage
  - `microsoft_graph_chat_message` (MicrosoftGraphChatMessage): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_primary_channel_update_messages(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphChatMessage.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_primary_channel_update_messages(connection, team_id, chat_message_id, microsoft_graph_chat_message, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/teams/#{team_id}/primaryChannel/messages/#{chat_message_id}")
      |> add_param(:body, :body, microsoft_graph_chat_message)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChatMessage},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property sharedWithTeams in teams

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `shared_with_channel_team_info_id` (String.t): The unique identifier of sharedWithChannelTeamInfo
  - `microsoft_graph_shared_with_channel_team_info` (MicrosoftGraphSharedWithChannelTeamInfo): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphSharedWithChannelTeamInfo.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_primary_channel_update_shared_with_teams(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphSharedWithChannelTeamInfo.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphSharedWithChannelTeamInfo.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_primary_channel_update_shared_with_teams(connection, team_id, shared_with_channel_team_info_id, microsoft_graph_shared_with_channel_team_info, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/teams/#{team_id}/primaryChannel/sharedWithTeams/#{shared_with_channel_team_info_id}")
      |> add_param(:body, :body, microsoft_graph_shared_with_channel_team_info)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphSharedWithChannelTeamInfo},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update tab
  Update the properties of the specified tab. This can be used to configure the content of the tab. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `teams_tab_id` (String.t): The unique identifier of teamsTab
  - `microsoft_graph_teams_tab` (MicrosoftGraphTeamsTab): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsTab.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_primary_channel_update_tabs(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphTeamsTab.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphTeamsTab.t} | {:error, Tesla.Env.t}
  def teams_primary_channel_update_tabs(connection, team_id, teams_tab_id, microsoft_graph_teams_tab, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/teams/#{team_id}/primaryChannel/tabs/#{teams_tab_id}")
      |> add_param(:body, :body, microsoft_graph_teams_tab)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphTeamsTab},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Patch channel
  Update the properties of the specified channel. This API is available in the following national cloud deployments.

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `channel_id` (String.t): The unique identifier of channel
  - `microsoft_graph_channel` (MicrosoftGraphChannel): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChannel.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_update_channels(Tesla.Env.client, String.t, String.t, MicrosoftGraph.Model.MicrosoftGraphChannel.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphChannel.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_update_channels(connection, team_id, channel_id, microsoft_graph_channel, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/teams/#{team_id}/channels/#{channel_id}")
      |> add_param(:body, :body, microsoft_graph_channel)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChannel},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end

  @doc """
  Update the navigation property primaryChannel in teams

  ### Parameters

  - `connection` (MicrosoftGraph.Connection): Connection to server
  - `team_id` (String.t): The unique identifier of team
  - `microsoft_graph_channel` (MicrosoftGraphChannel): New navigation property values
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, MicrosoftGraph.Model.MicrosoftGraphChannel.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec teams_update_primary_channel(Tesla.Env.client, String.t, MicrosoftGraph.Model.MicrosoftGraphChannel.t, keyword()) :: {:ok, MicrosoftGraph.Model.MicrosoftGraphChannel.t} | {:ok, MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError.t} | {:error, Tesla.Env.t}
  def teams_update_primary_channel(connection, team_id, microsoft_graph_channel, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/teams/#{team_id}/primaryChannel")
      |> add_param(:body, :body, microsoft_graph_channel)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {"2XX", MicrosoftGraph.Model.MicrosoftGraphChannel},
      {"4XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError},
      {"5XX", MicrosoftGraph.Model.MicrosoftGraphODataErrorsODataError}
    ])
  end
end
