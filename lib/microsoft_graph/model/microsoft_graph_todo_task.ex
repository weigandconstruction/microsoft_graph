# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Model.MicrosoftGraphTodoTask do
  @moduledoc """

  """

  @derive Jason.Encoder
  defstruct [
    :"@odata.type",
    :id,
    :attachmentSessions,
    :attachments,
    :body,
    :bodyLastModifiedDateTime,
    :categories,
    :checklistItems,
    :completedDateTime,
    :createdDateTime,
    :dueDateTime,
    :extensions,
    :hasAttachments,
    :importance,
    :isReminderOn,
    :lastModifiedDateTime,
    :linkedResources,
    :recurrence,
    :reminderDateTime,
    :startDateTime,
    :status,
    :title
  ]

  @type t :: %__MODULE__{
          :"@odata.type" => String.t(),
          :id => String.t() | nil,
          :attachmentSessions => [MicrosoftGraph.Model.MicrosoftGraphAttachmentSession.t()] | nil,
          :attachments => [MicrosoftGraph.Model.MicrosoftGraphAttachmentBase.t()] | nil,
          :body => MicrosoftGraph.Model.TodoTaskBody.t() | nil,
          :bodyLastModifiedDateTime => DateTime.t() | nil,
          :categories => [String.t()] | nil,
          :checklistItems => [MicrosoftGraph.Model.MicrosoftGraphChecklistItem.t()] | nil,
          :completedDateTime => MicrosoftGraph.Model.TodoTaskCompletedDateTime.t() | nil,
          :createdDateTime => DateTime.t() | nil,
          :dueDateTime => MicrosoftGraph.Model.TodoTaskDueDateTime.t() | nil,
          :extensions => [MicrosoftGraph.Model.MicrosoftGraphExtension.t()] | nil,
          :hasAttachments => boolean() | nil,
          :importance => MicrosoftGraph.Model.MicrosoftGraphImportance.t() | nil,
          :isReminderOn => boolean() | nil,
          :lastModifiedDateTime => DateTime.t() | nil,
          :linkedResources => [MicrosoftGraph.Model.MicrosoftGraphLinkedResource.t()] | nil,
          :recurrence => MicrosoftGraph.Model.TodoTaskRecurrence.t() | nil,
          :reminderDateTime => MicrosoftGraph.Model.TodoTaskReminderDateTime.t() | nil,
          :startDateTime => MicrosoftGraph.Model.TodoTaskStartDateTime.t() | nil,
          :status => MicrosoftGraph.Model.MicrosoftGraphTaskStatus.t() | nil,
          :title => String.t() | nil
        }

  alias MicrosoftGraph.Deserializer

  def decode(value) do
    value
    |> Deserializer.deserialize(
      :attachmentSessions,
      :list,
      MicrosoftGraph.Model.MicrosoftGraphAttachmentSession
    )
    |> Deserializer.deserialize(
      :attachments,
      :list,
      MicrosoftGraph.Model.MicrosoftGraphAttachmentBase
    )
    |> Deserializer.deserialize(:body, :struct, MicrosoftGraph.Model.TodoTaskBody)
    |> Deserializer.deserialize(:bodyLastModifiedDateTime, :datetime, nil)
    |> Deserializer.deserialize(
      :checklistItems,
      :list,
      MicrosoftGraph.Model.MicrosoftGraphChecklistItem
    )
    |> Deserializer.deserialize(
      :completedDateTime,
      :struct,
      MicrosoftGraph.Model.TodoTaskCompletedDateTime
    )
    |> Deserializer.deserialize(:createdDateTime, :datetime, nil)
    |> Deserializer.deserialize(:dueDateTime, :struct, MicrosoftGraph.Model.TodoTaskDueDateTime)
    |> Deserializer.deserialize(:extensions, :list, MicrosoftGraph.Model.MicrosoftGraphExtension)
    |> Deserializer.deserialize(
      :importance,
      :struct,
      MicrosoftGraph.Model.MicrosoftGraphImportance
    )
    |> Deserializer.deserialize(:lastModifiedDateTime, :datetime, nil)
    |> Deserializer.deserialize(
      :linkedResources,
      :list,
      MicrosoftGraph.Model.MicrosoftGraphLinkedResource
    )
    |> Deserializer.deserialize(:recurrence, :struct, MicrosoftGraph.Model.TodoTaskRecurrence)
    |> Deserializer.deserialize(
      :reminderDateTime,
      :struct,
      MicrosoftGraph.Model.TodoTaskReminderDateTime
    )
    |> Deserializer.deserialize(
      :startDateTime,
      :struct,
      MicrosoftGraph.Model.TodoTaskStartDateTime
    )
    |> Deserializer.deserialize(:status, :struct, MicrosoftGraph.Model.MicrosoftGraphTaskStatus)
  end
end
