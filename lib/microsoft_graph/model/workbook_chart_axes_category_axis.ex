# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Model.WorkbookChartAxesCategoryAxis do
  @moduledoc """
  Represents the category axis in a chart. Read-only.
  """

  @derive Jason.Encoder
  defstruct [
    :"@odata.type",
    :id,
    :format,
    :majorGridlines,
    :majorUnit,
    :maximum,
    :minimum,
    :minorGridlines,
    :minorUnit,
    :title
  ]

  @type t :: %__MODULE__{
    :"@odata.type" => String.t,
    :id => String.t | nil,
    :format => MicrosoftGraph.Model.WorkbookChartAxisFormat.t | nil,
    :majorGridlines => MicrosoftGraph.Model.WorkbookChartAxisMajorGridlines.t | nil,
    :majorUnit => MicrosoftGraph.Model.WorkbookChartAxisMajorUnit.t | nil,
    :maximum => MicrosoftGraph.Model.WorkbookChartAxisMaximum.t | nil,
    :minimum => MicrosoftGraph.Model.WorkbookChartAxisMinimum.t | nil,
    :minorGridlines => MicrosoftGraph.Model.WorkbookChartAxisMinorGridlines.t | nil,
    :minorUnit => MicrosoftGraph.Model.WorkbookChartAxisMinorUnit.t | nil,
    :title => MicrosoftGraph.Model.WorkbookChartAxisTitle.t | nil
  }

  alias MicrosoftGraph.Deserializer

  def decode(value) do
    value
     |> Deserializer.deserialize(:format, :struct, MicrosoftGraph.Model.WorkbookChartAxisFormat)
     |> Deserializer.deserialize(:majorGridlines, :struct, MicrosoftGraph.Model.WorkbookChartAxisMajorGridlines)
     |> Deserializer.deserialize(:majorUnit, :struct, MicrosoftGraph.Model.WorkbookChartAxisMajorUnit)
     |> Deserializer.deserialize(:maximum, :struct, MicrosoftGraph.Model.WorkbookChartAxisMaximum)
     |> Deserializer.deserialize(:minimum, :struct, MicrosoftGraph.Model.WorkbookChartAxisMinimum)
     |> Deserializer.deserialize(:minorGridlines, :struct, MicrosoftGraph.Model.WorkbookChartAxisMinorGridlines)
     |> Deserializer.deserialize(:minorUnit, :struct, MicrosoftGraph.Model.WorkbookChartAxisMinorUnit)
     |> Deserializer.deserialize(:title, :struct, MicrosoftGraph.Model.WorkbookChartAxisTitle)
  end
end

