# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Model.MicrosoftGraphRiskyUserHistoryItem do
  @moduledoc """

  """

  @derive Jason.Encoder
  defstruct [
    :"@odata.type",
    :id,
    :history,
    :isDeleted,
    :isProcessing,
    :riskDetail,
    :riskLastUpdatedDateTime,
    :riskLevel,
    :riskState,
    :userDisplayName,
    :userPrincipalName,
    :activity,
    :initiatedBy,
    :userId
  ]

  @type t :: %__MODULE__{
          :"@odata.type" => String.t(),
          :id => String.t() | nil,
          :history => [MicrosoftGraph.Model.MicrosoftGraphRiskyUserHistoryItem.t()] | nil,
          :isDeleted => boolean() | nil,
          :isProcessing => boolean() | nil,
          :riskDetail => MicrosoftGraph.Model.RiskyUserRiskDetail.t() | nil,
          :riskLastUpdatedDateTime => DateTime.t() | nil,
          :riskLevel => MicrosoftGraph.Model.RiskyUserRiskLevel.t() | nil,
          :riskState => MicrosoftGraph.Model.RiskyUserRiskState.t() | nil,
          :userDisplayName => String.t() | nil,
          :userPrincipalName => String.t() | nil,
          :activity => MicrosoftGraph.Model.RiskyUserHistoryItemActivity.t() | nil,
          :initiatedBy => String.t() | nil,
          :userId => String.t() | nil
        }

  alias MicrosoftGraph.Deserializer

  def decode(value) do
    value
    |> Deserializer.deserialize(
      :history,
      :list,
      MicrosoftGraph.Model.MicrosoftGraphRiskyUserHistoryItem
    )
    |> Deserializer.deserialize(:riskDetail, :struct, MicrosoftGraph.Model.RiskyUserRiskDetail)
    |> Deserializer.deserialize(:riskLastUpdatedDateTime, :datetime, nil)
    |> Deserializer.deserialize(:riskLevel, :struct, MicrosoftGraph.Model.RiskyUserRiskLevel)
    |> Deserializer.deserialize(:riskState, :struct, MicrosoftGraph.Model.RiskyUserRiskState)
    |> Deserializer.deserialize(
      :activity,
      :struct,
      MicrosoftGraph.Model.RiskyUserHistoryItemActivity
    )
  end
end
