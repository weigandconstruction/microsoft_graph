# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Model.MicrosoftGraphDeviceEnrollmentWindowsHelloForBusinessConfiguration do
  @moduledoc """

  """

  @derive Jason.Encoder
  defstruct [
    :"@odata.type",
    :id,
    :assignments,
    :createdDateTime,
    :description,
    :displayName,
    :lastModifiedDateTime,
    :priority,
    :version,
    :enhancedBiometricsState,
    :pinExpirationInDays,
    :pinLowercaseCharactersUsage,
    :pinMaximumLength,
    :pinMinimumLength,
    :pinPreviousBlockCount,
    :pinSpecialCharactersUsage,
    :pinUppercaseCharactersUsage,
    :remotePassportEnabled,
    :securityDeviceRequired,
    :state,
    :unlockWithBiometricsEnabled
  ]

  @type t :: %__MODULE__{
          :"@odata.type" => String.t(),
          :id => String.t() | nil,
          :assignments =>
            [MicrosoftGraph.Model.MicrosoftGraphEnrollmentConfigurationAssignment.t()] | nil,
          :createdDateTime => DateTime.t() | nil,
          :description => String.t() | nil,
          :displayName => String.t() | nil,
          :lastModifiedDateTime => DateTime.t() | nil,
          :priority => integer() | nil,
          :version => integer() | nil,
          :enhancedBiometricsState => MicrosoftGraph.Model.MicrosoftGraphEnablement.t() | nil,
          :pinExpirationInDays => integer() | nil,
          :pinLowercaseCharactersUsage =>
            MicrosoftGraph.Model.MicrosoftGraphWindowsHelloForBusinessPinUsage.t() | nil,
          :pinMaximumLength => integer() | nil,
          :pinMinimumLength => integer() | nil,
          :pinPreviousBlockCount => integer() | nil,
          :pinSpecialCharactersUsage =>
            MicrosoftGraph.Model.MicrosoftGraphWindowsHelloForBusinessPinUsage.t() | nil,
          :pinUppercaseCharactersUsage =>
            MicrosoftGraph.Model.MicrosoftGraphWindowsHelloForBusinessPinUsage.t() | nil,
          :remotePassportEnabled => boolean() | nil,
          :securityDeviceRequired => boolean() | nil,
          :state => MicrosoftGraph.Model.MicrosoftGraphEnablement.t() | nil,
          :unlockWithBiometricsEnabled => boolean() | nil
        }

  alias MicrosoftGraph.Deserializer

  def decode(value) do
    value
    |> Deserializer.deserialize(
      :assignments,
      :list,
      MicrosoftGraph.Model.MicrosoftGraphEnrollmentConfigurationAssignment
    )
    |> Deserializer.deserialize(:createdDateTime, :datetime, nil)
    |> Deserializer.deserialize(:lastModifiedDateTime, :datetime, nil)
    |> Deserializer.deserialize(
      :enhancedBiometricsState,
      :struct,
      MicrosoftGraph.Model.MicrosoftGraphEnablement
    )
    |> Deserializer.deserialize(
      :pinLowercaseCharactersUsage,
      :struct,
      MicrosoftGraph.Model.MicrosoftGraphWindowsHelloForBusinessPinUsage
    )
    |> Deserializer.deserialize(
      :pinSpecialCharactersUsage,
      :struct,
      MicrosoftGraph.Model.MicrosoftGraphWindowsHelloForBusinessPinUsage
    )
    |> Deserializer.deserialize(
      :pinUppercaseCharactersUsage,
      :struct,
      MicrosoftGraph.Model.MicrosoftGraphWindowsHelloForBusinessPinUsage
    )
    |> Deserializer.deserialize(:state, :struct, MicrosoftGraph.Model.MicrosoftGraphEnablement)
  end
end
