# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Model.MicrosoftGraphApplicationServicePrincipalApplication do
  @moduledoc """

  """

  @derive Jason.Encoder
  defstruct [
    :"@odata.type",
    :id,
    :deletedDateTime,
    :info,
    :homeRealmDiscoveryPolicies,
    :federatedIdentityCredentials,
    :passwordCredentials,
    :requestSignatureVerification,
    :isDeviceOnlyAuthSupported,
    :samlMetadataUrl,
    :api,
    :disabledByMicrosoftStatus,
    :publisherDomain,
    :tokenIssuancePolicies,
    :parentalControlSettings,
    :spa,
    :serviceManagementReference,
    :appRoles,
    :appManagementPolicies,
    :optionalClaims,
    :oauth2RequirePostResponse,
    :extensionProperties,
    :tags,
    :createdOnBehalfOf,
    :applicationTemplateId,
    :servicePrincipalLockConfiguration,
    :publicClient,
    :addIns,
    :tokenEncryptionKeyId,
    :signInAudience,
    :verifiedPublisher,
    :groupMembershipClaims,
    :notes,
    :keyCredentials,
    :displayName,
    :description,
    :tokenLifetimePolicies,
    :isFallbackPublicClient,
    :requiredResourceAccess,
    :logo,
    :synchronization,
    :owners,
    :certification,
    :web,
    :createdDateTime,
    :identifierUris,
    :appId,
    :defaultRedirectUri
  ]

  @type t :: %__MODULE__{
          :"@odata.type" => String.t(),
          :id => String.t() | nil,
          :deletedDateTime => DateTime.t() | nil,
          :info => MicrosoftGraph.Model.ApplicationInfo.t() | nil,
          :homeRealmDiscoveryPolicies =>
            [MicrosoftGraph.Model.MicrosoftGraphHomeRealmDiscoveryPolicy.t()] | nil,
          :federatedIdentityCredentials =>
            [MicrosoftGraph.Model.MicrosoftGraphFederatedIdentityCredential.t()] | nil,
          :passwordCredentials =>
            [MicrosoftGraph.Model.MicrosoftGraphPasswordCredential.t()] | nil,
          :requestSignatureVerification =>
            MicrosoftGraph.Model.ApplicationRequestSignatureVerification.t() | nil,
          :isDeviceOnlyAuthSupported => boolean() | nil,
          :samlMetadataUrl => String.t() | nil,
          :api => MicrosoftGraph.Model.ApplicationApi.t() | nil,
          :disabledByMicrosoftStatus => String.t() | nil,
          :publisherDomain => String.t() | nil,
          :tokenIssuancePolicies =>
            [MicrosoftGraph.Model.MicrosoftGraphTokenIssuancePolicy.t()] | nil,
          :parentalControlSettings =>
            MicrosoftGraph.Model.ApplicationParentalControlSettings.t() | nil,
          :spa => MicrosoftGraph.Model.ApplicationSpa.t() | nil,
          :serviceManagementReference => String.t() | nil,
          :appRoles => [MicrosoftGraph.Model.MicrosoftGraphAppRole.t()] | nil,
          :appManagementPolicies =>
            [MicrosoftGraph.Model.MicrosoftGraphAppManagementPolicy.t()] | nil,
          :optionalClaims => MicrosoftGraph.Model.ApplicationOptionalClaims.t() | nil,
          :oauth2RequirePostResponse => boolean() | nil,
          :extensionProperties =>
            [MicrosoftGraph.Model.MicrosoftGraphExtensionProperty.t()] | nil,
          :tags => [String.t()] | nil,
          :createdOnBehalfOf => MicrosoftGraph.Model.ApplicationCreatedOnBehalfOf.t() | nil,
          :applicationTemplateId => String.t() | nil,
          :servicePrincipalLockConfiguration =>
            MicrosoftGraph.Model.ApplicationServicePrincipalLockConfiguration.t() | nil,
          :publicClient => MicrosoftGraph.Model.ApplicationPublicClient.t() | nil,
          :addIns => [MicrosoftGraph.Model.MicrosoftGraphAddIn.t()] | nil,
          :tokenEncryptionKeyId => String.t() | nil,
          :signInAudience => String.t() | nil,
          :verifiedPublisher => MicrosoftGraph.Model.ApplicationVerifiedPublisher.t() | nil,
          :groupMembershipClaims => String.t() | nil,
          :notes => String.t() | nil,
          :keyCredentials => [MicrosoftGraph.Model.MicrosoftGraphKeyCredential.t()] | nil,
          :displayName => String.t() | nil,
          :description => String.t() | nil,
          :tokenLifetimePolicies =>
            [MicrosoftGraph.Model.MicrosoftGraphTokenLifetimePolicy.t()] | nil,
          :isFallbackPublicClient => boolean() | nil,
          :requiredResourceAccess =>
            [MicrosoftGraph.Model.MicrosoftGraphRequiredResourceAccess.t()] | nil,
          :logo => String.t() | nil,
          :synchronization => MicrosoftGraph.Model.ApplicationSynchronization.t() | nil,
          :owners => [MicrosoftGraph.Model.MicrosoftGraphDirectoryObject.t()] | nil,
          :certification => MicrosoftGraph.Model.ApplicationCertification.t() | nil,
          :web => MicrosoftGraph.Model.ApplicationWeb.t() | nil,
          :createdDateTime => DateTime.t() | nil,
          :identifierUris => [String.t()] | nil,
          :appId => String.t() | nil,
          :defaultRedirectUri => String.t() | nil
        }

  alias MicrosoftGraph.Deserializer

  def decode(value) do
    value
    |> Deserializer.deserialize(:deletedDateTime, :datetime, nil)
    |> Deserializer.deserialize(:info, :struct, MicrosoftGraph.Model.ApplicationInfo)
    |> Deserializer.deserialize(
      :homeRealmDiscoveryPolicies,
      :list,
      MicrosoftGraph.Model.MicrosoftGraphHomeRealmDiscoveryPolicy
    )
    |> Deserializer.deserialize(
      :federatedIdentityCredentials,
      :list,
      MicrosoftGraph.Model.MicrosoftGraphFederatedIdentityCredential
    )
    |> Deserializer.deserialize(
      :passwordCredentials,
      :list,
      MicrosoftGraph.Model.MicrosoftGraphPasswordCredential
    )
    |> Deserializer.deserialize(
      :requestSignatureVerification,
      :struct,
      MicrosoftGraph.Model.ApplicationRequestSignatureVerification
    )
    |> Deserializer.deserialize(:api, :struct, MicrosoftGraph.Model.ApplicationApi)
    |> Deserializer.deserialize(
      :tokenIssuancePolicies,
      :list,
      MicrosoftGraph.Model.MicrosoftGraphTokenIssuancePolicy
    )
    |> Deserializer.deserialize(
      :parentalControlSettings,
      :struct,
      MicrosoftGraph.Model.ApplicationParentalControlSettings
    )
    |> Deserializer.deserialize(:spa, :struct, MicrosoftGraph.Model.ApplicationSpa)
    |> Deserializer.deserialize(:appRoles, :list, MicrosoftGraph.Model.MicrosoftGraphAppRole)
    |> Deserializer.deserialize(
      :appManagementPolicies,
      :list,
      MicrosoftGraph.Model.MicrosoftGraphAppManagementPolicy
    )
    |> Deserializer.deserialize(
      :optionalClaims,
      :struct,
      MicrosoftGraph.Model.ApplicationOptionalClaims
    )
    |> Deserializer.deserialize(
      :extensionProperties,
      :list,
      MicrosoftGraph.Model.MicrosoftGraphExtensionProperty
    )
    |> Deserializer.deserialize(
      :createdOnBehalfOf,
      :struct,
      MicrosoftGraph.Model.ApplicationCreatedOnBehalfOf
    )
    |> Deserializer.deserialize(
      :servicePrincipalLockConfiguration,
      :struct,
      MicrosoftGraph.Model.ApplicationServicePrincipalLockConfiguration
    )
    |> Deserializer.deserialize(
      :publicClient,
      :struct,
      MicrosoftGraph.Model.ApplicationPublicClient
    )
    |> Deserializer.deserialize(:addIns, :list, MicrosoftGraph.Model.MicrosoftGraphAddIn)
    |> Deserializer.deserialize(
      :verifiedPublisher,
      :struct,
      MicrosoftGraph.Model.ApplicationVerifiedPublisher
    )
    |> Deserializer.deserialize(
      :keyCredentials,
      :list,
      MicrosoftGraph.Model.MicrosoftGraphKeyCredential
    )
    |> Deserializer.deserialize(
      :tokenLifetimePolicies,
      :list,
      MicrosoftGraph.Model.MicrosoftGraphTokenLifetimePolicy
    )
    |> Deserializer.deserialize(
      :requiredResourceAccess,
      :list,
      MicrosoftGraph.Model.MicrosoftGraphRequiredResourceAccess
    )
    |> Deserializer.deserialize(
      :synchronization,
      :struct,
      MicrosoftGraph.Model.ApplicationSynchronization
    )
    |> Deserializer.deserialize(
      :owners,
      :list,
      MicrosoftGraph.Model.MicrosoftGraphDirectoryObject
    )
    |> Deserializer.deserialize(
      :certification,
      :struct,
      MicrosoftGraph.Model.ApplicationCertification
    )
    |> Deserializer.deserialize(:web, :struct, MicrosoftGraph.Model.ApplicationWeb)
    |> Deserializer.deserialize(:createdDateTime, :datetime, nil)
  end
end
