# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Model.PrinterBaseCapabilities do
  @moduledoc """
  The capabilities of the printer/printerShare.
  """

  @derive Jason.Encoder
  defstruct [
    :"@odata.type",
    :bottomMargins,
    :collation,
    :colorModes,
    :contentTypes,
    :copiesPerJob,
    :dpis,
    :duplexModes,
    :feedOrientations,
    :finishings,
    :inputBins,
    :isColorPrintingSupported,
    :isPageRangeSupported,
    :leftMargins,
    :mediaColors,
    :mediaSizes,
    :mediaTypes,
    :multipageLayouts,
    :orientations,
    :outputBins,
    :pagesPerSheet,
    :qualities,
    :rightMargins,
    :scalings,
    :supportsFitPdfToPage,
    :topMargins
  ]

  @type t :: %__MODULE__{
    :"@odata.type" => String.t,
    :bottomMargins => [integer()] | nil,
    :collation => boolean() | nil,
    :colorModes => [MicrosoftGraph.Model.MicrosoftGraphPrinterCapabilitiesColorModesInner.t] | nil,
    :contentTypes => [String.t] | nil,
    :copiesPerJob => MicrosoftGraph.Model.MicrosoftGraphPrinterCapabilitiesCopiesPerJob.t | nil,
    :dpis => [integer()] | nil,
    :duplexModes => [MicrosoftGraph.Model.MicrosoftGraphPrinterCapabilitiesDuplexModesInner.t] | nil,
    :feedOrientations => [MicrosoftGraph.Model.MicrosoftGraphPrinterCapabilitiesFeedOrientationsInner.t] | nil,
    :finishings => [MicrosoftGraph.Model.MicrosoftGraphPrintJobConfigurationFinishingsInner.t] | nil,
    :inputBins => [String.t] | nil,
    :isColorPrintingSupported => boolean() | nil,
    :isPageRangeSupported => boolean() | nil,
    :leftMargins => [integer()] | nil,
    :mediaColors => [String.t] | nil,
    :mediaSizes => [String.t] | nil,
    :mediaTypes => [String.t] | nil,
    :multipageLayouts => [MicrosoftGraph.Model.MicrosoftGraphPrintJobConfigurationMultipageLayout.t] | nil,
    :orientations => [MicrosoftGraph.Model.MicrosoftGraphPrintJobConfigurationOrientation.t] | nil,
    :outputBins => [String.t] | nil,
    :pagesPerSheet => [integer()] | nil,
    :qualities => [MicrosoftGraph.Model.MicrosoftGraphPrintJobConfigurationQuality.t] | nil,
    :rightMargins => [integer()] | nil,
    :scalings => [MicrosoftGraph.Model.MicrosoftGraphPrintJobConfigurationScaling.t] | nil,
    :supportsFitPdfToPage => boolean() | nil,
    :topMargins => [integer()] | nil
  }

  alias MicrosoftGraph.Deserializer

  def decode(value) do
    value
     |> Deserializer.deserialize(:colorModes, :list, MicrosoftGraph.Model.MicrosoftGraphPrinterCapabilitiesColorModesInner)
     |> Deserializer.deserialize(:copiesPerJob, :struct, MicrosoftGraph.Model.MicrosoftGraphPrinterCapabilitiesCopiesPerJob)
     |> Deserializer.deserialize(:duplexModes, :list, MicrosoftGraph.Model.MicrosoftGraphPrinterCapabilitiesDuplexModesInner)
     |> Deserializer.deserialize(:feedOrientations, :list, MicrosoftGraph.Model.MicrosoftGraphPrinterCapabilitiesFeedOrientationsInner)
     |> Deserializer.deserialize(:finishings, :list, MicrosoftGraph.Model.MicrosoftGraphPrintJobConfigurationFinishingsInner)
     |> Deserializer.deserialize(:multipageLayouts, :list, MicrosoftGraph.Model.MicrosoftGraphPrintJobConfigurationMultipageLayout)
     |> Deserializer.deserialize(:orientations, :list, MicrosoftGraph.Model.MicrosoftGraphPrintJobConfigurationOrientation)
     |> Deserializer.deserialize(:qualities, :list, MicrosoftGraph.Model.MicrosoftGraphPrintJobConfigurationQuality)
     |> Deserializer.deserialize(:scalings, :list, MicrosoftGraph.Model.MicrosoftGraphPrintJobConfigurationScaling)
  end
end

