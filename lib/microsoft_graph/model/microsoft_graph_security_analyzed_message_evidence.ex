# NOTE: This file is auto generated by OpenAPI Generator 7.0.1 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MicrosoftGraph.Model.MicrosoftGraphSecurityAnalyzedMessageEvidence do
  @moduledoc """

  """

  @derive Jason.Encoder
  defstruct [
    :"@odata.type",
    :createdDateTime,
    :detailedRoles,
    :remediationStatus,
    :remediationStatusDetails,
    :roles,
    :tags,
    :verdict,
    :antiSpamDirection,
    :attachmentsCount,
    :deliveryAction,
    :deliveryLocation,
    :internetMessageId,
    :language,
    :networkMessageId,
    :p1Sender,
    :p2Sender,
    :receivedDateTime,
    :recipientEmailAddress,
    :senderIp,
    :subject,
    :threatDetectionMethods,
    :threats,
    :urlCount,
    :urls,
    :urn
  ]

  @type t :: %__MODULE__{
          :"@odata.type" => String.t(),
          :createdDateTime => DateTime.t() | nil,
          :detailedRoles => [String.t()] | nil,
          :remediationStatus =>
            MicrosoftGraph.Model.MicrosoftGraphSecurityEvidenceRemediationStatus.t() | nil,
          :remediationStatusDetails => String.t() | nil,
          :roles => [MicrosoftGraph.Model.MicrosoftGraphSecurityEvidenceRole.t()] | nil,
          :tags => [String.t()] | nil,
          :verdict => MicrosoftGraph.Model.MicrosoftGraphSecurityEvidenceVerdict.t() | nil,
          :antiSpamDirection => String.t() | nil,
          :attachmentsCount => integer() | nil,
          :deliveryAction => String.t() | nil,
          :deliveryLocation => String.t() | nil,
          :internetMessageId => String.t() | nil,
          :language => String.t() | nil,
          :networkMessageId => String.t() | nil,
          :p1Sender => MicrosoftGraph.Model.AnalyzedMessageEvidenceP1Sender.t() | nil,
          :p2Sender => MicrosoftGraph.Model.AnalyzedMessageEvidenceP2Sender.t() | nil,
          :receivedDateTime => DateTime.t() | nil,
          :recipientEmailAddress => String.t() | nil,
          :senderIp => String.t() | nil,
          :subject => String.t() | nil,
          :threatDetectionMethods => [String.t()] | nil,
          :threats => [String.t()] | nil,
          :urlCount => integer() | nil,
          :urls => [String.t()] | nil,
          :urn => String.t() | nil
        }

  alias MicrosoftGraph.Deserializer

  def decode(value) do
    value
    |> Deserializer.deserialize(:createdDateTime, :datetime, nil)
    |> Deserializer.deserialize(
      :remediationStatus,
      :struct,
      MicrosoftGraph.Model.MicrosoftGraphSecurityEvidenceRemediationStatus
    )
    |> Deserializer.deserialize(
      :roles,
      :list,
      MicrosoftGraph.Model.MicrosoftGraphSecurityEvidenceRole
    )
    |> Deserializer.deserialize(
      :verdict,
      :struct,
      MicrosoftGraph.Model.MicrosoftGraphSecurityEvidenceVerdict
    )
    |> Deserializer.deserialize(
      :p1Sender,
      :struct,
      MicrosoftGraph.Model.AnalyzedMessageEvidenceP1Sender
    )
    |> Deserializer.deserialize(
      :p2Sender,
      :struct,
      MicrosoftGraph.Model.AnalyzedMessageEvidenceP2Sender
    )
    |> Deserializer.deserialize(:receivedDateTime, :datetime, nil)
  end
end
